<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>芋道源码 —— 纯源码解析BLOG</title>
  
  <subtitle>愿半生编码，如一生老友！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.iocoder.cn/"/>
  <updated>2017-12-01T14:03:11.000Z</updated>
  <id>http://www.iocoder.cn/</id>
  
  <author>
    <name>芋道源码</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.10) 之 RequestRateLimiterGatewayFilterFactory 请求限流</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-request-rate-limiter/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/filter-request-rate-limiter/</id>
    <published>2020-04-09T16:00:00.000Z</published>
    <updated>2017-12-01T14:03:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-request-rate-limiter/">http://www.iocoder.cn/Spring-Cloud-Gateway/filter-request-rate-limiter/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">2. 环境搭建</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">3. RequestRateLimiterGatewayFilterFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">4. KeyResolver</a><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">4.1 PrincipalNameKeyResolver</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">4.2 自定义 KeyResolver</a></li></ul></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">5. RateLimiter</a><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">5.1 GatewayRedisAutoConfiguration</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">5.2 RedisRateLimiter</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">5.3 Redis Lua 脚本</a></li></ul></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>RequestRateLimiterGatewayFilterFactory 的代码实现</strong>。</p><p>在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.2) 之 GatewayFilterFactory 过滤器工厂》</a> 一文中，我们看到 Spring Cloud Gateway 提供了多种 GatewayFilterFactory 的实现，而 RequestRateLimiterGatewayFilterFactory 也是其中的一种。</p><p>通过 RequestRateLimiterGatewayFilterFactory ，可以创建 RequestRateLimiterGatewayFilter ( 实际是内部匿名类，为了表述方便，下面继续这么称呼 ) 。</p><p>RequestRateLimiterGatewayFilter 使用 <strong>Redis + Lua</strong> 实现分布式限流。而限流的粒度，例如 URL / 用户 / IP 等，通过 <code>org.springframework.cloud.gateway.filter.ratelimit.KeyResolver</code> <strong>实现类</strong>决定，在 <a href="#">「4. KeyResolver」</a> 详细解析。</p><p>这里，笔者一本正经的推荐下自己分享的 <a href="http://www.iocoder.cn/Eureka/rate-limiter/?self">《Eureka 源码解析 —— 基于令牌桶算法的 RateLimiter》</a> ，简直业界良心。</p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h1><p>第一步，以 <code>spring-cloud-gateway-sample</code> 项目为基础，在 <code>pom.xml</code> 文件添加依赖库。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis-reactive&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>第二步，在 <code>application.yml</code> 配置<strong>一个</strong> RouteDefinition 。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">default_path_to_httpbin</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://127.0.0.1:8081</span></div><div class="line"><span class="attr">        order:</span> <span class="number">10000</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Path=/**</span></div><div class="line"><span class="attr">        filters:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">RequestRateLimiter=10,</span> <span class="number">20</span><span class="string">,</span> <span class="comment">#&#123;@principalNameKeyResolver&#125;</span></div></pre></td></tr></table></figure><ul><li><code>- RequestRateLimiter=10, 20, #{@principalNameKeyResolver}</code> ，配置 RequestRateLimiterGatewayFilterFactory 。 <ul><li>默认情况下，基于<strong>令牌桶算法</strong>实现限流。 </li><li>第一个参数，<code>burstCapacity</code> ，令牌桶上限 。</li><li>第二个参数，<code>replenishRate</code> ，令牌桶填充平均速率，单位：秒。</li><li>第三个参数，<code>keyResolver</code> ，限流<strong>键</strong>解析器 Bean 对象名字，根据 <code>#{@beanName}</code> ，使用 SpEL 表达式，从 Spring 容器中获取 Bean 对象，详细参见 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/83496b78944269050373bb92bb2181e1b7c070e8/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/route/RouteDefinitionRouteLocator.java#L182" rel="external nofollow noopener noreferrer" target="_blank"><code>RouteDefinitionRouteLocator#getTuple(ArgumentHints, Map&lt;String, String&gt;, SpelExpressionParser, BeanFactory)</code></a> 处的代码。另外，这里有一个 BUG ：在 YAML 里，<code>#</code> 代表注释，所以第三个参数无法正确被读取，需要等待官方修复。如果比较着急使用，可以考虑将此处的 <code>#</code> 修改成 <code>\#</code> ，并修改部分相关代码以解决该 BUG 。</li></ul></li></ul><p>第三步，配置完成，启动 <code>spring-cloud-gateway-sample</code> 项目。</p><blockquote><p><strong>友情提示</strong>，RequestRateLimiterGatewayFilter 使用了 RedisTemplate ，生产环境请配置。</p></blockquote><h1 id="3-RequestRateLimiterGatewayFilterFactory"><a href="#3-RequestRateLimiterGatewayFilterFactory" class="headerlink" title="3. RequestRateLimiterGatewayFilterFactory"></a>3. RequestRateLimiterGatewayFilterFactory</h1><p><code>org.springframework.cloud.gateway.filter.factory.RequestRateLimiterGatewayFilterFactory</code> ，请求限流网关过滤器<strong>工厂</strong>类。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestRateLimiterGatewayFilterFactory</span> <span class="keyword">implements</span> <span class="title">GatewayFilterFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_RESOLVER_KEY = <span class="string">"keyResolver"</span>;</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>: <span class="keyword">private</span> <span class="keyword">final</span> RateLimiter rateLimiter;</div><div class="line"> <span class="number">6</span>: <span class="keyword">private</span> <span class="keyword">final</span> KeyResolver defaultKeyResolver;</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>: <span class="function"><span class="keyword">public</span> <span class="title">RequestRateLimiterGatewayFilterFactory</span><span class="params">(RateLimiter rateLimiter,</span></span></div><div class="line"><span class="function"><span class="params"> <span class="number">9</span>: KeyResolver defaultKeyResolver)</span> </span>&#123;</div><div class="line"><span class="number">10</span>: <span class="keyword">this</span>.rateLimiter = rateLimiter;</div><div class="line"><span class="number">11</span>: <span class="keyword">this</span>.defaultKeyResolver = defaultKeyResolver;</div><div class="line"><span class="number">12</span>: &#125;</div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">15</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">16</span>:         <span class="keyword">return</span> Arrays.asList(</div><div class="line"><span class="number">17</span>:                 RedisRateLimiter.REPLENISH_RATE_KEY,</div><div class="line"><span class="number">18</span>:                 RedisRateLimiter.BURST_CAPACITY_KEY,</div><div class="line"><span class="number">19</span>:                 KEY_RESOLVER_KEY</div><div class="line"><span class="number">20</span>:         );</div><div class="line"><span class="number">21</span>: &#125;</div><div class="line"><span class="number">22</span>: </div><div class="line"><span class="number">23</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">24</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateArgs</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">25</span>:  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">26</span>: &#125;</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>: <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="number">29</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">30</span>: <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">31</span>:         validateMin(<span class="number">2</span>, args);</div><div class="line"><span class="number">32</span>: </div><div class="line"><span class="number">33</span>:         <span class="comment">// 获得 KeyResolver</span></div><div class="line"><span class="number">34</span>: KeyResolver keyResolver;</div><div class="line"><span class="number">35</span>: <span class="keyword">if</span> (args.hasFieldName(KEY_RESOLVER_KEY)) &#123;</div><div class="line"><span class="number">36</span>: keyResolver = args.getValue(KEY_RESOLVER_KEY, KeyResolver.class);</div><div class="line"><span class="number">37</span>: &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">38</span>: keyResolver = defaultKeyResolver;</div><div class="line"><span class="number">39</span>: &#125;</div><div class="line"><span class="number">40</span>: </div><div class="line"><span class="number">41</span>: <span class="keyword">return</span> (exchange, chain) -&gt; keyResolver.resolve(exchange).flatMap(key -&gt;</div><div class="line"><span class="number">42</span>:             <span class="comment">// <span class="doctag">TODO:</span> if key is empty?</span></div><div class="line"><span class="number">43</span>:             rateLimiter.isAllowed(key, args).flatMap(response -&gt; &#123;</div><div class="line"><span class="number">44</span>:                 <span class="comment">// <span class="doctag">TODO:</span> set some headers for rate, tokens left</span></div><div class="line"><span class="number">45</span>: </div><div class="line"><span class="number">46</span>:                 <span class="comment">// 允许访问</span></div><div class="line"><span class="number">47</span>:                 <span class="keyword">if</span> (response.isAllowed()) &#123;</div><div class="line"><span class="number">48</span>:                     <span class="keyword">return</span> chain.filter(exchange);</div><div class="line"><span class="number">49</span>:                 &#125;</div><div class="line"><span class="number">50</span>: </div><div class="line"><span class="number">51</span>:                 <span class="comment">// 被限流，不允许访问</span></div><div class="line"><span class="number">52</span>:                 exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);</div><div class="line"><span class="number">53</span>:                 <span class="keyword">return</span> exchange.getResponse().setComplete();</div><div class="line"><span class="number">54</span>:             &#125;));</div><div class="line"><span class="number">55</span>: &#125;</div><div class="line"><span class="number">56</span>: </div><div class="line"><span class="number">57</span>: &#125;</div></pre></td></tr></table></figure><ul><li><code>rateLimiter</code> 属性，限流器。默认情况下，使用 RedisRateLimiter 。</li><li><code>defaultKeyResolver</code> 属性，默认限流<strong>键</strong>解析器。默认情况下，使用 PrincipalNameKeyResolver 。</li><li><code>#argNames()</code> 方法，定义了 Tuple 参数的 Key 为 <code>replenishRate</code> / <code>burstCapacity</code> / <code>keyResolver</code> 。</li><li><code>#validateArgs()</code> 方法，定义在 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/83496b78944269050373bb92bb2181e1b7c070e8/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/route/RouteDefinitionRouteLocator.java#L182" rel="external nofollow noopener noreferrer" target="_blank"><code>RouteDefinitionRouteLocator#getTuple(ArgumentHints, Map&lt;String, String&gt;, SpelExpressionParser, BeanFactory)</code></a> 无需校验 Tuple 结果。因为 <code>keyResolver</code> 非必填项，在 <code>#apply()</code> 方法，创建 RequestRateLimiterGatewayFilter 时<strong>校验</strong>。</li><li><code>#apply()</code> 方法，创建 RequestRateLimiterGatewayFilter 对象。</li><li>第 31 行 ：校验 Tuple 参数至少有两个元素，即 <code>replenishRate</code> 和 <code>burstCapacity</code> 。而 <code>keyResolver</code> 是<strong>选填</strong>，为空时，使用默认值 <code>defaultKeyResolver</code> 。</li><li>第 34 至 39 行 ：获得 <code>keyResolver</code> 。通过它，获得请求的限流<strong>键</strong>，例如URL / 用户 / IP 等。</li><li>——— 第 41 至 54 行 ：<strong>创建 RequestRateLimiterGatewayFilter 对象并返回</strong>。</li><li>第 41 行 ：调用 <code>KeyResolver#resolve(ServerWebExchange)</code> 方法，获得请求的限流<strong>键</strong>。<ul><li><strong>注意下</strong>，这里未处理限流<strong>键</strong>为空的情况( <code>TODO: if key is empty?</code> )。所以，当限流<strong>键</strong>为空时，过滤器链不会继续向下执行，也就是说，不会请求后端 Http / Websocket 服务，并且最终返回客户端 <strong>200</strong> 状态码，内容为<strong>空</strong>。</li></ul></li><li>第 43 至 54 行 ：调用 <code>RateLimiter#isAllowed(ServerWebExchange, Tuple)</code> 方法，判断是否被限流。<ul><li>第 47 至 49 行 ：<strong>未</strong>被限流，允许访问，提交过滤器链继续过滤。</li><li>第 52 至 53 行 ：被限流， <strong>不</strong>允许访问，设置响应 429 状态码，并回写客户端<strong>响应</strong>( <code>exchange.getResponse().setComplete()</code> ) 。</li></ul></li></ul><h1 id="4-KeyResolver"><a href="#4-KeyResolver" class="headerlink" title="4. KeyResolver"></a>4. KeyResolver</h1><p><code>org.springframework.cloud.gateway.filter.ratelimit.KeyResolver</code> ，请求<strong>键</strong>解析器<strong>接口</strong>。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KeyResolver</span> </span>&#123;</div><div class="line"><span class="function">Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>KeyResolver#resolve(ServerWebExchange)</code> 方法，获得请求的限流<strong>键</strong>。</li></ul><p>通过实现 KeyResolver 接口，实现获得不同的请求的限流<strong>键</strong>，例如URL / 用户 / IP 等。</p><p>目前版本，Spring Cloud Gateway 提供的 KeyResolver 实现类只有 PrincipalNameKeyResolver 。据官方说法，在未来的里程碑版本中，将会有一些 KeyResolver 具体实现类。</p><h2 id="4-1-PrincipalNameKeyResolver"><a href="#4-1-PrincipalNameKeyResolver" class="headerlink" title="4.1 PrincipalNameKeyResolver"></a>4.1 PrincipalNameKeyResolver</h2><p><code>org.springframework.cloud.gateway.filter.ratelimit.PrincipalNameKeyResolver</code> ，使用请求认证的 <code>java.security.Principal</code> 作为限流<strong>键</strong>。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrincipalNameKeyResolver</span> <span class="keyword">implements</span> <span class="title">KeyResolver</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEAN_NAME = <span class="string">"principalNameKeyResolver"</span>;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> exchange.getPrincipal().map(Principal::getName).switchIfEmpty(Mono.empty());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-2-自定义-KeyResolver"><a href="#4-2-自定义-KeyResolver" class="headerlink" title="4.2 自定义 KeyResolver"></a>4.2 自定义 KeyResolver</h2><p>通过实现 KeyResolver 接口，实现自定义 KeyResolver 。下面我们实现一个使用请求 IP 作为限流<strong>键</strong>的 KeyResolver 。</p><p>第一步，创建 RemoteAddrKeyResolver 类，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteAddrKeyResolver</span> <span class="keyword">implements</span> <span class="title">KeyResolver</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEAN_NAME = <span class="string">"remoteAddrKeyResolver"</span>;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Mono.just(exchange.getRequest().getRemoteAddress().getAddress().getHostAddress());</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第二步，配置 RemoteAddrKeyResolver Bean 对象，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Bean</span>(name = RemoteAddrKeyResolver.BEAN_NAME)</div><div class="line"><span class="meta">@ConditionalOnBean</span>(RateLimiter.class)</div><div class="line"><span class="function"><span class="keyword">public</span> RemoteAddrKeyResolver <span class="title">remoteAddrKeyResolver</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RemoteAddrKeyResolver();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第三步，配置 RouteDefinition 路由配置，配置如下 ：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">default_path_to_httpbin</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://127.0.0.1:8081</span></div><div class="line"><span class="attr">        order:</span> <span class="number">10000</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Path=/**</span></div><div class="line"><span class="attr">        filters:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">RequestRateLimiter=10,</span> <span class="number">20</span><span class="string">,</span> <span class="comment">#&#123;@remoteAddrKeyResolver&#125;</span></div></pre></td></tr></table></figure><p>第四步，<strong>大功告成</strong>，启动 Spring Cloud Gateway 即可。</p><p>另外，推荐 <a href="https://mp.weixin.qq.com/s?__biz=MzI4ODQ3NjE2OA==&amp;mid=2247483811&amp;idx=1&amp;sn=16fe7e25a90635e93c60048ebe8b40a2&amp;chksm=ec3c9cc4db4b15d2937fb8b2ef571c941b2bb9fefcf5ed8232e3699b4868392022a62b963699&amp;mpshare=1&amp;scene=1&amp;srcid=1201O46Ma9D5ln5TuxHUgziY#rd" rel="external nofollow noopener noreferrer" target="_blank">《周立 —— Spring Cloud限流详解（附源码）》</a>，里面有一些限流维度的分析。</p><h1 id="5-RateLimiter"><a href="#5-RateLimiter" class="headerlink" title="5. RateLimiter"></a>5. RateLimiter</h1><p><code>org.springframework.cloud.gateway.filter.ratelimit.RateLimiter</code> ，限流器<strong>接口</strong>。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RateLimiter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function">Mono&lt;Response&gt; <span class="title">isAllowed</span><span class="params">(String id, Tuple args)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>#isAllowed(String id, Tuple args)</code> 方法，判断是否被限流。</li><li><p>Response 类，代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 是否允许访问( 未被限流 )</span></div><div class="line"><span class="comment">     */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> allowed;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 令牌桶剩余数量</span></div><div class="line"><span class="comment">     */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> tokensRemaining;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Response</span><span class="params">(<span class="keyword">boolean</span> allowed, <span class="keyword">long</span> tokensRemaining)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.allowed = allowed;</div><div class="line"><span class="keyword">this</span>.tokensRemaining = tokensRemaining;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="5-1-GatewayRedisAutoConfiguration"><a href="#5-1-GatewayRedisAutoConfiguration" class="headerlink" title="5.1 GatewayRedisAutoConfiguration"></a>5.1 GatewayRedisAutoConfiguration</h2><p><code>org.springframework.cloud.gateway.config.GatewayRedisAutoConfiguration</code> ，Redis 相关配置类，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Configuration</span></div><div class="line"> <span class="number">2</span>: <span class="meta">@AutoConfigureAfter</span>(RedisReactiveAutoConfiguration.class)</div><div class="line"> <span class="number">3</span>: <span class="meta">@AutoConfigureBefore</span>(GatewayAutoConfiguration.class)</div><div class="line"> <span class="number">4</span>: <span class="meta">@ConditionalOnBean</span>(ReactiveRedisTemplate.class)</div><div class="line"> <span class="number">5</span>: <span class="meta">@ConditionalOnClass</span>(&#123;RedisTemplate.class, DispatcherHandler.class&#125;)</div><div class="line"> <span class="number">6</span>: <span class="class"><span class="keyword">class</span> <span class="title">GatewayRedisAutoConfiguration</span> </span>&#123;</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>: <span class="meta">@Bean</span></div><div class="line"> <span class="number">9</span>: <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="number">10</span>: <span class="function"><span class="keyword">public</span> RedisScript <span class="title">redisRequestRateLimiterScript</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">11</span>: DefaultRedisScript redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</div><div class="line"><span class="number">12</span>: redisScript.setScriptSource(<span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">"META-INF/scripts/request_rate_limiter.lua"</span>)));</div><div class="line"><span class="number">13</span>: redisScript.setResultType(List.class);</div><div class="line"><span class="number">14</span>: <span class="keyword">return</span> redisScript;</div><div class="line"><span class="number">15</span>: &#125;</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: <span class="meta">@Bean</span></div><div class="line"><span class="number">18</span>: <span class="comment">//<span class="doctag">TODO:</span> replace with ReactiveStringRedisTemplate in future</span></div><div class="line"><span class="number">19</span>: <span class="function"><span class="keyword">public</span> ReactiveRedisTemplate&lt;String, String&gt; <span class="title">stringReactiveRedisTemplate</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params"><span class="number">20</span>: ReactiveRedisConnectionFactory reactiveRedisConnectionFactory,</span></span></div><div class="line"><span class="function"><span class="params"><span class="number">21</span>: ResourceLoader resourceLoader)</span> </span>&#123;</div><div class="line"><span class="number">22</span>: RedisSerializer&lt;String&gt; serializer = <span class="keyword">new</span> StringRedisSerializer();</div><div class="line"><span class="number">23</span>: RedisSerializationContext&lt;String , String&gt; serializationContext = RedisSerializationContext</div><div class="line"><span class="number">24</span>: .&lt;String, String&gt;newSerializationContext()</div><div class="line"><span class="number">25</span>: .key(serializer)</div><div class="line"><span class="number">26</span>: .value(serializer)</div><div class="line"><span class="number">27</span>: .hashKey(serializer)</div><div class="line"><span class="number">28</span>: .hashValue(serializer)</div><div class="line"><span class="number">29</span>: .build();</div><div class="line"><span class="number">30</span>: <span class="keyword">return</span> <span class="keyword">new</span> ReactiveRedisTemplate&lt;&gt;(reactiveRedisConnectionFactory,</div><div class="line"><span class="number">31</span>: serializationContext);</div><div class="line"><span class="number">32</span>: &#125;</div><div class="line"><span class="number">33</span>: </div><div class="line"><span class="number">34</span>: <span class="meta">@Bean</span></div><div class="line"><span class="number">35</span>: <span class="function"><span class="keyword">public</span> RedisRateLimiter <span class="title">redisRateLimiter</span><span class="params">(ReactiveRedisTemplate&lt;String, String&gt; redisTemplate,</span></span></div><div class="line"><span class="function"><span class="params"><span class="number">36</span>:  @Qualifier(<span class="string">"redisRequestRateLimiterScript"</span>)</span> RedisScript&lt;List&lt;Long&gt;&gt; redisScript) </span>&#123;</div><div class="line"><span class="number">37</span>: <span class="keyword">return</span> <span class="keyword">new</span> RedisRateLimiter(redisTemplate, redisScript);</div><div class="line"><span class="number">38</span>: &#125;</div><div class="line"><span class="number">39</span>: </div><div class="line"><span class="number">40</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 8 至 15 行 ：创建 <code>org.springframework.data.redis.core.script.RedisScript</code> Bean 对象，加载 <code>META-INF/scripts/request_rate_limiter.lua</code> 路径下的 Redis Lua 脚本。该脚本使用 Redis 基于<strong>令牌桶算法</strong>实现限流。在本文 <a href="#">「Redis Lua 脚本」</a> 详细解析。 </li><li>第 17 至 32 行 ：创建 <code>org.springframework.data.redis.core.ReactiveRedisTemplate</code> Bean 对象。</li><li>第 34 至 38 行 ：使用 RedisScript 和 ReactiveRedisTemplate Bean 对象，创建 RedisRateLimiter Bean 对象。</li></ul><h2 id="5-2-RedisRateLimiter"><a href="#5-2-RedisRateLimiter" class="headerlink" title="5.2 RedisRateLimiter"></a>5.2 RedisRateLimiter</h2><p><code>org.springframework.cloud.gateway.filter.ratelimit.RedisRateLimiter</code> ，基于 Redis 的分布式限流器<strong>实现类</strong>。</p><p><strong>构造方法</strong>，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisRateLimiter</span> <span class="keyword">implements</span> <span class="title">RateLimiter</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REPLENISH_RATE_KEY = <span class="string">"replenishRate"</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BURST_CAPACITY_KEY = <span class="string">"burstCapacity"</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReactiveRedisTemplate&lt;String, String&gt; redisTemplate;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> RedisScript&lt;List&lt;Long&gt;&gt; script;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">RedisRateLimiter</span><span class="params">(ReactiveRedisTemplate&lt;String, String&gt; redisTemplate,</span></span></div><div class="line"><span class="function"><span class="params">RedisScript&lt;List&lt;Long&gt;&gt; script)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.redisTemplate = redisTemplate;</div><div class="line"><span class="keyword">this</span>.script = script;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>redisTemplate</code> 属性，RedisTemplate 。</li><li><code>script</code> 属性，Lua 脚本。</li></ul><hr><p><code>#isAllowed(id, Tuple)</code> ，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Response&gt; <span class="title">isAllowed</span><span class="params">(String id, Tuple args)</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: <span class="comment">// How many requests per second do you want a user to be allowed to do?</span></div><div class="line"> <span class="number">3</span>: <span class="keyword">int</span> replenishRate = args.getInt(REPLENISH_RATE_KEY);</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>: <span class="comment">// How much bursting do you want to allow?</span></div><div class="line"> <span class="number">6</span>: <span class="keyword">int</span> burstCapacity;</div><div class="line"> <span class="number">7</span>: <span class="keyword">if</span> (args.hasFieldName(BURST_CAPACITY_KEY)) &#123;</div><div class="line"> <span class="number">8</span>: burstCapacity = args.getInt(BURST_CAPACITY_KEY);</div><div class="line"> <span class="number">9</span>: &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">10</span>: burstCapacity = <span class="number">0</span>;</div><div class="line"><span class="number">11</span>: &#125;</div><div class="line"><span class="number">12</span>: </div><div class="line"><span class="number">13</span>: <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">14</span>: <span class="comment">// Make a unique key per user.</span></div><div class="line"><span class="number">15</span>: String prefix = <span class="string">"request_rate_limiter."</span> + id;</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: <span class="comment">// You need two Redis keys for Token Bucket.</span></div><div class="line"><span class="number">18</span>: List&lt;String&gt; keys = Arrays.asList(prefix + <span class="string">".tokens"</span>, prefix + <span class="string">".timestamp"</span>);</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>: <span class="comment">// The arguments to the LUA script. time() returns unixtime in seconds.</span></div><div class="line"><span class="number">21</span>: List&lt;String&gt; scriptArgs = Arrays.asList(replenishRate + <span class="string">""</span>, burstCapacity + <span class="string">""</span>,</div><div class="line"><span class="number">22</span>:  Instant.now().getEpochSecond() + <span class="string">""</span>, <span class="string">"1"</span>);</div><div class="line"><span class="number">23</span>: <span class="comment">// allowed, tokens_left = redis.eval(SCRIPT, keys, args)</span></div><div class="line"><span class="number">24</span>: Flux&lt;List&lt;Long&gt;&gt; flux = <span class="keyword">this</span>.redisTemplate.execute(<span class="keyword">this</span>.script, keys, scriptArgs);</div><div class="line"><span class="number">25</span>: <span class="comment">// .log("redisratelimiter", Level.FINER);</span></div><div class="line"><span class="number">26</span>: <span class="keyword">return</span> flux</div><div class="line"><span class="number">27</span>: <span class="comment">// Throwable =&gt; Flux.just(Arrays.asList(1L, -1L)) 。</span></div><div class="line"><span class="number">28</span>: .onErrorResume(throwable -&gt; Flux.just(Arrays.asList(<span class="number">1L</span>, -<span class="number">1L</span>)))</div><div class="line"><span class="number">29</span>: <span class="comment">// Flux&lt;List&lt;Long&gt;&gt; =&gt; Mono&lt;List&lt;Long&gt;&gt;</span></div><div class="line"><span class="number">30</span>: .reduce(<span class="keyword">new</span> ArrayList&lt;Long&gt;(), (longs, l) -&gt; &#123;</div><div class="line"><span class="number">31</span>: longs.addAll(l);</div><div class="line"><span class="number">32</span>: <span class="keyword">return</span> longs;</div><div class="line"><span class="number">33</span>: &#125;)</div><div class="line"><span class="number">34</span>: <span class="comment">// Mono&lt;List&lt;Long&gt;&gt; =&gt; Mono&lt;Response&gt;</span></div><div class="line"><span class="number">35</span>: .map(results -&gt; &#123;</div><div class="line"><span class="number">36</span>: <span class="keyword">boolean</span> allowed = results.get(<span class="number">0</span>) == <span class="number">1L</span>;</div><div class="line"><span class="number">37</span>: Long tokensLeft = results.get(<span class="number">1</span>);</div><div class="line"><span class="number">38</span>: </div><div class="line"><span class="number">39</span>: Response response = <span class="keyword">new</span> Response(allowed, tokensLeft);</div><div class="line"><span class="number">40</span>: </div><div class="line"><span class="number">41</span>: <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line"><span class="number">42</span>: log.debug(<span class="string">"response: "</span> + response);</div><div class="line"><span class="number">43</span>: &#125;</div><div class="line"><span class="number">44</span>: <span class="keyword">return</span> response;</div><div class="line"><span class="number">45</span>: &#125;);</div><div class="line"><span class="number">46</span>: &#125;</div><div class="line"><span class="number">47</span>: <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">48</span>: <span class="comment">/*</span></div><div class="line"><span class="comment">49:  * We don't want a hard dependency on Redis to allow traffic. Make sure to set</span></div><div class="line"><span class="comment">50:  * an alert so you know if this is happening too much. Stripe's observed</span></div><div class="line"><span class="comment">51:  * failure rate is 0.01%.</span></div><div class="line"><span class="comment">52:  */</span></div><div class="line"><span class="number">53</span>: log.error(<span class="string">"Error determining if user allowed from redis"</span>, e);</div><div class="line"><span class="number">54</span>: &#125;</div><div class="line"><span class="number">55</span>: <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> Response(<span class="keyword">true</span>, -<span class="number">1</span>));</div><div class="line"><span class="number">56</span>: &#125;</div></pre></td></tr></table></figure><ul><li><code>id</code> 方法参数，令牌桶编号。一个令牌桶编号对应令牌桶。<ul><li>在本文场景中为请求限流<strong>键</strong>。</li></ul></li><li>第 3 行 ：获得 <code>burstCapacity</code> 令牌桶上限。</li><li>第 5 至 11 行 ：获得 <code>replenishRate</code> ，令牌桶填充平均速率，单位：秒。</li><li>第 15 行 ：获得令牌桶前缀，<code>request_rate_limiter.${id}</code> 。</li><li>第 18 行 ：获得令牌桶键数组 ：<ul><li><code>request_rate_limiter.${id}.tokens</code> ：令牌桶<strong>剩余</strong>令牌数。</li><li><code>request_rate_limiter.${id}.timestamp</code> ：令牌桶<strong>最后</strong>填充令牌时间，单位：秒。</li></ul></li><li><p>第 21 至 22 行 ：获得 Lua 脚本参数 ：</p><ul><li>第一个参数 ：<code>replenishRate</code> 。</li><li>第二个参数 ：<code>burstCapacity</code> 。</li><li><p>第三个参数 ：得到从 <code>1970-01-01 00:00:00</code> 开始的秒数。<strong>为什么在 Java 代码里获取，而不使用 Lua 在 Reids 里获取</strong>？</p><blockquote><p>FROM <a href="https://union-click.jd.com/jdc?d=pT3LH8" rel="external nofollow noopener noreferrer" target="_blank">《亿级流量网站架构核心技术》</a><br>因为 Redis 的限制（ Lua中有写操作不能使用带随机性质的读操作，如TIME ）不能在 Redis Lua中 使用 TIME 获取时间戳，因此只好从应用获取然后传入，在某些极端情况下（机器时钟不准的情况下），限流会存在一些小问题。</p><ul><li>涛哥这本书非常不错，推荐购买。</li></ul></blockquote></li><li><p>第四个参数 ：消耗令牌数量，默认 1 。</p></li></ul></li><li><p>第 24 行 ：调用 <code>ReactiveRedisTemplate#execute(RedisScript&lt;T&gt;, List&lt;K&gt;, List&lt;?&gt;)</code> 方法，执行 Redis Lua 脚本，获取令牌。返回结果为 <code>[是否获取令牌成功, 剩余令牌数]</code> ，其中，<code>1</code> 代表获取令牌<strong>成功</strong>，<code>0</code> 代表令牌获取<strong>失败</strong>。</p></li><li><p>第 25 行 ：当 Redis Lua 脚本过程中发生<strong>异常</strong>，忽略异常，返回 <code>Flux.just(Arrays.asList(1L, -1L))</code> ，即认为<strong>获取令牌成功</strong>。为什么？在 Redis 发生故障时，我们不希望限流器对 Reids 是<strong>强依赖</strong>，并且 Redis 发生故障的概率本身就很低。</p><blockquote><p>We don’t want a hard dependency on Redis to allow traffic.<br>Make sure to set an alert so you know if this is happening too much. Stripe’s observed failure rate is 0.01%.</p></blockquote></li><li><p>第 30 至 33 行 ：调用 <code>Flux#reduce(A, BiFunction&lt;A, ? super T, A&gt;)</code> 方法，将 <code>Flux&lt;List&lt;Long&gt;&gt;</code> 转换成 <code>Mono&lt;List&lt;Long&gt;&gt;</code> 。因为 <code>ReactiveRedisTemplate#execute(RedisScript&lt;T&gt;, List&lt;K&gt;, List&lt;?&gt;)</code> 方法的执行结果为 Flux ( 多次 )，实际在当前场景里，自行 Redis Lua 脚本只会返回<strong>一次</strong>数组，所以转换成 Mono (一次)。</p></li><li>第 35 至 45 行 ：调用 <code>Mono#map(Function&lt;? super T, ? extends R&gt;)</code> 方法，将 <code>Mono&lt;List&lt;Long&gt;&gt;</code> =&gt; <code>Mono&lt;Response&gt;</code> 。</li><li>第 47 至 55 行 ：当【第 15 至 24 行】代码部分执行发生异常时，例如 Redis 挂了，返回 <code>Flux.just(Arrays.asList(1L, -1L))</code> ，即认为<strong>获取令牌成功</strong>。</li></ul><h2 id="5-3-Redis-Lua-脚本"><a href="#5-3-Redis-Lua-脚本" class="headerlink" title="5.3 Redis Lua 脚本"></a>5.3 Redis Lua 脚本</h2><p><code>META-INF/scripts/request_rate_limiter.lua</code> ，Redis Lua 脚本，实现基于<strong>令牌桶算法</strong>实现限流。代码如下 ：</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">local</span> tokens_key = KEYS[<span class="number">1</span>]</div><div class="line"> <span class="number">2</span>: <span class="keyword">local</span> timestamp_key = KEYS[<span class="number">2</span>]</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>: <span class="keyword">local</span> rate = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</div><div class="line"> <span class="number">5</span>: <span class="keyword">local</span> capacity = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])</div><div class="line"> <span class="number">6</span>: <span class="keyword">local</span> now = <span class="built_in">tonumber</span>(ARGV[<span class="number">3</span>])</div><div class="line"> <span class="number">7</span>: <span class="keyword">local</span> requested = <span class="built_in">tonumber</span>(ARGV[<span class="number">4</span>])</div><div class="line"> <span class="number">8</span>: </div><div class="line"> <span class="number">9</span>: <span class="keyword">local</span> fill_time = capacity/rate</div><div class="line"><span class="number">10</span>: <span class="keyword">local</span> ttl = <span class="built_in">math</span>.<span class="built_in">floor</span>(fill_time*<span class="number">2</span>)</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: <span class="keyword">local</span> last_tokens = <span class="built_in">tonumber</span>(redis.call(<span class="string">"get"</span>, tokens_key))</div><div class="line"><span class="number">13</span>: <span class="keyword">if</span> last_tokens == <span class="literal">nil</span> <span class="keyword">then</span></div><div class="line"><span class="number">14</span>:   last_tokens = capacity</div><div class="line"><span class="number">15</span>: <span class="keyword">end</span></div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: <span class="keyword">local</span> last_refreshed = <span class="built_in">tonumber</span>(redis.call(<span class="string">"get"</span>, timestamp_key))</div><div class="line"><span class="number">18</span>: <span class="keyword">if</span> last_refreshed == <span class="literal">nil</span> <span class="keyword">then</span></div><div class="line"><span class="number">19</span>:   last_refreshed = <span class="number">0</span></div><div class="line"><span class="number">20</span>: <span class="keyword">end</span></div><div class="line"><span class="number">21</span>: </div><div class="line"><span class="number">22</span>: <span class="keyword">local</span> delta = <span class="built_in">math</span>.<span class="built_in">max</span>(<span class="number">0</span>, now-last_refreshed)</div><div class="line"><span class="number">23</span>: <span class="keyword">local</span> filled_tokens = <span class="built_in">math</span>.<span class="built_in">min</span>(capacity, last_tokens+(delta*rate))</div><div class="line"><span class="number">24</span>: <span class="keyword">local</span> allowed = filled_tokens &gt;= requested</div><div class="line"><span class="number">25</span>: <span class="keyword">local</span> new_tokens = filled_tokens</div><div class="line"><span class="number">26</span>: <span class="keyword">local</span> allowed_num = <span class="number">0</span></div><div class="line"><span class="number">27</span>: <span class="keyword">if</span> allowed <span class="keyword">then</span></div><div class="line"><span class="number">28</span>:   new_tokens = filled_tokens - requested</div><div class="line"><span class="number">29</span>:   allowed_num = <span class="number">1</span></div><div class="line"><span class="number">30</span>: <span class="keyword">end</span></div><div class="line"><span class="number">31</span>: </div><div class="line"><span class="number">32</span>: redis.call(<span class="string">"setex"</span>, tokens_key, ttl, new_tokens)</div><div class="line"><span class="number">33</span>: redis.call(<span class="string">"setex"</span>, timestamp_key, ttl, now)</div><div class="line"><span class="number">34</span>: </div><div class="line"><span class="number">35</span>: <span class="keyword">return</span> &#123; allowed_num, new_tokens &#125;</div></pre></td></tr></table></figure><ul><li>第 1 至 2 行 ：KEYS 方法参数 ：<ul><li>第一个参数 ：<code>request_rate_limiter.${id}.tokens</code> ，令牌桶<strong>剩余</strong>令牌数。</li><li>第二个参数 ：<code>request_rate_limiter.${id}.timestamp</code> ，令牌桶<strong>最后</strong>填充令牌时间，单位：秒。</li></ul></li><li><p>第 4 至 7 行 ：ARGV 方法参数 ：</p><ul><li>第一个参数 ：<code>replenishRate</code> 。</li><li>第二个参数 ：<code>burstCapacity</code> 。</li><li>第三个参数 ：得到从 <code>1970-01-01 00:00:00</code> 开始的秒数。</li><li>第四个参数 ：消耗令牌数量，默认 1 。</li></ul></li><li><p>第 9 行 ：计算令牌桶填充<strong>满</strong>令牌需要多久时间，单位：秒。</p></li><li>第 10 行 ：计算 <code>request_rate_limiter.${id}.tokens</code> / <code>request_rate_limiter.${id}.timestamp</code> 的 <strong>ttl</strong> 。<code>* 2</code> 保证时间充足。</li><li>第 12 至 20 行 ：调用 <code>get</code> 命令，获得令牌桶<strong>剩余</strong>令牌数( <code>last_tokens</code> ) ，令牌桶<strong>最后</strong>填充令牌时间(<code>last_refreshed</code>) 。</li><li>第 22 至 23 行 ：填充令牌，计算<strong>新</strong>的令牌桶<strong>剩余</strong>令牌数( <code>filled_tokens</code> )。填充不超过令牌桶令牌<strong>上限</strong>。</li><li><p>第 24 至 30 行 ：获取令牌是否成功。</p><ul><li>若<strong>成功</strong>，令牌桶<strong>剩余</strong>令牌数(<code>new_tokens</code>) <strong>减</strong>消耗令牌数( <code>requested</code> )，并设置获取成功( <code>allowed_num = 1</code> ) 。</li><li>若<strong>失败</strong>，设置获取失败( <code>allowed_num = 0</code> ) 。</li></ul></li><li><p>第 32 至 33 行 ：设置令牌桶<strong>剩余</strong>令牌数( <code>new_tokens</code> ) ，令牌桶<strong>最后</strong>填充令牌时间(<code>now</code>) 。</p></li><li>第 35 行 ：返回数组结果，<code>[是否获取令牌成功, 剩余令牌数]</code> 。</li></ul><p><strong>Redis Lua 脚本不会有并发问题么</strong>？</p><blockquote><p>FROM <a href="https://union-click.jd.com/jdc?d=pT3LH8" rel="external nofollow noopener noreferrer" target="_blank">《亿级流量网站架构核心技术》</a><br>因 Redis 是单线程模型，因此是线程安全的。</p></blockquote><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>哇哈哈，过滤器全部完成。恩，当然后面需要在考虑一下，例如认证过滤器等等。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_04_10/01.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-request-rate-limiter/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/fil
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.9) 之 HystrixGatewayFilterFactory 熔断</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/</id>
    <published>2020-04-04T16:00:00.000Z</published>
    <updated>2017-12-01T14:03:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">2. 环境搭建</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">3. HystrixGatewayFilterFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">4. 注意事项</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>HystrixGatewayFilterFactory 的代码实现</strong>。</p><p>在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.2) 之 GatewayFilterFactory 过滤器工厂》</a> 一文中，我们看到 Spring Cloud Gateway 提供了多种 GatewayFilterFactory 的实现，而 HystrixGatewayFilterFactory 也是其中的一种。</p><p>通过 HystrixGatewayFilterFactory ，可以创建 HystrixGatewayFilter ( 实际是内部匿名类，为了表述方便，下面继续这么称呼 ) 。</p><p>HystrixGatewayFilter 使用 <a href="https://github.com/Netflix/Hystrix" rel="external nofollow noopener noreferrer" target="_blank">Hystrix</a> ，实现基于 <strong>Route</strong> 级别的熔断功能。</p><p>这里，笔者一本正经的推荐下自己分享的 <a href="http://www.iocoder.cn/categories/Hystrix/?self">《Hystrix 源码解析系列》</a> ，简直业界良心。</p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h1><p>第一步，以 <code>spring-cloud-gateway-sample</code> 项目为基础，在 <code>pom.xml</code> 文件添加依赖库。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>第二步，在 <code>application.yml</code> 配置<strong>一个</strong> RouteDefinition 。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">default_path_to_httpbin</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://127.0.0.1:8081</span></div><div class="line"><span class="attr">        order:</span> <span class="number">10000</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Path=/**</span></div><div class="line"><span class="attr">        filters:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Hystrix=myCommandName</span></div></pre></td></tr></table></figure><ul><li><code>- Hystrix=myCommandName</code> ，配置 HystrixGatewayFilterFactory ，并以 <code>myCommandName</code> 为 <strong>Hystrix Command 名字</strong>。</li></ul><p>第三步，配置完成，启动 <code>spring-cloud-gateway-sample</code> 项目。</p><h1 id="3-HystrixGatewayFilterFactory"><a href="#3-HystrixGatewayFilterFactory" class="headerlink" title="3. HystrixGatewayFilterFactory"></a>3. HystrixGatewayFilterFactory</h1><p><code>org.springframework.cloud.gateway.filter.factory.HystrixGatewayFilterFactory</code> ，熔断网关过滤器<strong>工厂</strong>。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixGatewayFilterFactory</span> <span class="keyword">implements</span> <span class="title">GatewayFilterFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">4</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">5</span>: <span class="keyword">return</span> Arrays.asList(NAME_KEY);</div><div class="line"> <span class="number">6</span>: &#125;</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">9</span>: <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">10</span>: <span class="comment">//<span class="doctag">TODO:</span> if no name is supplied, generate one from command id (useful for default filter)</span></div><div class="line"><span class="number">11</span>: <span class="keyword">final</span> String commandName = args.getString(NAME_KEY);</div><div class="line"><span class="number">12</span>: <span class="keyword">final</span> HystrixCommandGroupKey groupKey = HystrixCommandGroupKey.Factory.asKey(getClass().getSimpleName());</div><div class="line"><span class="number">13</span>: <span class="keyword">final</span> HystrixCommandKey commandKey = HystrixCommandKey.Factory.asKey(commandName);</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>: <span class="keyword">final</span> HystrixObservableCommand.Setter setter = HystrixObservableCommand.Setter</div><div class="line"><span class="number">16</span>: .withGroupKey(groupKey)</div><div class="line"><span class="number">17</span>: .andCommandKey(commandKey);</div><div class="line"><span class="number">18</span>: </div><div class="line"><span class="number">19</span>: <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</div><div class="line"><span class="number">20</span>: RouteHystrixCommand command = <span class="keyword">new</span> RouteHystrixCommand(setter, exchange, chain);</div><div class="line"><span class="number">21</span>: </div><div class="line"><span class="number">22</span>: <span class="keyword">return</span> Mono.create(s -&gt; &#123;</div><div class="line"><span class="number">23</span>:     <span class="comment">// 使用 Hystrix Command Observable 订阅</span></div><div class="line"><span class="number">24</span>: Subscription sub = command.toObservable().subscribe(s::success, s::error, s::success);</div><div class="line"><span class="number">25</span>: <span class="comment">// Mono 取消时，取消 Hystrix Command Observable 的订阅，结束 Hystrix Command 的执行</span></div><div class="line"><span class="number">26</span>: s.onCancel(sub::unsubscribe);</div><div class="line"><span class="number">27</span>: &#125;).onErrorResume((Function&lt;Throwable, Mono&lt;Void&gt;&gt;) throwable -&gt; &#123;</div><div class="line"><span class="number">28</span>: <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> HystrixRuntimeException) &#123;</div><div class="line"><span class="number">29</span>: HystrixRuntimeException e = (HystrixRuntimeException) throwable;</div><div class="line"><span class="number">30</span>: <span class="keyword">if</span> (e.getFailureType() == TIMEOUT) &#123; <span class="comment">//<span class="doctag">TODO:</span> optionally set status</span></div><div class="line"><span class="number">31</span>: setResponseStatus(exchange, HttpStatus.GATEWAY_TIMEOUT);</div><div class="line"><span class="number">32</span>: <span class="keyword">return</span> exchange.getResponse().setComplete();</div><div class="line"><span class="number">33</span>: &#125;</div><div class="line"><span class="number">34</span>: &#125;</div><div class="line"><span class="number">35</span>: <span class="keyword">return</span> Mono.empty();</div><div class="line"><span class="number">36</span>: &#125;).then();</div><div class="line"><span class="number">37</span>: &#125;;</div><div class="line"><span class="number">38</span>: &#125;</div><div class="line"><span class="number">39</span>: &#125;</div></pre></td></tr></table></figure><ul><li><code>#argNames()</code> 方法，定义了 Tuple 参数的 Key 为 <code>name</code> 。</li><li><code>#apply()</code> 方法，创建 HystrixGatewayFilter 对象。</li><li>第 11 行 ：从 Tuple 参数获得 Hystrix Command 名字，例如上面举例的 RouteDefinition 时，<code>commandName = myCommandName</code> 。</li><li>第 12 行 ：创建 Hystrix Command 分组 Key 为 <code>HystrixGatewayFilterFactory</code> 。</li><li>第 13 行 ：创建 Hystrix Command Key 为 <code>commandName</code> 。</li><li>第 15 至 17 行 ：创建 HystrixObservableCommand.Setter 对象。</li><li>——— 第 19 至 37 行 ：<strong>创建 HystrixGatewayFilter 对象并返回</strong>。</li><li><p>第 20 行 ：创建 RouteHystrixCommand 对象。代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteHystrixCommand</span> <span class="keyword">extends</span> <span class="title">HystrixObservableCommand</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServerWebExchange exchange;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> GatewayFilterChain chain;</div><div class="line"></div><div class="line">RouteHystrixCommand(Setter setter, ServerWebExchange exchange, GatewayFilterChain chain) &#123;</div><div class="line"><span class="keyword">super</span>(setter);</div><div class="line"><span class="keyword">this</span>.exchange = exchange;</div><div class="line"><span class="keyword">this</span>.chain = chain;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Observable&lt;Void&gt; <span class="title">construct</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> RxReactiveStreams.toObservable(<span class="keyword">this</span>.chain.filter(<span class="keyword">this</span>.exchange));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>第 22 至 26 行 ：调用 <code>Mono#create(Consumer&lt;MonoSink&lt;T&gt;&gt;)</code> 方法，创建 Mono 对象。点击 <a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#create-java.util.function.Consumer-" rel="external nofollow noopener noreferrer" target="_blank">传送门</a> 查看该方法详细说明。因为 Hystrix 基于 RxJava ，而 GatewayFilter 基于 Reactor ( Mono 是其内部的一个类 )，通过这个方法，实现订阅的适配。<strong>未来，会实现 <a href="https://github.com/Netflix/Hystrix/issues/1089#issuecomment-180512000" rel="external nofollow noopener noreferrer" target="_blank">HystrixMonoCommand</a> 替换 HystrixObservableCommand ，从而统一订阅，去除适配代码</strong>。</p><ul><li>第 24 行 ：1）调用 <code>RouteHystrixCommand#toObservable()</code> 方法，内部会调用 <code>RouteHystrixCommand#construct()</code> 方法，获得执行 <code>this.chain.filter(this.exchange)</code> 的 Observable 。2）订阅 Observable ：成功或完成时，调用 <code>Mono#success(Object)</code> 方法，目前创建的 Mono 上没有相关的订阅；<strong>异常时</strong>，调用 <code>Mono#error(Object)</code> 方法，目前创建的 Mono 上调用 <code>Mongo#onErrorResume(Function&lt;Throwable, Mono&lt;Void&gt;&gt;))</code> 方法，进行订阅。</li><li>第 26 行 ：Mono 取消时，取消 Hystrix Command Observable 的订阅，结束 Hystrix Command 的执行。</li></ul></li><li>第 27 至 34 行 ：当 Hystrix Command <strong>执行超时</strong>时，设置响应 504 状态码，并回写客户端<strong>响应</strong>( <code>exchange.getResponse().setComplete()</code> ) 。</li><li>第 35 行 ：<strong>当 Hystrix Command 发生其他异常时，例如断路器打开，返回 <code>Mono.empty()</code> ，最终返回客户端 200 状态码，内容为空</strong>。</li><li>第 36 行 ：调用 <code>Mono#then()</code> 方法，<strong>参数为空</strong>，返回空 Mono ，不再向后发射数据。</li></ul><h1 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h1><ol><li>目前 Hystrix Command 执行超时时，返回客户端 504 状态码，如果使用 JSON 格式作为数据返回，则需要修改下该 HystrixGatewayFilter 的代码实现。</li><li><p>Hystrix 配置参数，目前只能<strong>全局</strong>配置，例如说 Hystrix 执行超时时间，配置如下 ：</p> <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">hystrix:</span></div><div class="line"><span class="attr">  command:</span></div><div class="line"><span class="attr">    default:</span></div><div class="line"><span class="attr">      execution:</span></div><div class="line"><span class="attr">        isolation:</span></div><div class="line"><span class="attr">          thread:</span></div><div class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">10000</span></div></pre></td></tr></table></figure><ul><li>如果想实现 Route / URL 级别的 Hystrix 配置参数，则需要修改下该 HystrixGatewayFilter 的代码实现。</li><li><a href="https://github.com/Netflix/Hystrix/wiki/Configuration#contents" rel="external nofollow noopener noreferrer" target="_blank">《Hystrix —— Configuration》</a> ，Hystrix 配置项，需要自取。</li></ul></li><li><p>当 Hystrix 熔断时，最终返回客户端 200 状态码，内容为空，此处建议该 HystrixGatewayFilter 的代码实现。</p></li></ol><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>嘿嘿嘿，写完熔断，准备限流过滤器走起。鸡冻！</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_04_05/01.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/&lt;
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.8) 之 WebClientHttpRoutingFilter</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing/</id>
    <published>2020-03-31T16:00:00.000Z</published>
    <updated>2017-12-01T14:03:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing/">http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing/">2. 环境配置</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing/">3. WebClientHttpRoutingFilter</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing/">4. WebClientWriteResponseFilter</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing/">5. 和 NettyRoutingFilter 对比</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>WebClientHttpRoutingFilter 的代码实现</strong>。</p><p>WebClientHttpRoutingFilter ，Http <strong>路由</strong>网关过滤器。其根据 <code>http://</code> 或 <code>https://</code> 前缀( Scheme )过滤处理，使用基于 <code>org.springframework.cloud.gateway.filter.WebClient</code> 实现的 HttpClient 请求后端 Http 服务。</p><p>WebClientWriteResponseFilter ，与 WebClientHttpRoutingFilter <strong>成对使用</strong>的网关过滤器。其将 WebClientWriteResponseFilter 请求后端 Http 服务的<strong>响应</strong>写回客户端。</p><p>大体流程如下 ：</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_04_01/01.png" alt=""></p><h1 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h1><p>目前 WebClientHttpRoutingFilter / WebClientWriteResponseFilter 处于<strong>实验</strong>阶段，建议等正式发布在使用。</p><p>OK，下面我们来看看怎么配置环境。</p><p>第一步，在 NettyConfiguration 注释掉 <code>#routingFilter(...)</code> 和 <code>#nettyWriteResponseFilter()</code> 两个 Bean 方法。</p><p>第二步，在 GatewayAutoConfiguration 打开 <code>#webClientHttpRoutingFilter()</code> 和 <code>#webClientWriteResponseFilter()</code> 两个 Bean 方法。</p><p>第三步，配置完成，启动 Spring Cloud Gateway 。</p><h1 id="3-WebClientHttpRoutingFilter"><a href="#3-WebClientHttpRoutingFilter" class="headerlink" title="3. WebClientHttpRoutingFilter"></a>3. WebClientHttpRoutingFilter</h1><p><code>org.springframework.cloud.gateway.filter.WebClientHttpRoutingFilter</code> ，Http <strong>路由</strong>网关过滤器。</p><p><strong>构造方法</strong>，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebClientHttpRoutingFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebClient webClient;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebClientHttpRoutingFilter</span><span class="params">(WebClient webClient)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.webClient = webClient;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>webClient</code> 属性，默认情况下，使用 <code>org.springframework.web.reactive.function.client.DefaultWebClient</code> 实现类。通过该属性，<strong>请求后端的 Http 服务</strong>。</li></ul><hr><p><code>#getOrder()</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>返回顺序为 <code>Integer.MAX_VALUE</code> 。在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.1) 之 GatewayFilter 一览》「3. GlobalFilter」</a> ，我们列举了所有 GlobalFilter 的顺序。</li></ul><hr><p><code>#filter(ServerWebExchange, GatewayFilterChain)</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: <span class="comment">// 获得 requestUrl</span></div><div class="line"> <span class="number">4</span>: URI requestUrl = exchange.getRequiredAttribute(GATEWAY_REQUEST_URL_ATTR);</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="comment">// 判断是否能够处理</span></div><div class="line"> <span class="number">7</span>: String scheme = requestUrl.getScheme();</div><div class="line"> <span class="number">8</span>: <span class="keyword">if</span> (isAlreadyRouted(exchange) || (!scheme.equals(<span class="string">"http"</span>) &amp;&amp; !scheme.equals(<span class="string">"https"</span>))) &#123;</div><div class="line"> <span class="number">9</span>: <span class="keyword">return</span> chain.filter(exchange);</div><div class="line"><span class="number">10</span>: &#125;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: <span class="comment">// 设置已经路由</span></div><div class="line"><span class="number">13</span>: setAlreadyRouted(exchange);</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>: ServerHttpRequest request = exchange.getRequest();</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: <span class="comment">//<span class="doctag">TODO:</span> support forms</span></div><div class="line"><span class="number">18</span>: <span class="comment">// Request Method</span></div><div class="line"><span class="number">19</span>: HttpMethod method = request.getMethod();</div><div class="line"><span class="number">20</span>: </div><div class="line"><span class="number">21</span>: <span class="comment">// Request</span></div><div class="line"><span class="number">22</span>: RequestBodySpec bodySpec = <span class="keyword">this</span>.webClient.method(method)</div><div class="line"><span class="number">23</span>: .uri(requestUrl)</div><div class="line"><span class="number">24</span>: .headers(httpHeaders -&gt; &#123;</div><div class="line"><span class="number">25</span>: httpHeaders.addAll(request.getHeaders());</div><div class="line"><span class="number">26</span>: httpHeaders.remove(HttpHeaders.HOST);</div><div class="line"><span class="number">27</span>: &#125;);</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>: <span class="comment">// Request Body</span></div><div class="line"><span class="number">30</span>: RequestHeadersSpec&lt;?&gt; headersSpec;</div><div class="line"><span class="number">31</span>: <span class="keyword">if</span> (requiresBody(method)) &#123;</div><div class="line"><span class="number">32</span>: headersSpec = bodySpec.body(BodyInserters.fromDataBuffers(request.getBody()));</div><div class="line"><span class="number">33</span>: &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">34</span>: headersSpec = bodySpec;</div><div class="line"><span class="number">35</span>: &#125;</div><div class="line"><span class="number">36</span>: </div><div class="line"><span class="number">37</span>: <span class="keyword">return</span> headersSpec.exchange()</div><div class="line"><span class="number">38</span>: <span class="comment">// .log("webClient route")</span></div><div class="line"><span class="number">39</span>: .flatMap(res -&gt; &#123;</div><div class="line"><span class="number">40</span>: ServerHttpResponse response = exchange.getResponse();</div><div class="line"><span class="number">41</span>: </div><div class="line"><span class="number">42</span>: <span class="comment">// Response Header</span></div><div class="line"><span class="number">43</span>: response.getHeaders().putAll(res.headers().asHttpHeaders());</div><div class="line"><span class="number">44</span>: </div><div class="line"><span class="number">45</span>: <span class="comment">// Response Status</span></div><div class="line"><span class="number">46</span>: response.setStatusCode(res.statusCode());</div><div class="line"><span class="number">47</span>: </div><div class="line"><span class="number">48</span>: <span class="comment">// 设置 Response 到 CLIENT_RESPONSE_ATTR</span></div><div class="line"><span class="number">49</span>: <span class="comment">// Defer committing the response until all route filters have run</span></div><div class="line"><span class="number">50</span>: <span class="comment">// Put client response as ServerWebExchange attribute and write response later NettyWriteResponseFilter</span></div><div class="line"><span class="number">51</span>: exchange.getAttributes().put(CLIENT_RESPONSE_ATTR, res);</div><div class="line"><span class="number">52</span>: <span class="keyword">return</span> chain.filter(exchange);</div><div class="line"><span class="number">53</span>: &#125;);</div><div class="line"><span class="number">54</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 4 行 ：获得 <code>requestUrl</code> 。</li><li><p>第 7 至 10 行 ：判断 ForwardRoutingFilter 是否能够处理该请求，需要满足两个条件 ：</p><ul><li><code>http://</code> 或者 <code>https://</code> 前缀( Scheme ) 。</li><li><p>调用 <code>ServerWebExchangeUtils#isAlreadyRouted(ServerWebExchange)</code> 方法，判断该请求暂未被其他 Routing 网关处理。代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAlreadyRouted</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> exchange.getAttributeOrDefault(GATEWAY_ALREADY_ROUTED_ATTR, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>x</li></ul></li></ul></li><li><p>第 13 行 ：设置该请求已经被处理。代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setAlreadyRouted</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line">    exchange.getAttributes().put(GATEWAY_ALREADY_ROUTED_ATTR, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>第 17 行 ：TODO 【3025】 目前暂不支持 forms 参数</p></li><li>第 22 至 35 行 ：<strong>创建</strong>向后端服务的请求。<ul><li>第 22 行 ：设置 Method 属性。</li><li>第 24 至 27 行 ：设置 Header 属性。</li><li>第 30 至 35 行 ：设置 Body 属性。</li></ul></li><li>第 37 行 ：<strong>发起</strong>向后端服务的请求。</li><li>第 40 至 53 行 ：<strong>处理</strong>返回自后端服务的相应。<ul><li>第 43 行 ：设置 <code>response</code> 的 Header 属性。</li><li>第 46 行 ：设置 <code>response</code> 的 Status 属性。</li><li>第 51 行 ：设置 <code>res</code> 到 <code>CLIENT_RESPONSE_ATTR</code> 。后续 WebClientWriteResponseFilter 将响应<strong>写回</strong>给客户端。</li><li>第 52 行 ：提交过滤器链继续过滤。</li></ul></li></ul><h1 id="4-WebClientWriteResponseFilter"><a href="#4-WebClientWriteResponseFilter" class="headerlink" title="4. WebClientWriteResponseFilter"></a>4. WebClientWriteResponseFilter</h1><p><code>org.springframework.cloud.gateway.filter.WebClientWriteResponseFilter</code> ，Http 回写<strong>响应</strong>网关过滤器。</p><p><code>#getOrder()</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WRITE_RESPONSE_FILTER_ORDER = -<span class="number">1</span>;</div><div class="line">    </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> WRITE_RESPONSE_FILTER_ORDER;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>返回顺序为 <code>-1</code> 。在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.1) 之 GatewayFilter 一览》「3. GlobalFilter」</a> ，我们列举了所有 GlobalFilter 的顺序。</li></ul><hr><p><code>#filter(ServerWebExchange, GatewayFilterChain)</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: <span class="comment">// NOTICE: nothing in "pre" filter stage as CLIENT_RESPONSE_ATTR is not added</span></div><div class="line"> <span class="number">4</span>: <span class="comment">// until the WebHandler is run</span></div><div class="line"> <span class="number">5</span>: <span class="keyword">return</span> chain.filter(exchange).then(Mono.defer(() -&gt; &#123;</div><div class="line"> <span class="number">6</span>:     <span class="comment">// 获得 Response</span></div><div class="line"> <span class="number">7</span>: ClientResponse clientResponse = exchange.getAttribute(CLIENT_RESPONSE_ATTR);</div><div class="line"> <span class="number">8</span>: <span class="keyword">if</span> (clientResponse == <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">9</span>: <span class="keyword">return</span> Mono.empty();</div><div class="line"><span class="number">10</span>: &#125;</div><div class="line"><span class="number">11</span>: log.trace(<span class="string">"WebClientWriteResponseFilter start"</span>);</div><div class="line"><span class="number">12</span>: ServerHttpResponse response = exchange.getResponse();</div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>: <span class="keyword">return</span> response.writeWith(clientResponse.body(BodyExtractors.toDataBuffers())).log(<span class="string">"webClient response"</span>);</div><div class="line"><span class="number">15</span>: &#125;));</div><div class="line"><span class="number">16</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 5 行 ：调用 <code>#then(Mono)</code> 方法，实现 <strong>After Filter</strong> 逻辑。</li><li>第 7 至 11 行 ：从 <code>CLIENT_RESPONSE_ATTR</code> 中，获得 ClientResponse 。</li><li>第 14 行 ：将 ClientResponse 写回给客户端。</li></ul><h1 id="5-和-NettyRoutingFilter-对比"><a href="#5-和-NettyRoutingFilter-对比" class="headerlink" title="5. 和 NettyRoutingFilter 对比"></a>5. 和 NettyRoutingFilter 对比</h1><p>在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-netty-routing/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.7) 之 NettyRoutingFilter》</a> 中，我们知道 NettyRoutingFilter / NettyWriteResponseFilter 和 WebClientHttpRoutingFilter / WebClientHttpRoutingFilter 实现<strong>一样</strong>的功能。</p><p>那么为什么要再实现一次呢？</p><p>TODO 【3001】</p><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>呼呼，主要的过滤器已经写完，后面熔断、限流过滤器的实现。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_04_01/02.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.7) 之 NettyRoutingFilter</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-netty-routing/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/filter-netty-routing/</id>
    <published>2020-03-27T16:00:00.000Z</published>
    <updated>2017-12-01T14:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-netty-routing/">http://www.iocoder.cn/Spring-Cloud-Gateway/filter-netty-routing/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-netty-routing/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-netty-routing/">2. NettyRoutingFilter</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-netty-routing/">3. NettyWriteResponseFilter</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-netty-routing/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>NettyRoutingFilter 的代码实现</strong>。</p><p>NettyRoutingFilter ，Netty <strong>路由</strong>网关过滤器。其根据 <code>http://</code> 或 <code>https://</code> 前缀( Scheme )过滤处理，使用基于 Netty 实现的 HttpClient 请求后端 Http 服务。</p><p>NettyWriteResponseFilter ，与 NettyRoutingFilter <strong>成对使用</strong>的网关过滤器。其将 NettyRoutingFilter 请求后端 Http 服务的<strong>响应</strong>写回客户端。</p><p>大体流程如下 ：</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_28/01.png" alt=""></p><p>另外，Spring Cloud Gateway 实现了 WebClientHttpRoutingFilter / WebClientWriteResponseFilter ，功能上和 NettyRoutingFilter / NettyWriteResponseFilter <strong>相同</strong>，差别在于基于 <code>org.springframework.cloud.gateway.filter.WebClient</code> 实现的 HttpClient 请求后端 Http 服务。在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.8) 之 WebClientHttpRoutingFilter》</a> ，我们会详细解析。</p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-NettyRoutingFilter"><a href="#2-NettyRoutingFilter" class="headerlink" title="2. NettyRoutingFilter"></a>2. NettyRoutingFilter</h1><p><code>org.springframework.cloud.gateway.filter.NettyRoutingFilter</code> ，Netty <strong>路由</strong>网关过滤器。</p><p><strong>构造方法</strong>，代码如下 ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">public class NettyRoutingFilter implements GlobalFilter, Ordered &#123;</div><div class="line"></div><div class="line">private final HttpClient httpClient;</div><div class="line"></div><div class="line">public NettyRoutingFilter(HttpClient httpClient) &#123;</div><div class="line">this.httpClient = httpClient;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>httpClient</code> 属性，基于 <strong>Netty</strong> 实现的 HttpClient 。通过该属性，<strong>请求后端的 Http 服务</strong>。</li></ul><hr><p><code>#getOrder()</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>返回顺序为 <code>Integer.MAX_VALUE</code> 。在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.1) 之 GatewayFilter 一览》「3. GlobalFilter」</a> ，我们列举了所有 GlobalFilter 的顺序。</li></ul><hr><p><code>#filter(ServerWebExchange, GatewayFilterChain)</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: <span class="comment">// 获得 requestUrl</span></div><div class="line"> <span class="number">4</span>: URI requestUrl = exchange.getRequiredAttribute(GATEWAY_REQUEST_URL_ATTR);</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="comment">// 判断是否能够处理</span></div><div class="line"> <span class="number">7</span>: String scheme = requestUrl.getScheme();</div><div class="line"> <span class="number">8</span>: <span class="keyword">if</span> (isAlreadyRouted(exchange) || (!scheme.equals(<span class="string">"http"</span>) &amp;&amp; !scheme.equals(<span class="string">"https"</span>))) &#123;</div><div class="line"> <span class="number">9</span>: <span class="keyword">return</span> chain.filter(exchange);</div><div class="line"><span class="number">10</span>: &#125;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: <span class="comment">// 设置已经路由</span></div><div class="line"><span class="number">13</span>: setAlreadyRouted(exchange);</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>: ServerHttpRequest request = exchange.getRequest();</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: <span class="comment">// Request Method</span></div><div class="line"><span class="number">18</span>: <span class="keyword">final</span> HttpMethod method = HttpMethod.valueOf(request.getMethod().toString());</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>: <span class="comment">// 获得 url</span></div><div class="line"><span class="number">21</span>: <span class="keyword">final</span> String url = requestUrl.toString();</div><div class="line"><span class="number">22</span>: </div><div class="line"><span class="number">23</span>: <span class="comment">// Request Header</span></div><div class="line"><span class="number">24</span>: <span class="keyword">final</span> DefaultHttpHeaders httpHeaders = <span class="keyword">new</span> DefaultHttpHeaders();</div><div class="line"><span class="number">25</span>: request.getHeaders().forEach(httpHeaders::set);</div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>: <span class="comment">// 请求</span></div><div class="line"><span class="number">28</span>: <span class="keyword">return</span> <span class="keyword">this</span>.httpClient.request(method, url, req -&gt; &#123;</div><div class="line"><span class="number">29</span>: <span class="keyword">final</span> HttpClientRequest proxyRequest = req.options(NettyPipeline.SendOptions::flushOnEach)</div><div class="line"><span class="number">30</span>: .failOnClientError(<span class="keyword">false</span>) <span class="comment">// // 是否请求失败，抛出异常</span></div><div class="line"><span class="number">31</span>: .headers(httpHeaders);</div><div class="line"><span class="number">32</span>: </div><div class="line"><span class="number">33</span>: <span class="comment">// Request Form</span></div><div class="line"><span class="number">34</span>: <span class="keyword">if</span> (MediaType.APPLICATION_FORM_URLENCODED.includes(request.getHeaders().getContentType())) &#123;</div><div class="line"><span class="number">35</span>: <span class="keyword">return</span> exchange.getFormData()</div><div class="line"><span class="number">36</span>: .flatMap(map -&gt; proxyRequest.sendForm(form -&gt; &#123;</div><div class="line"><span class="number">37</span>: <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;String&gt;&gt; entry: map.entrySet()) &#123;</div><div class="line"><span class="number">38</span>: <span class="keyword">for</span> (String value : entry.getValue()) &#123;</div><div class="line"><span class="number">39</span>: form.attr(entry.getKey(), value);</div><div class="line"><span class="number">40</span>: &#125;</div><div class="line"><span class="number">41</span>: &#125;</div><div class="line"><span class="number">42</span>: &#125;).then())</div><div class="line"><span class="number">43</span>: .then(chain.filter(exchange));</div><div class="line"><span class="number">44</span>: &#125;</div><div class="line"><span class="number">45</span>: </div><div class="line"><span class="number">46</span>: <span class="comment">// Request Body</span></div><div class="line"><span class="number">47</span>: <span class="keyword">return</span> proxyRequest.sendHeaders() <span class="comment">//I shouldn't need this</span></div><div class="line"><span class="number">48</span>: .send(request.getBody()</div><div class="line"><span class="number">49</span>: .map(DataBuffer::asByteBuffer) <span class="comment">// Flux&lt;DataBuffer&gt; =&gt; ByteBuffer</span></div><div class="line"><span class="number">50</span>: .map(Unpooled::wrappedBuffer)); <span class="comment">// ByteBuffer =&gt; Flux&lt;DataBuffer&gt;</span></div><div class="line"><span class="number">51</span>: &#125;).doOnNext(res -&gt; &#123;</div><div class="line"><span class="number">52</span>: ServerHttpResponse response = exchange.getResponse();</div><div class="line"><span class="number">53</span>: <span class="comment">// Response Header</span></div><div class="line"><span class="number">54</span>: <span class="comment">// put headers and status so filters can modify the response</span></div><div class="line"><span class="number">55</span>: HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</div><div class="line"><span class="number">56</span>: res.responseHeaders().forEach(entry -&gt; headers.add(entry.getKey(), entry.getValue()));</div><div class="line"><span class="number">57</span>: response.getHeaders().putAll(headers);</div><div class="line"><span class="number">58</span>: </div><div class="line"><span class="number">59</span>: <span class="comment">// Response Status</span></div><div class="line"><span class="number">60</span>: response.setStatusCode(HttpStatus.valueOf(res.status().code()));</div><div class="line"><span class="number">61</span>: </div><div class="line"><span class="number">62</span>: <span class="comment">// 设置 Response 到 CLIENT_RESPONSE_ATTR</span></div><div class="line"><span class="number">63</span>: <span class="comment">// Defer committing the response until all route filters have run</span></div><div class="line"><span class="number">64</span>: <span class="comment">// Put client response as ServerWebExchange attribute and write response later NettyWriteResponseFilter</span></div><div class="line"><span class="number">65</span>: exchange.getAttributes().put(CLIENT_RESPONSE_ATTR, res);</div><div class="line"><span class="number">66</span>: &#125;).then(chain.filter(exchange));</div><div class="line"><span class="number">67</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 4 行 ：获得 <code>requestUrl</code> 。</li><li><p>第 7 至 10 行 ：判断 ForwardRoutingFilter 是否能够处理该请求，需要满足两个条件 ：</p><ul><li><code>http://</code> 或者 <code>https://</code> 前缀( Scheme ) 。</li><li><p>调用 <code>ServerWebExchangeUtils#isAlreadyRouted(ServerWebExchange)</code> 方法，判断该请求暂未被其他 Routing 网关处理。代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAlreadyRouted</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> exchange.getAttributeOrDefault(GATEWAY_ALREADY_ROUTED_ATTR, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>x</li></ul></li></ul></li><li><p>第 13 行 ：设置该请求已经被处理。代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setAlreadyRouted</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line">    exchange.getAttributes().put(GATEWAY_ALREADY_ROUTED_ATTR, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>第 18 行 ：创建 <strong>Netty Request Method</strong> 对象。<code>request#getMethod()</code> 返回的不是 <code>io.netty.handler.codec.http.HttpMethod</code> ，所以需要进行转换。</p></li><li>第 21 行 ：获得 <code>url</code> 。</li><li>第 24 至 25 行 ：创建  <strong>Netty Request Header</strong> 对象( <code>io.netty.handler.codec.http.DefaultHttpHeaders</code> )，将请求的 Header 设置给它。</li><li>——— 第 28 至 50 行 ：调用 <code>HttpClient#request(HttpMethod, String, Function)</code> 方法，请求后端 Http 服务。</li><li><p>第 29 至 31 行 ：创建 <strong>Netty Request</strong> 对象( <code>reactor.ipc.netty.http.client.HttpClientRequest</code> )。</p><ul><li>第 29 行 ：TODO 【3024】 NettyPipeline.SendOptions::flushOnEach</li><li><p>第 30 行 ：设置请求失败( 后端服务返回响应状体码 <code>&gt;= 400</code> )时，不抛出异常。相关代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// HttpClientOperations#checkResponseCode(HttpResponse response)</span></div><div class="line"><span class="comment">// ... 省略无关代码</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (code &gt;= <span class="number">400</span>) &#123;</div><div class="line"><span class="keyword">if</span> (clientError) &#123;</div><div class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">log.debug(<span class="string">"&#123;&#125; Received Request Error, stop reading: &#123;&#125;"</span>,</div><div class="line">channel(),</div><div class="line">response.toString());</div><div class="line">&#125;</div><div class="line">Exception ex = <span class="keyword">new</span> HttpClientException(uri(), response);</div><div class="line">parentContext().fireContextError(ex);</div><div class="line">receive().subscribe();</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>通过设置 <code>clientError = false</code> ，第 51 行可以调用 <code>Mono#doNext(Consumer)</code> 方法，<strong>统一订阅处理</strong>返回的 <code>reactor.ipc.netty.http.client.HttpClientResponse</code> 对象。</li></ul></li><li><p>第 31 行 ：设置 <strong>Netty Request</strong> 对象的 Header 。</p></li></ul></li><li><p>第 34 至 44 行 ：【TODO 3025】目前是一个 BUG ，在 2.0.x 版本修复。见 <a href="FormIntegrationTests">FormIntegrationTests#formUrlencodedWorks()</a> 单元测试的注释说明。</p></li><li><p>第 47 至 50 行 ：请求后端的 Http 服务。</p><ul><li>第 47 行 ：发送请求 Header 。</li><li>第 48 至 50 行 ：发送请求 Body 。其中中间的 <code>#map(...)</code> 的过程为 <code>Flux&lt;DataBuffer&gt; =&gt; ByteBuffer =&gt; Flux&lt;DataBuffer&gt;</code> 。</li></ul></li><li><p>——— 第 51 至 65 行 ：请求后端 Http 服务<strong>完成</strong>，将 <strong>Netty Response</strong> 赋值给响应 <code>response</code> 。</p></li><li>第 53 至 57 行 ：创建 <code>org.springframework.http.HttpHeaders</code> 对象，将 <strong>Netty Response Header</strong> 设置给它，而后设置回给响应 <code>response</code> 。</li><li>第 60 行 ：设置响应 <code>response</code> 的状态码。</li><li>第 65 行 ：设置 <strong>Netty Response</strong> 到 <code>CLIENT_RESPONSE_ATTR</code> 。后续 NettyWriteResponseFilter 将 <strong>Netty Response</strong> 写回给客户端。</li><li>——— 第 66 行 ：提交过滤器链继续过滤。</li></ul><h1 id="3-NettyWriteResponseFilter"><a href="#3-NettyWriteResponseFilter" class="headerlink" title="3. NettyWriteResponseFilter"></a>3. NettyWriteResponseFilter</h1><p><code>org.springframework.cloud.gateway.filter.NettyWriteResponseFilter</code> ，Netty 回写<strong>响应</strong>网关过滤器。</p><p><code>#getOrder()</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WRITE_RESPONSE_FILTER_ORDER = -<span class="number">1</span>;</div><div class="line">    </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> WRITE_RESPONSE_FILTER_ORDER;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>返回顺序为 <code>-1</code> 。在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.1) 之 GatewayFilter 一览》「3. GlobalFilter」</a> ，我们列举了所有 GlobalFilter 的顺序。</li></ul><hr><p><code>#filter(ServerWebExchange, GatewayFilterChain)</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: <span class="comment">// NOTICE: nothing in "pre" filter stage as CLIENT_RESPONSE_ATTR is not added</span></div><div class="line"> <span class="number">4</span>: <span class="comment">// until the WebHandler is run</span></div><div class="line"> <span class="number">5</span>: <span class="keyword">return</span> chain.filter(exchange).then(Mono.defer(() -&gt; &#123;</div><div class="line"> <span class="number">6</span>:     <span class="comment">// 获得 Response</span></div><div class="line"> <span class="number">7</span>: HttpClientResponse clientResponse = exchange.getAttribute(CLIENT_RESPONSE_ATTR);</div><div class="line"> <span class="number">8</span>: <span class="comment">// HttpClientResponse clientResponse = getAttribute(exchange, CLIENT_RESPONSE_ATTR, HttpClientResponse.class);</span></div><div class="line"> <span class="number">9</span>: <span class="keyword">if</span> (clientResponse == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">10</span>: <span class="keyword">return</span> Mono.empty();</div><div class="line"><span class="number">11</span>: &#125;</div><div class="line"><span class="number">12</span>: log.trace(<span class="string">"NettyWriteResponseFilter start"</span>);</div><div class="line"><span class="number">13</span>: ServerHttpResponse response = exchange.getResponse();</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>: <span class="comment">// 将 Netty Response 写回给客户端。</span></div><div class="line"><span class="number">16</span>: NettyDataBufferFactory factory = (NettyDataBufferFactory) response.bufferFactory();</div><div class="line"><span class="number">17</span>: <span class="comment">//<span class="doctag">TODO:</span> what if it's not netty</span></div><div class="line"><span class="number">18</span>: <span class="keyword">final</span> Flux&lt;NettyDataBuffer&gt; body = clientResponse.receive()</div><div class="line"><span class="number">19</span>: .retain() <span class="comment">// ByteBufFlux =&gt; ByteBufFlux</span></div><div class="line"><span class="number">20</span>: .map(factory::wrap); <span class="comment">// ByteBufFlux  =&gt; Flux&lt;NettyDataBuffer&gt;</span></div><div class="line"><span class="number">21</span>: <span class="keyword">return</span> response.writeWith(body);</div><div class="line"><span class="number">22</span>: &#125;));</div><div class="line"><span class="number">23</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 5 行 ：调用 <code>#then(Mono)</code> 方法，实现 <strong>After Filter</strong> 逻辑。</li><li>第 7 至 11 行 ：从 <code>CLIENT_RESPONSE_ATTR</code> 中，获得 <strong>Netty Response</strong> 。</li><li>第 15 至 21 行 ：将 <strong>Netty Response</strong> 写回给客户端。因为 <code>org.springframework.http.server.reactive#writeWith(Publisher&lt;? extends DataBuffer&gt;)</code> 需要的参数类型是 <code>Publisher&lt;? extends DataBuffer&gt;</code> ，所以【第 18 至 20 行】的转换过程是 <code>ByteBufFlux =&gt; Flux&lt;NettyDataBuffer&gt;</code> 。<ul><li>第 19 行 ：TODO 【3024】ByteBufFlux#retain() </li></ul></li></ul><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>下一篇 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.8) 之 WebClientHttpRoutingFilter》</a> 走起！</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_28/02.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-netty-routing/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-net
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.6) 之 WebSocketRoutingFilter</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-websocket-routing/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/filter-websocket-routing/</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-websocket-routing/">http://www.iocoder.cn/Spring-Cloud-Gateway/filter-websocket-routing/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-websocket-routing/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-websocket-routing/">2. 环境搭建</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-websocket-routing/">3. WebsocketRoutingFilter</a><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-websocket-routing/">3.1 ProxyWebSocketHandler</a></li></ul></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-websocket-routing/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>WebsocketRoutingFilter 的代码实现</strong>。</p><p>WebsocketRoutingFilter ，Websocket <strong>路由</strong>网关过滤器。其根据 <code>ws://</code> / <code>wss://</code> 前缀( Scheme )过滤处理，<strong>代理后端 Websocket 服务</strong>，提供给客户端连接。如下图 ：</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_25/01.png" alt=""></p><ul><li>目前<strong>一个</strong> RouteDefinition 只能指定<strong>一个</strong>后端 WebSocket 服务。官方正在计划在 LoadBalancerClientFilter 上实现 Websocket 的负载均衡功能。也就说，未来<strong>一个</strong> RouteDefinition 能够指定<strong>多个</strong>后端 WebSocket 服务。</li></ul><p>Websocket 的 RouteDefinition 配置如下 ：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">websocket_test</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">ws://localhost:9000</span></div><div class="line"><span class="attr">        order:</span> <span class="number">8000</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Path=/echo</span></div></pre></td></tr></table></figure><ul><li><code>uri</code> 使用 <code>ws://</code> 或者 <code>wss://</code> 为前缀。</li></ul><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h1><p>在解析源码之前，我们先以 <a href="https://github.com/websockets/wscat" rel="external nofollow noopener noreferrer" target="_blank">wscat</a>  搭建一个 WebSocket 服务。</p><p>第一步，安装 wscat 。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g wscat</div></pre></td></tr></table></figure><p>第二步，启动 wscat 。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">wscat --listen 9000</div></pre></td></tr></table></figure><p>第三步，连接 wscat 。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">wscat --listen 9000</div></pre></td></tr></table></figure><p>第四步，配置 RouteDefinition ，并启动 Spring Cloud Gateway 。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cloud:</div><div class="line">    gateway:</div><div class="line">      routes:</div><div class="line">      - id: websocket_test</div><div class="line">        uri: ws://localhost:9000</div><div class="line">        order: 8000</div><div class="line">        predicates:</div><div class="line">        - Path=/echo</div></pre></td></tr></table></figure><p>第五步，通过 Gateway 连接 wscat 。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">wscat --connect ws://localhost:8080/echo</div></pre></td></tr></table></figure><p>大功告成。</p><p>注意，wscat 同一时间仅允许一个客户端连接。</p><h1 id="3-WebsocketRoutingFilter"><a href="#3-WebsocketRoutingFilter" class="headerlink" title="3. WebsocketRoutingFilter"></a>3. WebsocketRoutingFilter</h1><p><code>org.springframework.cloud.gateway.filter.WebsocketRoutingFilter</code> ，Websocket <strong>路由</strong>网关过滤器。</p><p><strong>构造方法</strong>，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsocketRoutingFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEC_WEBSOCKET_PROTOCOL = <span class="string">"Sec-WebSocket-Protocol"</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebSocketClient webSocketClient;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebSocketService webSocketService;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebsocketRoutingFilter</span><span class="params">(WebSocketClient webSocketClient)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>(webSocketClient, <span class="keyword">new</span> HandshakeWebSocketService());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebsocketRoutingFilter</span><span class="params">(WebSocketClient webSocketClient,</span></span></div><div class="line"><span class="function"><span class="params">WebSocketService webSocketService)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.webSocketClient = webSocketClient;</div><div class="line"><span class="keyword">this</span>.webSocketService = webSocketService;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>webSocketClient</code> 属性，在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/init/?self">《Spring-Cloud-Gateway 源码解析 —— 网关初始化》「5.2 初始化 NettyConfiguration」</a> 一文中，我们可以看到使用的是 <code>org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient</code> 实现类。通过该属性，<strong>连接后端【被代理】的 WebSocket 服务</strong>。</li><li><code>webSocketService</code> 属性，在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/init/?self">《Spring-Cloud-Gateway 源码解析 —— 网关初始化》「5.3 初始化 GlobalFilter」</a> 一文中，我们可以看到使用的是 <code>org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService</code> 实现类。通过该属性，处理客户端发起的连接请求( Handshake Request ) 。</li></ul><hr><p><code>#getOrder()</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>返回顺序为 <code>Integer.MAX_VALUE</code> 。在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.1) 之 GatewayFilter 一览》「3. GlobalFilter」</a> ，我们列举了所有 GlobalFilter 的顺序。</li></ul><hr><p><code>#filter(ServerWebExchange, GatewayFilterChain)</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: <span class="comment">// 获得 requestUrl</span></div><div class="line"> <span class="number">4</span>: URI requestUrl = exchange.getRequiredAttribute(GATEWAY_REQUEST_URL_ATTR);</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="comment">// 判断是否能够处理</span></div><div class="line"> <span class="number">7</span>: String scheme = requestUrl.getScheme();</div><div class="line"> <span class="number">8</span>: <span class="keyword">if</span> (isAlreadyRouted(exchange) || (!scheme.equals(<span class="string">"ws"</span>) &amp;&amp; !scheme.equals(<span class="string">"wss"</span>))) &#123;</div><div class="line"> <span class="number">9</span>: <span class="keyword">return</span> chain.filter(exchange);</div><div class="line"><span class="number">10</span>: &#125;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: <span class="comment">// 设置已经路由</span></div><div class="line"><span class="number">13</span>: setAlreadyRouted(exchange);</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>: <span class="comment">// 处理连接请求</span></div><div class="line"><span class="number">16</span>: <span class="keyword">return</span> <span class="keyword">this</span>.webSocketService.handleRequest(exchange,</div><div class="line"><span class="number">17</span>: <span class="keyword">new</span> ProxyWebSocketHandler(requestUrl, <span class="keyword">this</span>.webSocketClient, exchange.getRequest().getHeaders()));</div><div class="line"><span class="number">18</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 4 行 ：获得 <code>requestUrl</code> 。</li><li><p>第 7 至 10 行 ：判断 ForwardRoutingFilter 是否能够处理该请求，需要满足两个条件 ：</p><ul><li><code>ws://</code> 或者 <code>wss://</code> 前缀( Scheme ) 。</li><li><p>调用 <code>ServerWebExchangeUtils#isAlreadyRouted(ServerWebExchange)</code> 方法，判断该请求暂未被其他 Routing 网关处理。代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAlreadyRouted</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> exchange.getAttributeOrDefault(GATEWAY_ALREADY_ROUTED_ATTR, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>x</li></ul></li></ul></li><li><p>第 13 行 ：设置该请求已经被处理。代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setAlreadyRouted</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line">    exchange.getAttributes().put(GATEWAY_ALREADY_ROUTED_ATTR, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>第 15 至 16 行 ：调用 <code>WebSocketService#hanldeRequest(ServerWebExchange, WebSocketHandler)</code> 方法，处理客户端发起的连接请求( Handshake Request ) 。这个方法的实现不在本文范围内，但是良心如笔者，大概讲下涉及到的类 ：</p><ul><li>主要逻辑在 <a href="https://github.com/spring-projects/spring-framework/blob/master/spring-webflux/src/main/java/org/springframework/web/reactive/socket/server/upgrade/ReactorNettyRequestUpgradeStrategy.java#L50" rel="external nofollow noopener noreferrer" target="_blank"><code>org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy</code></a> 类里。</li><li>【第一步】 ReactorNettyRequestUpgradeStrategy 调用 <a href="https://github.com/reactor/reactor-netty/blob/master/src/main/java/reactor/ipc/netty/http/server/HttpServerWSOperations.java" rel="external nofollow noopener noreferrer" target="_blank"><code>reactor.ipc.netty.http.server.HttpServerWSOperations</code></a> ，处理客户端发起的连接请求。处理成功，告知客户端连接成功。</li><li>【第二步】ReactorNettyRequestUpgradeStrategy 调用 <a href="https://github.com/spring-projects/spring-framework/blob/8f69b5ff23d6835eee89a26c0e1e3e63a64a21a0/spring-webflux/src/main/java/org/springframework/web/reactive/socket/WebSocketHandler.java" rel="external nofollow noopener noreferrer" target="_blank"><code>org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy</code></a> <strong>接口</strong>的 <code>#handle(WebSocketSession)</code> 方法，处理客户端 WebSocket Session 。ProxyWebSocketHandler 是 WebSocketHandler 的<strong>实现类</strong>，在 <a href="#">「3.1 ProxyWebSocketHandler」</a> 来详细解析 <code>#handle(WebSocketSession)</code> 实现了什么逻辑。</li></ul></li></ul><h2 id="3-1-ProxyWebSocketHandler"><a href="#3-1-ProxyWebSocketHandler" class="headerlink" title="3.1 ProxyWebSocketHandler"></a>3.1 ProxyWebSocketHandler</h2><p><code>org.springframework.cloud.gateway.filter.WebsocketRoutingFilter.ProxyWebSocketHandler</code> ，<strong>代理</strong>后端 WebSocket 服务处理器。</p><p><strong>构造方法</strong>，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyWebSocketHandler</span> <span class="keyword">implements</span> <span class="title">WebSocketHandler</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">private</span> <span class="keyword">final</span> WebSocketClient client;</div><div class="line"> <span class="number">4</span>: <span class="keyword">private</span> <span class="keyword">final</span> URI url;</div><div class="line"> <span class="number">5</span>: <span class="keyword">private</span> <span class="keyword">final</span> HttpHeaders headers;</div><div class="line"> <span class="number">6</span>: <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; subProtocols;</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>: <span class="function"><span class="keyword">public</span> <span class="title">ProxyWebSocketHandler</span><span class="params">(URI url, WebSocketClient client, HttpHeaders headers)</span> </span>&#123;</div><div class="line"> <span class="number">9</span>: <span class="keyword">this</span>.client = client;</div><div class="line"><span class="number">10</span>: <span class="keyword">this</span>.url = url;</div><div class="line"><span class="number">11</span>: <span class="keyword">this</span>.headers = <span class="keyword">new</span> HttpHeaders();<span class="comment">//headers;</span></div><div class="line"><span class="number">12</span>: <span class="comment">//<span class="doctag">TODO:</span> better strategy to filter these headers?</span></div><div class="line"><span class="number">13</span>: headers.entrySet().forEach(header -&gt; &#123;</div><div class="line"><span class="number">14</span>: <span class="keyword">if</span> (!header.getKey().toLowerCase().startsWith(<span class="string">"sec-websocket"</span>)</div><div class="line"><span class="number">15</span>: &amp;&amp; !header.getKey().equalsIgnoreCase(<span class="string">"upgrade"</span>)</div><div class="line"><span class="number">16</span>: &amp;&amp; !header.getKey().equalsIgnoreCase(<span class="string">"connection"</span>)) &#123;</div><div class="line"><span class="number">17</span>: <span class="keyword">this</span>.headers.addAll(header.getKey(), header.getValue());</div><div class="line"><span class="number">18</span>: &#125;</div><div class="line"><span class="number">19</span>: &#125;);</div><div class="line"><span class="number">20</span>: List&lt;String&gt; protocols = headers.get(SEC_WEBSOCKET_PROTOCOL);</div><div class="line"><span class="number">21</span>: <span class="keyword">if</span> (protocols != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">22</span>: <span class="keyword">this</span>.subProtocols = protocols;</div><div class="line"><span class="number">23</span>: &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">24</span>: <span class="keyword">this</span>.subProtocols = Collections.emptyList();</div><div class="line"><span class="number">25</span>: &#125;</div><div class="line"><span class="number">26</span>: &#125;</div><div class="line"><span class="number">27</span>: &#125;</div></pre></td></tr></table></figure><ul><li><code>client</code> 属性，在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/init/?self">《Spring-Cloud-Gateway 源码解析 —— 网关初始化》「5.2 初始化 NettyConfiguration」</a> 一文中，我们可以看到使用的是 <code>org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient</code> 实现类。通过该属性，<strong>连接后端【被代理】的 WebSocket 服务</strong>。</li><li><code>url</code> 属性，后端【被代理】的 WebSocket 服务的地址。</li><li><code>header</code> 属性，请求头，在 <a href="http://blog.csdn.net/baiye_xing/article/details/73938360" rel="external nofollow noopener noreferrer" target="_blank">《 【计网】HTTP与WebSocket的区别》</a> 有详细解析，包括为什么【第 14 至 18 行】的代码这样处理。</li><li><code>subProtocols</code> 属性，最终通信使用的协议。</li></ul><hr><p><code>#handle(WebSocketSession)</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(WebSocketSession session)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: <span class="comment">// pass headers along so custom headers can be sent through</span></div><div class="line"> <span class="number">4</span>: <span class="keyword">return</span> client.execute(url, <span class="keyword">this</span>.headers, <span class="keyword">new</span> WebSocketHandler() &#123;</div><div class="line"> <span class="number">5</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">6</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(WebSocketSession proxySession)</span> </span>&#123;</div><div class="line"> <span class="number">7</span>: <span class="comment">// Use retain() for Reactor Netty</span></div><div class="line"> <span class="number">8</span>: <span class="comment">// 转发消息 客户端 =》后端服务</span></div><div class="line"> <span class="number">9</span>: Mono&lt;Void&gt; proxySessionSend = proxySession</div><div class="line"><span class="number">10</span>: .send(session.receive().doOnNext(WebSocketMessage::retain));</div><div class="line"><span class="number">11</span>: <span class="comment">// 转发消息 后端服务=》客户端</span></div><div class="line"><span class="number">12</span>: <span class="comment">// .log("proxySessionSend", Level.FINE);</span></div><div class="line"><span class="number">13</span>: Mono&lt;Void&gt; serverSessionSend = session</div><div class="line"><span class="number">14</span>: .send(proxySession.receive().doOnNext(WebSocketMessage::retain));</div><div class="line"><span class="number">15</span>: <span class="comment">// .log("sessionSend", Level.FINE);</span></div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: <span class="comment">// </span></div><div class="line"><span class="number">18</span>: <span class="keyword">return</span> Mono.when(proxySessionSend, serverSessionSend).then();</div><div class="line"><span class="number">19</span>: &#125;</div><div class="line"><span class="number">20</span>: </div><div class="line"><span class="number">21</span>: <span class="comment">/**</span></div><div class="line"><span class="comment">22:  * Copy subProtocols so they are available downstream.</span></div><div class="line"><span class="comment">23:  * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">24:  */</span></div><div class="line"><span class="number">25</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">26</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getSubProtocols</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">27</span>: <span class="keyword">return</span> ProxyWebSocketHandler.<span class="keyword">this</span>.subProtocols;</div><div class="line"><span class="number">28</span>: &#125;</div><div class="line"><span class="number">29</span>: &#125;);</div><div class="line"><span class="number">30</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 6 行 ：调用 <code>WebSocketClient#execute(URI, HttpHeaders, WebSocketHandler)</code> 方法，<strong>连接后端【被代理】的 WebSocket 服务</strong>。连接成功后，回调 WebSocketHandler 实现的内部类的 <code>#handle(WebSocketSession)</code> 方法。</li><li>WebSocketHandler 实现的内部类 <ul><li>第 9 至 10 行 ：转发消息，客户端 <code>=&gt;</code> 后端服务。</li><li>第 13 至 14 行 ：转发消息，后端服务 <code>=&gt;</code> 客户端。</li><li>第 18 行 ：调用 <code>Mono#when()</code> 方法，合并 <code>proxySessionSend</code> / <code>serverSessionSend</code> 两个 Mono 。调用 <code>Mono#then()</code> 方法，<strong>参数为空</strong>，合并的 Mono 不发射数据出来。RxJava 和 Reactor 类似，可以参考 <a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/And.html" rel="external nofollow noopener noreferrer" target="_blank">《ReactiveX文档中文翻译 —— And/Then/When》</a> 学习下 <code>when / and / then</code> 操作符。</li><li>下图可以帮助理解下这个类的用途 ：<img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_25/01.png" alt=""></li></ul></li></ul><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>😈 限于对 Reactor 和 Netty 了解不够深入，写的不够透彻。回头深入理解下它们。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_25/03.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-websocket-routing/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/filter
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.5) 之 ForwardRoutingFilter</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-forward-routing/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/filter-forward-routing/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-forward-routing/">http://www.iocoder.cn/Spring-Cloud-Gateway/filter-forward-routing/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-forward-routing/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-forward-routing/">2. RouteToRequestUrlFilter</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-forward-routing/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>ForwardRoutingFilter 的代码实现</strong>。</p><p>RouteToRequestUrlFilter ，转发<strong>路由</strong>网关过滤器。其根据 <code>forward://</code> 前缀( Scheme )过滤处理，<strong>将请求转发到当前网关实例本地接口</strong>。</p><p>举个例子，配置 RouteDefinition 路由定义如下 ：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">      name:</span> <span class="string">juejin-gateway</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">forward_sample</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">forward:///globalfilters</span></div><div class="line"><span class="attr">        order:</span> <span class="number">10000</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Path=/globalfilters</span></div><div class="line"><span class="attr">        filters:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">PrefixPath=/application/gateway</span></div></pre></td></tr></table></figure><ul><li>我们假定网关端口为 <code>8080</code> 。</li><li>当请求 <code>http://127.0.0.1:8080/globalfilters</code> 接口，Spring Cloud Gateway 处理过程如下 ：<ul><li>匹配到路由 Route (<code>id = forward_sample</code>) 。</li><li><strong>配置</strong>的 PrefixPathGatewayFilterFactory 将请求<strong>改写</strong>成 <code>http://127.0.0.1:8080/application/gateway/globalfilters</code> 。</li><li>ForwardRoutingFilter 判断有 <code>forward://</code> 前缀( Scheme )，过滤处理，将请求<strong>转发</strong>给 DispatcherHandler 。</li><li>DispatcherHandler 匹配并转发到<strong>当前网关实例本地接口</strong> <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/83496b78944269050373bb92bb2181e1b7c070e8/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/actuate/GatewayWebfluxEndpoint.java#L96" rel="external nofollow noopener noreferrer" target="_blank"><code>application/gateway/globalfilters</code></a> 。</li></ul></li><li>为什么需要配置 PrefixPathGatewayFilterFactory ？需要通过 PrefixPathGatewayFilterFactory 将请求重写路径，以匹配本地 API ，否则 DispatcherHandler 转发会失败。</li></ul><p>另外，RouteToRequestUrlFilter 是 Spring Cloud Gateway 实现的一种<strong>路由</strong>网关过滤器，目前还提供 WebsocketRoutingFilter / NettyRoutingFilter / WebClientHttpRoutingFilter 。</p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-RouteToRequestUrlFilter"><a href="#2-RouteToRequestUrlFilter" class="headerlink" title="2. RouteToRequestUrlFilter"></a>2. RouteToRequestUrlFilter</h1><p><code>org.springframework.cloud.gateway.filter.ForwardRoutingFilter</code> ，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardRoutingFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(ForwardRoutingFilter.class);</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>: <span class="keyword">private</span> <span class="keyword">final</span> DispatcherHandler dispatcherHandler;</div><div class="line"> <span class="number">6</span>: </div><div class="line"> <span class="number">7</span>: <span class="function"><span class="keyword">public</span> <span class="title">ForwardRoutingFilter</span><span class="params">(DispatcherHandler dispatcherHandler)</span> </span>&#123;</div><div class="line"> <span class="number">8</span>: <span class="keyword">this</span>.dispatcherHandler = dispatcherHandler;</div><div class="line"> <span class="number">9</span>: &#125;</div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">13</span>: <span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE;</div><div class="line"><span class="number">14</span>: &#125;</div><div class="line"><span class="number">15</span>: </div><div class="line"><span class="number">16</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">17</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</div><div class="line"><span class="number">18</span>:     <span class="comment">// 获得 requestUrl</span></div><div class="line"><span class="number">19</span>: URI requestUrl = exchange.getRequiredAttribute(GATEWAY_REQUEST_URL_ATTR);</div><div class="line"><span class="number">20</span>: </div><div class="line"><span class="number">21</span>: <span class="comment">// 判断是否能够处理</span></div><div class="line"><span class="number">22</span>: String scheme = requestUrl.getScheme();</div><div class="line"><span class="number">23</span>: <span class="keyword">if</span> (isAlreadyRouted(exchange) || !scheme.equals(<span class="string">"forward"</span>)) &#123;</div><div class="line"><span class="number">24</span>: <span class="keyword">return</span> chain.filter(exchange);</div><div class="line"><span class="number">25</span>: &#125;</div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>: <span class="comment">// 设置已经路由</span></div><div class="line"><span class="number">28</span>: setAlreadyRouted(exchange);</div><div class="line"><span class="number">29</span>: </div><div class="line"><span class="number">30</span>: <span class="comment">//<span class="doctag">TODO:</span> translate url?</span></div><div class="line"><span class="number">31</span>: </div><div class="line"><span class="number">32</span>: <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</div><div class="line"><span class="number">33</span>: log.trace(<span class="string">"Forwarding to URI: "</span>+requestUrl);</div><div class="line"><span class="number">34</span>: &#125;</div><div class="line"><span class="number">35</span>: </div><div class="line"><span class="number">36</span>: <span class="comment">// DispatcherHandler 匹配并转发到当前网关实例本地接口</span></div><div class="line"><span class="number">37</span>: <span class="keyword">return</span> <span class="keyword">this</span>.dispatcherHandler.handle(exchange);</div><div class="line"><span class="number">38</span>: &#125;</div><div class="line"><span class="number">39</span>: &#125;</div></pre></td></tr></table></figure><ul><li>实现 <strong>GlobalFilter</strong> 接口。</li><li><code>#getOrder()</code> 方法，返回顺序为 <code>Integer.MAX_VALUE</code> 。在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.1) 之 GatewayFilter 一览》「3. GlobalFilter」</a> ，我们列举了所有 GlobalFilter 的顺序。</li><li>第 19 行 ：获得 <code>requestUrl</code> 。</li><li><p>第 22 至 25 行 ：判断 ForwardRoutingFilter 是否能够处理该请求，需要满足两个条件 ：</p><ul><li><code>forward://</code> 前缀( Scheme ) 。</li><li><p>调用 <code>ServerWebExchangeUtils#isAlreadyRouted(ServerWebExchange)</code> 方法，判断该请求暂未被其他 Routing 网关处理。代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAlreadyRouted</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> exchange.getAttributeOrDefault(GATEWAY_ALREADY_ROUTED_ATTR, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>x</li></ul></li></ul></li><li><p>第 28 行 ：设置该请求已经被处理。代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setAlreadyRouted</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line">    exchange.getAttributes().put(GATEWAY_ALREADY_ROUTED_ATTR, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>第 37 行 ：将请求<strong>转发</strong>给 DispatcherHandler 。DispatcherHandler 匹配并转发到<strong>当前网关实例本地接口</strong>。</p></li></ul><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>一开始想错了 ForwardRoutingFilter 了的用途，调试许久，后面看了官方提供的示例 <code>org.springframework.cloud.gateway.test.ForwardTests</code> ，豁然开朗。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_20/01.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-forward-routing/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-f
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.4) 之 LoadBalancerClientFilter 负载均衡</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-load-balancer-client/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/filter-load-balancer-client/</id>
    <published>2020-03-14T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-load-balancer-client/">http://www.iocoder.cn/Spring-Cloud-Gateway/filter-load-balancer-client/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-load-balancer-client/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-load-balancer-client/">2. 环境搭建</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-load-balancer-client/">3. LoadBalancerClientFilter</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-load-balancer-client/">4. 高能</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-load-balancer-client/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>LoadBalancerClientFilter 的代码实现</strong>。</p><p>LoadBalancerClientFilter 根据 <code>lb://</code> 前缀过滤处理，使用 <code>serviceId</code> 选择<strong>一个</strong>服务实例，从而实现<strong>负载均衡</strong>。</p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h1><p>在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-discover-client/?self">《Spring-Cloud-Gateway 源码解析 —— 路由（1.4）之 DiscoveryClientRouteDefinitionLocator 注册中心》「2. 环境搭建」</a> 有详细教程。</p><h1 id="3-LoadBalancerClientFilter"><a href="#3-LoadBalancerClientFilter" class="headerlink" title="3. LoadBalancerClientFilter"></a>3. LoadBalancerClientFilter</h1><p><code>org.springframework.cloud.gateway.filter.LoadBalancerClientFilter</code> ，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalancerClientFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(LoadBalancerClientFilter.class);</div><div class="line"> <span class="number">4</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOAD_BALANCER_CLIENT_FILTER_ORDER = <span class="number">10100</span>;</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="keyword">private</span> <span class="keyword">final</span> LoadBalancerClient loadBalancer;</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>: <span class="function"><span class="keyword">public</span> <span class="title">LoadBalancerClientFilter</span><span class="params">(LoadBalancerClient loadBalancer)</span> </span>&#123;</div><div class="line"> <span class="number">9</span>: <span class="keyword">this</span>.loadBalancer = loadBalancer;</div><div class="line"><span class="number">10</span>: &#125;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">13</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">14</span>: <span class="keyword">return</span> LOAD_BALANCER_CLIENT_FILTER_ORDER;</div><div class="line"><span class="number">15</span>: &#125;</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">18</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</div><div class="line"><span class="number">19</span>: <span class="comment">// 获得 URL</span></div><div class="line"><span class="number">20</span>: URI url = exchange.getAttribute(GATEWAY_REQUEST_URL_ATTR);</div><div class="line"><span class="number">21</span>: <span class="keyword">if</span> (url == <span class="keyword">null</span> || !url.getScheme().equals(<span class="string">"lb"</span>)) &#123;</div><div class="line"><span class="number">22</span>: <span class="keyword">return</span> chain.filter(exchange);</div><div class="line"><span class="number">23</span>: &#125;</div><div class="line"><span class="number">24</span>: <span class="comment">// 添加 原始请求URI 到 GATEWAY_ORIGINAL_REQUEST_URL_ATTR</span></div><div class="line"><span class="number">25</span>: <span class="comment">//preserve the original url</span></div><div class="line"><span class="number">26</span>: addOriginalRequestUrl(exchange, url);</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>: log.trace(<span class="string">"LoadBalancerClientFilter url before: "</span> + url);</div><div class="line"><span class="number">29</span>: </div><div class="line"><span class="number">30</span>: <span class="comment">// 获取 服务实例</span></div><div class="line"><span class="number">31</span>: <span class="keyword">final</span> ServiceInstance instance = loadBalancer.choose(url.getHost());</div><div class="line"><span class="number">32</span>: <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">33</span>: <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundException(<span class="string">"Unable to find instance for "</span> + url.getHost());</div><div class="line"><span class="number">34</span>: &#125;</div><div class="line"><span class="number">35</span>: </div><div class="line"><span class="number">36</span>: <span class="comment">/*URI uri = exchange.getRequest().getURI();</span></div><div class="line"><span class="comment">37: URI requestUrl = loadBalancer.reconstructURI(instance, uri);*/</span></div><div class="line"><span class="number">38</span>: <span class="comment">//</span></div><div class="line"><span class="number">39</span>: URI requestUrl = UriComponentsBuilder.fromUri(url)</div><div class="line"><span class="number">40</span>: .scheme(instance.isSecure()? <span class="string">"https"</span> : <span class="string">"http"</span>) <span class="comment">//<span class="doctag">TODO:</span> support websockets</span></div><div class="line"><span class="number">41</span>: .host(instance.getHost())</div><div class="line"><span class="number">42</span>: .port(instance.getPort())</div><div class="line"><span class="number">43</span>: .build(<span class="keyword">true</span>)</div><div class="line"><span class="number">44</span>: .toUri();</div><div class="line"><span class="number">45</span>: log.trace(<span class="string">"LoadBalancerClientFilter url chosen: "</span> + requestUrl);</div><div class="line"><span class="number">46</span>: </div><div class="line"><span class="number">47</span>: <span class="comment">// 添加 请求URI 到 GATEWAY_REQUEST_URL_ATTR</span></div><div class="line"><span class="number">48</span>: exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR, requestUrl);</div><div class="line"><span class="number">49</span>: </div><div class="line"><span class="number">50</span>: <span class="comment">// 提交过滤器链继续过滤</span></div><div class="line"><span class="number">51</span>: <span class="keyword">return</span> chain.filter(exchange);</div><div class="line"><span class="number">52</span>: &#125;</div><div class="line"><span class="number">53</span>: </div><div class="line"><span class="number">54</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 19 至 23 行 ：获得 URL 。<strong>只处理 <code>lb://</code> 为前缀( Scheme )的地址</strong>。</li><li><p>第 第 26 行 ：调用 <code>ServerWebExchangeUtils#addOriginalRequestUrl(...)</code> 添加原始请求 URI 到 <code>GATEWAY_ORIGINAL_REQUEST_URL_ATTR</code> 。代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addOriginalRequestUrl</span><span class="params">(ServerWebExchange exchange, URI url)</span> </span>&#123;</div><div class="line">exchange.getAttributes().computeIfAbsent(GATEWAY_ORIGINAL_REQUEST_URL_ATTR, s -&gt; <span class="keyword">new</span> LinkedHashSet&lt;&gt;()); <span class="comment">// 数组，考虑多次重写</span></div><div class="line">    LinkedHashSet&lt;URI&gt; uris = exchange.getRequiredAttribute(GATEWAY_ORIGINAL_REQUEST_URL_ATTR);</div><div class="line">    uris.add(url);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>为什么使用 LinkedHashSet ？因为可以使用 RewritePathGatewayFilterFactory / PrefixPathGatewayFilterFactory 多次重写。</li></ul></li><li><p>第 30 至 34 行 ：调用 <code>LoadBalancerClient#choose(String)</code> 方法，获得<strong>一个</strong>服务实例( ServiceInstance ) ，从而实现<strong>负载均衡</strong>。</p><ul><li>熟悉 Spring Cloud 的同学都知道，一般情况下 LoadBalancerClient 实现类为 <code>org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient</code> 。</li><li>举个 <code>instance</code> 的<strong>值</strong>例子 ：<img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_15/01.png" alt=""></li></ul></li><li>第 39 至 45 行 ：创建 <code>requestUrl</code> 。举个例子 ：<img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_15/02.png" alt=""></li><li>第 48 行 ：设置 <code>requestUrl</code> 到 <code>GATEWAY_REQUEST_URL_ATTR</code> 。后面 Routing 相关的 GatewayFilter 会通过该属性，发起请求。</li><li>第 51 行 ：提交过滤器链继续过滤。<strong>注意</strong>，这里不需要创建<strong>新</strong>的 ServerWebExchange </li></ul><h1 id="4-高能"><a href="#4-高能" class="headerlink" title="4. 高能"></a>4. 高能</h1><p>我们回过头看 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-discover-client/?self">《Spring-Cloud-Gateway 源码解析 —— 路由（1.4）之 DiscoveryClientRouteDefinitionLocator 注册中心》「4. 高能」</a></p><p>相同服务( <code>serviceId</code> 相同) ，服务实例的注册或下线，Ribbon 已经处理，所以不用担心。</p><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>没有彩蛋，继续往下写！当然，《天才麻将少女》的福利还是有的！</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_15/03.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-load-balancer-client/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/fil
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.3) 之 RouteToRequestUrlFilter</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-route-to-request/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/filter-route-to-request/</id>
    <published>2020-03-09T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-route-to-request/">http://www.iocoder.cn/Spring-Cloud-Gateway/filter-route-to-request/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-route-to-request/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-route-to-request/">2. RouteToRequestUrlFilter</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-route-to-request/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>RouteToRequestUrlFilter 的代码实现</strong>。</p><p>RouteToRequestUrlFilter 根据<strong>匹配</strong>的 Route ，计算请求的地址。<strong>注意，这里的地址指的是 URL ，而不是 URI</strong> 。</p><p>😈 RouteToRequestUrlFilter 的代码十分少，所以这会是一篇简单的文章。</p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-RouteToRequestUrlFilter"><a href="#2-RouteToRequestUrlFilter" class="headerlink" title="2. RouteToRequestUrlFilter"></a>2. RouteToRequestUrlFilter</h1><p><code>org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter</code> ，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteToRequestUrlFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(RouteToRequestUrlFilter.class);</div><div class="line"> <span class="number">4</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ROUTE_TO_URL_FILTER_ORDER = <span class="number">10000</span>;</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">7</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">8</span>: <span class="keyword">return</span> ROUTE_TO_URL_FILTER_ORDER;</div><div class="line"> <span class="number">9</span>: &#125;</div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</div><div class="line"><span class="number">13</span>:     <span class="comment">// 获得 Route</span></div><div class="line"><span class="number">14</span>: Route route = exchange.getAttribute(GATEWAY_ROUTE_ATTR);</div><div class="line"><span class="number">15</span>: <span class="keyword">if</span> (route == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">16</span>: <span class="keyword">return</span> chain.filter(exchange);</div><div class="line"><span class="number">17</span>: &#125;</div><div class="line"><span class="number">18</span>: log.trace(<span class="string">"RouteToRequestUrlFilter start"</span>);</div><div class="line"><span class="number">19</span>: <span class="comment">// 拼接 requestUrl</span></div><div class="line"><span class="number">20</span>: URI requestUrl = UriComponentsBuilder.fromHttpRequest(exchange.getRequest())</div><div class="line"><span class="number">21</span>: .uri(route.getUri())</div><div class="line"><span class="number">22</span>: .build(<span class="keyword">true</span>) <span class="comment">// encoded=true</span></div><div class="line"><span class="number">23</span>: .toUri();</div><div class="line"><span class="number">24</span>: <span class="comment">// 设置 requestUrl 到 GATEWAY_REQUEST_URL_ATTR &#123;@link RewritePathGatewayFilterFactory&#125;</span></div><div class="line"><span class="number">25</span>: exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR, requestUrl);</div><div class="line"><span class="number">26</span>: <span class="comment">// 提交过滤器链继续过滤</span></div><div class="line"><span class="number">27</span>: <span class="keyword">return</span> chain.filter(exchange);</div><div class="line"><span class="number">28</span>: &#125;</div><div class="line"><span class="number">29</span>: </div><div class="line"><span class="number">30</span>: &#125;</div></pre></td></tr></table></figure><ul><li>实现 <strong>GlobalFilter</strong> 接口。</li><li><code>#getOrder()</code> 方法，返回顺序为 10000 。在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.1) 之 GatewayFilter 一览》「3. GlobalFilter」</a> ，我们列举了所有 GlobalFilter 的顺序。</li><li>第 13 至 18 行 ：获得请求匹配的 Route ，在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-handler-mapping/?self">《Spring-Cloud-Gateway 源码解析 —— 处理器 (3.2) 之 RoutePredicateHandlerMapping 路由匹配》</a> 有详细解析。</li><li>第 20 至 23 行 ：拼接 <code>requestUrl</code> 。这里有一点要注意下，如果 <code>Route.uri</code> 属性配置带有 Path ，则会覆盖请求的 Path 。我们来举个例子 ：</li></ul><table><thead><tr><th><code>Route.uri</code></th><th><code>Request.uri</code></th><th><code>requestUrl</code></th></tr></thead><tbody><tr><td><a href="http://bin.org:80" rel="external nofollow noopener noreferrer" target="_blank">http://bin.org:80</a></td><td><a href="http://127.0.0.1:8080/test/segment" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/test/segment</a></td><td><a href="http://httpbin.org:80/123" rel="external nofollow noopener noreferrer" target="_blank">http://httpbin.org:80/123</a></td></tr><tr><td><a href="http://bin.org:80/123" rel="external nofollow noopener noreferrer" target="_blank">http://bin.org:80/123</a></td><td><a href="http://127.0.0.1:8080/test/segment" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/test/segment</a></td><td><a href="http://httpbin.org:80/test/segment" rel="external nofollow noopener noreferrer" target="_blank">http://httpbin.org:80/test/segment</a></td></tr></tbody></table><ul><li><p>为什么会导致覆盖的情况呢 ？答案在 <a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java#L413" rel="external nofollow noopener noreferrer" target="_blank"><code>UriComponentsBuilder#uri(URI)</code></a> 方法，代码如下 ：</p><pre><code class="Java"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> UriComponentsBuilder <span class="title">uri</span><span class="params">(URI uri)</span> </span>{ <span class="number">2</span>:     Assert.notNull(uri, <span class="string">"URI must not be null"</span>); <span class="number">3</span>:     <span class="keyword">this</span>.scheme = uri.getScheme(); <span class="number">4</span>:     <span class="keyword">if</span> (uri.isOpaque()) { <span class="number">5</span>:         <span class="keyword">this</span>.ssp = uri.getRawSchemeSpecificPart(); <span class="number">6</span>:         resetHierarchicalComponents(); <span class="number">7</span>:     } <span class="number">8</span>:     <span class="keyword">else</span> { <span class="number">9</span>:         <span class="keyword">if</span> (uri.getRawUserInfo() != <span class="keyword">null</span>) {<span class="number">10</span>:             <span class="keyword">this</span>.userInfo = uri.getRawUserInfo();<span class="number">11</span>:         }<span class="number">12</span>:         <span class="keyword">if</span> (uri.getHost() != <span class="keyword">null</span>) {<span class="number">13</span>:             <span class="keyword">this</span>.host = uri.getHost();<span class="number">14</span>:         }<span class="number">15</span>:         <span class="keyword">if</span> (uri.getPort() != -<span class="number">1</span>) {<span class="number">16</span>:             <span class="keyword">this</span>.port = String.valueOf(uri.getPort());<span class="number">17</span>:         }<span class="number">18</span>:         <span class="keyword">if</span> (StringUtils.hasLength(uri.getRawPath())) {<span class="number">19</span>:             <span class="keyword">this</span>.pathBuilder = <span class="keyword">new</span> CompositePathComponentBuilder();<span class="number">20</span>:             <span class="keyword">this</span>.pathBuilder.addPath(uri.getRawPath());<span class="number">21</span>:         }<span class="number">22</span>:         <span class="keyword">if</span> (StringUtils.hasLength(uri.getRawQuery())) {<span class="number">23</span>:             <span class="keyword">this</span>.queryParams.clear();<span class="number">24</span>:             query(uri.getRawQuery());<span class="number">25</span>:         }<span class="number">26</span>:         resetSchemeSpecificPart();<span class="number">27</span>:     }<span class="number">28</span>:     <span class="keyword">if</span> (uri.getRawFragment() != <span class="keyword">null</span>) {<span class="number">29</span>:         <span class="keyword">this</span>.fragment = uri.getRawFragment();<span class="number">30</span>:     }<span class="number">31</span>:     <span class="keyword">return</span> <span class="keyword">this</span>;<span class="number">32</span>: }</code></pre><ul><li>第 18 至 21 行 ：当 <code>uri</code> 参数有 Path 时，<strong>新建</strong>一个 CompositePathComponentBuilder ，因此原有的 <code>this.pathBuilder</code> 被<strong>覆盖</strong>了。</li></ul></li><li><p>第 25 行 ：设置 <code>requestUrl</code> 到 <code>GATEWAY_REQUEST_URL_ATTR</code> 。后面 Routing 相关的 GatewayFilter 会通过该属性，发起请求。</p></li><li>第 27 行 ：提交过滤器链继续过滤。<strong>注意</strong>，这里不需要创建<strong>新</strong>的 ServerWebExchange 。 </li></ul><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>😈 硬生生把这个文章丰富了下。人生如戏，全靠套路。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_10/01.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-route-to-request/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.2) 之 GatewayFilterFactory 过滤器工厂</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/</id>
    <published>2020-03-04T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">2. Header</a><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">2.1 AddRequestHeaderGatewayFilterFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">2.2 RemoveRequestHeaderGatewayFilterFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">2.3 AddResponseHeaderGatewayFilterFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">2.4 RemoveResponseHeaderGatewayFilterFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">2.5 SetResponseHeaderGatewayFilterFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">2.6 RemoveNonProxyHeadersGatewayFilterFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">2.7 SecureHeadersGatewayFilterFactory</a></li></ul></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">3. Parameter</a><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">3.1 AddRequestParameterGatewayFilterFactory</a></li></ul></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">4. Path</a><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">4.1 RewritePathGatewayFilterFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">4.2 PrefixPathGatewayFilterFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">4.3 SetPathGatewayFilterFactory</a></li></ul></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">5. Status</a><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">5.1 SetStatusGatewayFilterFactory</a></li></ul></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">6. Redirect</a><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">6.1 RedirectToGatewayFilterFactory</a></li></ul></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">7. Hystrix</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">8. RateLimiter</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>GatewayFilterFactory 的实现类</strong>。</p><p>GatewayFilterFactory 实现类较多，根据用途整理如下脑图 ：</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_05/01.png" alt=""></p><p>下面我们开始逐块解析源码实现。</p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-Header"><a href="#2-Header" class="headerlink" title="2. Header"></a>2. Header</h1><p>本小节分享 Header 相关的 GatewayFilterFactory 实现类。</p><h2 id="2-1-AddRequestHeaderGatewayFilterFactory"><a href="#2-1-AddRequestHeaderGatewayFilterFactory" class="headerlink" title="2.1 AddRequestHeaderGatewayFilterFactory"></a>2.1 AddRequestHeaderGatewayFilterFactory</h2><ul><li>用途 ：添加指定请求 Header 为指定值。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">add_request_header_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        filters:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">AddRequestHeader=X-Request-Foo,</span> <span class="string">Bar</span></div></pre></td></tr></table></figure></li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddRequestHeaderGatewayFilterFactory</span> <span class="keyword">implements</span> <span class="title">GatewayFilterFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">4</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">5</span>: <span class="keyword">return</span> Arrays.asList(NAME_KEY, VALUE_KEY);</div><div class="line"> <span class="number">6</span>: &#125;</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">9</span>: <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">10</span>: String name = args.getString(NAME_KEY);</div><div class="line"><span class="number">11</span>: String value = args.getString(VALUE_KEY);</div><div class="line"><span class="number">12</span>: </div><div class="line"><span class="number">13</span>: <span class="keyword">return</span> (exchange, chain) -&gt; &#123; <span class="comment">// GatewayFilter</span></div><div class="line"><span class="number">14</span>: <span class="comment">// 创建新的 ServerHttpRequest</span></div><div class="line"><span class="number">15</span>: ServerHttpRequest request = exchange.getRequest().mutate()</div><div class="line"><span class="number">16</span>: .header(name, value)</div><div class="line"><span class="number">17</span>: .build();</div><div class="line"><span class="number">18</span>: </div><div class="line"><span class="number">19</span>: <span class="comment">// 创建新的 ServerWebExchange ，提交过滤器链继续过滤</span></div><div class="line"><span class="number">20</span>: <span class="keyword">return</span> chain.filter(exchange.mutate().request(request).build());</div><div class="line"><span class="number">21</span>: &#125;;</div><div class="line"><span class="number">22</span>: &#125;</div><div class="line"><span class="number">23</span>: &#125;</div></pre></td></tr></table></figure><ul><li>Tuple 参数 ：<code>name</code> / <code>value</code> 。</li><li>第 14 至 17 行 ：创建<strong>新</strong>的 ServerHttpRequest 。</li><li>第 19 至 20 行 ：创建<strong>新</strong>的 ServerWebExchange ，提交<strong>过滤器链</strong>继续过滤。</li></ul></li></ul><h2 id="2-2-RemoveRequestHeaderGatewayFilterFactory"><a href="#2-2-RemoveRequestHeaderGatewayFilterFactory" class="headerlink" title="2.2 RemoveRequestHeaderGatewayFilterFactory"></a>2.2 RemoveRequestHeaderGatewayFilterFactory</h2><p>类似 AddRequestHeaderGatewayFilterFactory ，不重复分享，点击 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/docs/src/main/asciidoc/spring-cloud-gateway.adoc#removerequestheader-gatewayfilter-factory" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud Gateway —— RemoveRequestHeader GatewayFilter Factory》</a> 查看官方文档。</p><h2 id="2-3-AddResponseHeaderGatewayFilterFactory"><a href="#2-3-AddResponseHeaderGatewayFilterFactory" class="headerlink" title="2.3 AddResponseHeaderGatewayFilterFactory"></a>2.3 AddResponseHeaderGatewayFilterFactory</h2><p>类似 AddRequestHeaderGatewayFilterFactory ，不重复分享，点击 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/docs/src/main/asciidoc/spring-cloud-gateway.adoc#addresponseheader-gatewayfilter-factory" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud Gateway —— AddResponseHeader GatewayFilter Factory》</a> 查看官方文档。</p><h2 id="2-4-RemoveResponseHeaderGatewayFilterFactory"><a href="#2-4-RemoveResponseHeaderGatewayFilterFactory" class="headerlink" title="2.4 RemoveResponseHeaderGatewayFilterFactory"></a>2.4 RemoveResponseHeaderGatewayFilterFactory</h2><p>类似 AddRequestHeaderGatewayFilterFactory ，不重复分享，点击 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/docs/src/main/asciidoc/spring-cloud-gateway.adoc#removeresponseheader-gatewayfilter-factory" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud Gateway —— RemoveResponseHeader GatewayFilter Factory》</a> 查看官方文档。</p><h2 id="2-5-SetResponseHeaderGatewayFilterFactory"><a href="#2-5-SetResponseHeaderGatewayFilterFactory" class="headerlink" title="2.5 SetResponseHeaderGatewayFilterFactory"></a>2.5 SetResponseHeaderGatewayFilterFactory</h2><p>类似 AddRequestHeaderGatewayFilterFactory ，不重复分享，点击 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/docs/src/main/asciidoc/spring-cloud-gateway.adoc#removeresponseheader-gatewayfilter-factory" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud Gateway —— SetStatus GatewayFilter Factory》</a> 查看官方文档。</p><h2 id="2-6-RemoveNonProxyHeadersGatewayFilterFactory"><a href="#2-6-RemoveNonProxyHeadersGatewayFilterFactory" class="headerlink" title="2.6 RemoveNonProxyHeadersGatewayFilterFactory"></a>2.6 RemoveNonProxyHeadersGatewayFilterFactory</h2><ul><li>用途 ：移除请求 <strong>Proxy</strong> 相关的 Header 。默认值为 <code>[ &quot;Connection&quot;, &quot;Keep-Alive&quot;, &quot;Proxy-Authenticate&quot;, &quot;Proxy-Authorization&quot;, &quot;TE&quot;, &quot;Trailer&quot;, &quot;Transfer-Encoding&quot;, &quot;Upgrade&quot; ]</code> ( 参考自 ：<a href="https://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-14#section-7.1.3" rel="external nofollow noopener noreferrer" target="_blank">https://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-14#section-7.1.3</a> ) ，可以通过 <code>spring.cloud.gateway.filter.remove-non-proxy-headers</code> 配置。</li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>: <span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.cloud.gateway.filter.remove-non-proxy-headers"</span>)</div><div class="line"> <span class="number">2</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveNonProxyHeadersGatewayFilterFactory</span> <span class="keyword">implements</span> <span class="title">GatewayFilterFactory</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>:     <span class="comment">/**</span></div><div class="line"><span class="comment"> 5:      * 默认</span></div><div class="line"><span class="comment"> 6:      */</span></div><div class="line"> <span class="number">7</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_HEADERS_TO_REMOVE = <span class="keyword">new</span> String[] &#123;<span class="string">"Connection"</span>, <span class="string">"Keep-Alive"</span>,</div><div class="line"> <span class="number">8</span>: <span class="string">"Proxy-Authenticate"</span>, <span class="string">"Proxy-Authorization"</span>, <span class="string">"TE"</span>, <span class="string">"Trailer"</span>, <span class="string">"Transfer-Encoding"</span>, <span class="string">"Upgrade"</span>&#125;;</div><div class="line"> <span class="number">9</span>: </div><div class="line"><span class="number">10</span>: <span class="keyword">private</span> List&lt;String&gt; headers = Arrays.asList(DEFAULT_HEADERS_TO_REMOVE);</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">13</span>: <span class="keyword">return</span> headers;</div><div class="line"><span class="number">14</span>: &#125;</div><div class="line"><span class="number">15</span>: </div><div class="line"><span class="number">16</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeaders</span><span class="params">(List&lt;String&gt; headers)</span> </span>&#123;</div><div class="line"><span class="number">17</span>: <span class="keyword">this</span>.headers = headers;</div><div class="line"><span class="number">18</span>: &#125;</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">21</span>: <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">22</span>: <span class="comment">//<span class="doctag">TODO:</span> support filter args</span></div><div class="line"><span class="number">23</span>: </div><div class="line"><span class="number">24</span>: <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</div><div class="line"><span class="number">25</span>: <span class="comment">// 创建新的 ServerHttpRequest</span></div><div class="line"><span class="number">26</span>: ServerHttpRequest request = exchange.getRequest().mutate()</div><div class="line"><span class="number">27</span>: .headers(httpHeaders -&gt; &#123;</div><div class="line"><span class="number">28</span>: <span class="keyword">for</span> (String header : <span class="keyword">this</span>.headers) &#123;</div><div class="line"><span class="number">29</span>: httpHeaders.remove(header); <span class="comment">// 移除</span></div><div class="line"><span class="number">30</span>: &#125;</div><div class="line"><span class="number">31</span>: &#125;)</div><div class="line"><span class="number">32</span>: .build();</div><div class="line"><span class="number">33</span>: </div><div class="line"><span class="number">34</span>: <span class="comment">// 创建新的 ServerWebExchange ，提交过滤器链继续过滤</span></div><div class="line"><span class="number">35</span>: <span class="keyword">return</span> chain.filter(exchange.mutate().request(request).build());</div><div class="line"><span class="number">36</span>: &#125;;</div><div class="line"><span class="number">37</span>: &#125;</div><div class="line"><span class="number">38</span>:</div></pre></td></tr></table></figure></li></ul><h2 id="2-7-SecureHeadersGatewayFilterFactory"><a href="#2-7-SecureHeadersGatewayFilterFactory" class="headerlink" title="2.7 SecureHeadersGatewayFilterFactory"></a>2.7 SecureHeadersGatewayFilterFactory</h2><ul><li>用途 ：添加响应 Secure 相关的 Header 。默认值在 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/factory/SecureHeadersProperties.java#L27" rel="external nofollow noopener noreferrer" target="_blank"><code>org.springframework.cloud.gateway.filter.factory.SecureHeadersProperties</code></a> ，可以通过 <code>spring.cloud.gateway.filter.secure-headers</code> 配置。</li><li>推荐文章 ：<ul><li><a href="https://blog.appcanary.com/2017/http-security-headers.html" rel="external nofollow noopener noreferrer" target="_blank">《Everything you need to know about HTTP security headers》</a></li><li><a href="http://blog.jobbole.com/60143/" rel="external nofollow noopener noreferrer" target="_blank">《4个常用的HTTP安全头部》</a> </li></ul></li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecureHeadersGatewayFilterFactory</span> <span class="keyword">implements</span> <span class="title">GatewayFilterFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_XSS_PROTECTION_HEADER = <span class="string">"X-Xss-Protection"</span>;</div><div class="line"> <span class="number">4</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STRICT_TRANSPORT_SECURITY_HEADER = <span class="string">"Strict-Transport-Security"</span>;</div><div class="line"> <span class="number">5</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_FRAME_OPTIONS_HEADER = <span class="string">"X-Frame-Options"</span>;</div><div class="line"> <span class="number">6</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_CONTENT_TYPE_OPTIONS_HEADER = <span class="string">"X-Content-Type-Options"</span>;</div><div class="line"> <span class="number">7</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REFERRER_POLICY_HEADER = <span class="string">"Referrer-Policy"</span>;</div><div class="line"> <span class="number">8</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTENT_SECURITY_POLICY_HEADER = <span class="string">"Content-Security-Policy"</span>;</div><div class="line"> <span class="number">9</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_DOWNLOAD_OPTIONS_HEADER = <span class="string">"X-Download-Options"</span>;</div><div class="line"><span class="number">10</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_PERMITTED_CROSS_DOMAIN_POLICIES_HEADER = <span class="string">"X-Permitted-Cross-Domain-Policies"</span>;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: <span class="keyword">private</span> <span class="keyword">final</span> SecureHeadersProperties properties;</div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>: <span class="function"><span class="keyword">public</span> <span class="title">SecureHeadersGatewayFilterFactory</span><span class="params">(SecureHeadersProperties properties)</span> </span>&#123;</div><div class="line"><span class="number">15</span>: <span class="keyword">this</span>.properties = properties;</div><div class="line"><span class="number">16</span>: &#125;</div><div class="line"><span class="number">17</span>: </div><div class="line"><span class="number">18</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">19</span>: <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">20</span>: <span class="comment">//<span class="doctag">TODO:</span> allow args to override properties</span></div><div class="line"><span class="number">21</span>: </div><div class="line"><span class="number">22</span>: <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</div><div class="line"><span class="number">23</span>: HttpHeaders headers = exchange.getResponse().getHeaders();</div><div class="line"><span class="number">24</span>: </div><div class="line"><span class="number">25</span>: <span class="comment">//<span class="doctag">TODO:</span> allow header to be disabled</span></div><div class="line"><span class="number">26</span>: headers.add(X_XSS_PROTECTION_HEADER, properties.getXssProtectionHeader());</div><div class="line"><span class="number">27</span>: headers.add(STRICT_TRANSPORT_SECURITY_HEADER, properties.getStrictTransportSecurity());</div><div class="line"><span class="number">28</span>: headers.add(X_FRAME_OPTIONS_HEADER, properties.getFrameOptions());</div><div class="line"><span class="number">29</span>: headers.add(X_CONTENT_TYPE_OPTIONS_HEADER, properties.getContentTypeOptions());</div><div class="line"><span class="number">30</span>: headers.add(REFERRER_POLICY_HEADER, properties.getReferrerPolicy());</div><div class="line"><span class="number">31</span>: headers.add(CONTENT_SECURITY_POLICY_HEADER, properties.getContentSecurityPolicy());</div><div class="line"><span class="number">32</span>: headers.add(X_DOWNLOAD_OPTIONS_HEADER, properties.getDownloadOptions());</div><div class="line"><span class="number">33</span>: headers.add(X_PERMITTED_CROSS_DOMAIN_POLICIES_HEADER, properties.getPermittedCrossDomainPolicies());</div><div class="line"><span class="number">34</span>: </div><div class="line"><span class="number">35</span>: <span class="keyword">return</span> chain.filter(exchange);</div><div class="line"><span class="number">36</span>: &#125;;</div><div class="line"><span class="number">37</span>: &#125;</div><div class="line"><span class="number">38</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 26 至 33 行 ：添加响应 Secure 相关的 Header 。 </li></ul></li></ul><h1 id="3-Parameter"><a href="#3-Parameter" class="headerlink" title="3. Parameter"></a>3. Parameter</h1><p>本小节分享 Parameter 相关的 GatewayFilterFactory 实现类。</p><h2 id="3-1-AddRequestParameterGatewayFilterFactory"><a href="#3-1-AddRequestParameterGatewayFilterFactory" class="headerlink" title="3.1 AddRequestParameterGatewayFilterFactory"></a>3.1 AddRequestParameterGatewayFilterFactory</h2><p>类似 AddRequestHeaderGatewayFilterFactory ，不重复分享，点击 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/docs/src/main/asciidoc/spring-cloud-gateway.adoc#addrequestheader-gatewayfilter-factory" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud Gateway —— AddRequestParameter GatewayFilter Factory》</a> 查看官方文档。</p><h1 id="4-Path"><a href="#4-Path" class="headerlink" title="4. Path"></a>4. Path</h1><p>本小节分享 Path 相关的 GatewayFilterFactory 实现类。</p><h2 id="4-1-RewritePathGatewayFilterFactory"><a href="#4-1-RewritePathGatewayFilterFactory" class="headerlink" title="4.1 RewritePathGatewayFilterFactory"></a>4.1 RewritePathGatewayFilterFactory</h2><ul><li>用途 ：根据配置的正则表达式 <code>regexp</code> ，使用配置的 <code>replacement</code> 重写请求 Path 。从功能目的上类似 <a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" rel="external nofollow noopener noreferrer" target="_blank">《Module ngx_http_rewrite_module》</a> 。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">rewritepath_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Path=/foo/**</span></div><div class="line"><span class="attr">        filters:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">RewritePath=/foo/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></div></pre></td></tr></table></figure><ul><li>注意，<code>$\</code> 用于替代 <code>$</code> ，避免和 YAML 语法冲突。</li></ul></li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RewritePathGatewayFilterFactory</span> <span class="keyword">implements</span> <span class="title">GatewayFilterFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEXP_KEY = <span class="string">"regexp"</span>;</div><div class="line"> <span class="number">4</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REPLACEMENT_KEY = <span class="string">"replacement"</span>;</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">7</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">8</span>: <span class="keyword">return</span> Arrays.asList(REGEXP_KEY, REPLACEMENT_KEY);</div><div class="line"> <span class="number">9</span>: &#125;</div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">13</span>: <span class="keyword">final</span> String regex = args.getString(REGEXP_KEY);</div><div class="line"><span class="number">14</span>: <span class="comment">// `$\` 用于替代 `$` ，避免和 YAML 语法冲突。</span></div><div class="line"><span class="number">15</span>: String replacement = args.getString(REPLACEMENT_KEY).replace(<span class="string">"$\\"</span>, <span class="string">"$"</span>);</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</div><div class="line"><span class="number">18</span>: ServerHttpRequest req = exchange.getRequest();</div><div class="line"><span class="number">19</span>: <span class="comment">// 添加 原始请求URI 到 GATEWAY_ORIGINAL_REQUEST_URL_ATTR</span></div><div class="line"><span class="number">20</span>: addOriginalRequestUrl(exchange, req.getURI());</div><div class="line"><span class="number">21</span>: <span class="comment">// 重写 Path</span></div><div class="line"><span class="number">22</span>: String path = req.getURI().getPath();</div><div class="line"><span class="number">23</span>: String newPath = path.replaceAll(regex, replacement);</div><div class="line"><span class="number">24</span>: </div><div class="line"><span class="number">25</span>: <span class="comment">// 创建新的 ServerHttpRequest</span></div><div class="line"><span class="number">26</span>: ServerHttpRequest request = req.mutate()</div><div class="line"><span class="number">27</span>: .path(newPath) <span class="comment">// 设置 Path</span></div><div class="line"><span class="number">28</span>: .build();</div><div class="line"><span class="number">29</span>: </div><div class="line"><span class="number">30</span>: <span class="comment">// 添加 请求URI 到 GATEWAY_REQUEST_URL_ATTR</span></div><div class="line"><span class="number">31</span>: exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR, request.getURI());</div><div class="line"><span class="number">32</span>: </div><div class="line"><span class="number">33</span>: <span class="comment">// 创建新的 ServerWebExchange ，提交过滤器链继续过滤</span></div><div class="line"><span class="number">34</span>: <span class="keyword">return</span> chain.filter(exchange.mutate().request(request).build());</div><div class="line"><span class="number">35</span>: &#125;;</div><div class="line"><span class="number">36</span>: &#125;</div><div class="line"><span class="number">37</span>: &#125;</div></pre></td></tr></table></figure><ul><li>Tuple 参数 ：<code>regexp</code> / <code>replacement</code> 。</li><li>第 15 行 ：<code>$\</code> 用于替代 <code>$</code> ，避免和 YAML 语法冲突。</li><li><p>第 20 行 ：调用 <code>ServerWebExchangeUtils#addOriginalRequestUrl(...)</code> 添加原始请求 URI 到 <code>GATEWAY_ORIGINAL_REQUEST_URL_ATTR</code> 。代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addOriginalRequestUrl</span><span class="params">(ServerWebExchange exchange, URI url)</span> </span>&#123;</div><div class="line">exchange.getAttributes().computeIfAbsent(GATEWAY_ORIGINAL_REQUEST_URL_ATTR, s -&gt; <span class="keyword">new</span> LinkedHashSet&lt;&gt;()); <span class="comment">// 数组，考虑多次重写</span></div><div class="line">    LinkedHashSet&lt;URI&gt; uris = exchange.getRequiredAttribute(GATEWAY_ORIGINAL_REQUEST_URL_ATTR);</div><div class="line">    uris.add(url);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>为什么使用 LinkedHashSet ？因为可以使用 RewritePathGatewayFilterFactory / PrefixPathGatewayFilterFactory 多次重写。</li></ul></li><li><p>第 21 至 23 行 ：<strong>重写</strong>请求 Path 。</p></li><li>第 26 至 28 行 ：创建<strong>新</strong>的 ServerHttpRequest 。</li><li>第 31 行 ：添加请求 URI 到 <code>GATEWAY_REQUEST_URL_ATTR</code> 。</li><li>第 34 行 ：创建<strong>新</strong>的 ServerWebExchange ，提交过滤器链继续过滤。</li></ul></li></ul><h2 id="4-2-PrefixPathGatewayFilterFactory"><a href="#4-2-PrefixPathGatewayFilterFactory" class="headerlink" title="4.2 PrefixPathGatewayFilterFactory"></a>4.2 PrefixPathGatewayFilterFactory</h2><p>类似 RewritePathGatewayFilterFactory ，不重复分享，点击 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/docs/src/main/asciidoc/spring-cloud-gateway.adoc#setpath-gatewayfilter-factory" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud Gateway —— PrefixPath GatewayFilter Factory》</a> 查看官方文档。</p><h2 id="4-3-SetPathGatewayFilterFactory"><a href="#4-3-SetPathGatewayFilterFactory" class="headerlink" title="4.3 SetPathGatewayFilterFactory"></a>4.3 SetPathGatewayFilterFactory</h2><p>类似 RewritePathGatewayFilterFactory ，不重复分享，点击 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/docs/src/main/asciidoc/spring-cloud-gateway.adoc#prefixpath-gatewayfilter-factory" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud Gateway —— SetPath GatewayFilter Factory》</a> 查看官方文档。</p><h1 id="5-Status"><a href="#5-Status" class="headerlink" title="5. Status"></a>5. Status</h1><p>本小节分享 Status 相关的 GatewayFilterFactory 实现类。</p><h2 id="5-1-SetStatusGatewayFilterFactory"><a href="#5-1-SetStatusGatewayFilterFactory" class="headerlink" title="5.1 SetStatusGatewayFilterFactory"></a>5.1 SetStatusGatewayFilterFactory</h2><p>类似 RedirectToGatewayFilterFactory ，不重复分享，点击 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/docs/src/main/asciidoc/spring-cloud-gateway.adoc#setstatus-gatewayfilter-factory" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud Gateway —— SetStatus GatewayFilter Factory》</a> 查看官方文档。</p><h1 id="6-Redirect"><a href="#6-Redirect" class="headerlink" title="6. Redirect"></a>6. Redirect</h1><p>本小节分享 Redirect 相关的 GatewayFilterFactory 实现类。</p><h2 id="6-1-RedirectToGatewayFilterFactory"><a href="#6-1-RedirectToGatewayFilterFactory" class="headerlink" title="6.1 RedirectToGatewayFilterFactory"></a>6.1 RedirectToGatewayFilterFactory</h2><ul><li>用途 ：将响应重定向到指定 URL ，并设置响应状态码为指定 Status 。<strong>注意</strong>，Status 必须为 3XX 重定向状态码。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">prefixpath_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        filters:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">RedirectTo=302,</span> <span class="attr">http://www.iocoder.cn</span></div></pre></td></tr></table></figure></li></ul><ul><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectToGatewayFilterFactory</span> <span class="keyword">implements</span> <span class="title">GatewayFilterFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STATUS_KEY = <span class="string">"status"</span>;</div><div class="line"> <span class="number">4</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_KEY = <span class="string">"url"</span>;</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">7</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">8</span>: <span class="keyword">return</span> Arrays.asList(STATUS_KEY, URL_KEY);</div><div class="line"> <span class="number">9</span>: &#125;</div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">13</span>: String statusString = args.getRawString(STATUS_KEY);</div><div class="line"><span class="number">14</span>: String urlString = args.getString(URL_KEY);</div><div class="line"><span class="number">15</span>: </div><div class="line"><span class="number">16</span>: <span class="comment">// 解析 status ，并判断是否是 3XX 重定向状态</span></div><div class="line"><span class="number">17</span>: <span class="keyword">final</span> HttpStatus httpStatus = parse(statusString);</div><div class="line"><span class="number">18</span>: Assert.isTrue(httpStatus.is3xxRedirection(), <span class="string">"status must be a 3xx code, but was "</span> + statusString);</div><div class="line"><span class="number">19</span>: <span class="comment">// 创建 URL</span></div><div class="line"><span class="number">20</span>: <span class="keyword">final</span> URL url;</div><div class="line"><span class="number">21</span>: <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">22</span>: url = URI.create(urlString).toURL();</div><div class="line"><span class="number">23</span>: &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line"><span class="number">24</span>: <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid url "</span> + urlString, e);</div><div class="line"><span class="number">25</span>: &#125;</div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>: <span class="keyword">return</span> (exchange, chain) -&gt;</div><div class="line"><span class="number">28</span>: chain.filter(exchange).then(Mono.defer(() -&gt; &#123; <span class="comment">// After Filter</span></div><div class="line"><span class="number">29</span>: <span class="keyword">if</span> (!exchange.getResponse().isCommitted()) &#123;</div><div class="line"><span class="number">30</span>:     <span class="comment">// 设置响应 Status</span></div><div class="line"><span class="number">31</span>: setResponseStatus(exchange, httpStatus);</div><div class="line"><span class="number">32</span>: </div><div class="line"><span class="number">33</span>: <span class="comment">// 设置响应 Header</span></div><div class="line"><span class="number">34</span>: <span class="keyword">final</span> ServerHttpResponse response = exchange.getResponse();</div><div class="line"><span class="number">35</span>: response.getHeaders().set(HttpHeaders.LOCATION, url.toString());</div><div class="line"><span class="number">36</span>: <span class="keyword">return</span> response.setComplete();</div><div class="line"><span class="number">37</span>: &#125;</div><div class="line"><span class="number">38</span>: <span class="keyword">return</span> Mono.empty();</div><div class="line"><span class="number">39</span>: &#125;));</div><div class="line"><span class="number">40</span>: &#125;</div><div class="line"><span class="number">41</span>: </div><div class="line"><span class="number">42</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 16 至 18 行 ：解析配置的 <code>statusString</code> ，并判断是否是 3XX 重定向状态码。</li><li>第 19 至 25 行 ：解析配置的 <code>urlString</code> ，创建 URL 。</li><li>第 28 行 ：调用 <code>#then(Mono)</code> 方法，实现 <strong>After Filter</strong> 逻辑。这里和 AddRequestHeaderGatewayFilterFactory 实现的 <strong>Before Filter</strong> 【方式】<strong>不同</strong>。</li><li>第 29 至 37 行 ：<strong>若响应未提交</strong>，设置响应的状态码、响应的 Header ( <code>Location</code> ) 。</li><li>第 38 行 ：<strong>设置响应已提交</strong>。</li></ul></li></ul><h1 id="7-Hystrix"><a href="#7-Hystrix" class="headerlink" title="7. Hystrix"></a>7. Hystrix</h1><p>熔断相关 GatewayFilter，我们在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-hystrix/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.9) 之 HystrixGatewayFilterFactory 熔断》</a> 详细解析。</p><h1 id="8-RateLimiter"><a href="#8-RateLimiter" class="headerlink" title="8. RateLimiter"></a>8. RateLimiter</h1><p>限流相关 GatewayFilter，我们在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-request-rate-limiter/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.10) 之 RequestRateLimiterGatewayFilterFactory 请求限流》</a> 详细解析。</p><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>恩，稍显啰嗦的一篇文章，后面会比较精彩，你懂的。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_05/02.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/&lt;
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.1) 之 GatewayFilter 一览</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/">http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/">2. GatewyFilter</a><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/">2.1 GatewayFilterFactory 内部类</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/">2.2 OrderedGatewayFilter</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/">2.3 GatewayFilterAdapter</a></li></ul></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/">3. GlobalFilter</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/">4. GatewayFilterChain</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要对 <strong>过滤器 GatewayFilter 做整体的认识</strong>。</p><p>过滤器整体类图如下 ：</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_01/01.png" alt=""></p><p>是不是有点疑惑 GlobalFilter 与 GatewayFilter 的关系 ？且见本文分晓。</p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-GatewyFilter"><a href="#2-GatewyFilter" class="headerlink" title="2. GatewyFilter"></a>2. GatewyFilter</h1><p><code>org.springframework.cloud.gateway.filter.GatewayFilter</code> ，网关过滤器<strong>接口</strong>，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GatewayFilter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Process the Web request and (optionally) delegate to the next</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> WebFilter&#125; through the given &#123;<span class="doctag">@link</span> GatewayFilterChain&#125;.</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> exchange the current server exchange</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> chain provides a way to delegate to the next filter</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request processing is complete</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>从接口方法可以看到，和 <a href="https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/Filter.html" rel="external nofollow noopener noreferrer" target="_blank"><code>javax.servlet.Filter</code></a> 类似。</li></ul><p>GatewayFilter 有三种类型的子类实现，我们下面每节介绍一种。</p><h2 id="2-1-GatewayFilterFactory-内部类"><a href="#2-1-GatewayFilterFactory-内部类" class="headerlink" title="2.1 GatewayFilterFactory 内部类"></a>2.1 GatewayFilterFactory 内部类</h2><p>在每个 GatewayFilterFactory 实现类的 <code>#apply(Tuple)</code> 方法里，都声明了一个实现 GatewayFilter 的<strong>内部类</strong>，以 AddRequestHeaderGatewayFilterFactory 的代码举例子 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddRequestHeaderGatewayFilterFactory</span> <span class="keyword">implements</span> <span class="title">GatewayFilterFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">4</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">5</span>: <span class="keyword">return</span> Arrays.asList(NAME_KEY, VALUE_KEY);</div><div class="line"> <span class="number">6</span>: &#125;</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">9</span>: <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">10</span>: String name = args.getString(NAME_KEY);</div><div class="line"><span class="number">11</span>: String value = args.getString(VALUE_KEY);</div><div class="line"><span class="number">12</span>: </div><div class="line"><span class="number">13</span>: <span class="keyword">return</span> (exchange, chain) -&gt; &#123; <span class="comment">// GatewayFilter  </span></div><div class="line"><span class="number">14</span>: ServerHttpRequest request = exchange.getRequest().mutate()</div><div class="line"><span class="number">15</span>: .header(name, value)</div><div class="line"><span class="number">16</span>: .build();</div><div class="line"><span class="number">17</span>: </div><div class="line"><span class="number">18</span>: <span class="keyword">return</span> chain.filter(exchange.mutate().request(request).build());</div><div class="line"><span class="number">19</span>: &#125;;</div><div class="line"><span class="number">20</span>: &#125;</div><div class="line"><span class="number">21</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 13 至 19 行 ：定义了一个 GatewayFilter <strong>内部实现类</strong>。</li></ul><p>在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.2) 之 GatewayFilterFactory 过滤器工厂》</a> ，我们会详细解析每个 GatewayFilterFactory 定义的GatewayFilter <strong>内部实现类</strong>。</p><h2 id="2-2-OrderedGatewayFilter"><a href="#2-2-OrderedGatewayFilter" class="headerlink" title="2.2 OrderedGatewayFilter"></a>2.2 OrderedGatewayFilter</h2><p><code>org.springframework.cloud.gateway.filter.OrderedGatewayFilter</code> ，<strong>有序的</strong>网关过滤器<strong>实现类</strong>。在 FilterChain 里，过滤器数组首先会按照 <code>order</code> 升序排序，按照<strong>顺序</strong>过滤请求。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderedGatewayFilter</span> <span class="keyword">implements</span> <span class="title">GatewayFilter</span>, <span class="title">Ordered</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> GatewayFilter delegate;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> order;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">OrderedGatewayFilter</span><span class="params">(GatewayFilter delegate, <span class="keyword">int</span> order)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.delegate = delegate;</div><div class="line"><span class="keyword">this</span>.order = order;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.delegate.filter(exchange, chain);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.order;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>delegate</code> 属性，委托的 GatewayFilter 。</li><li><code>order</code> 属性，顺序。</li><li><code>#filter(ServerWebExchange, GatewayFilterChain)</code> 方法，使用 <code>delegate</code> 过滤请求。</li></ul><h2 id="2-3-GatewayFilterAdapter"><a href="#2-3-GatewayFilterAdapter" class="headerlink" title="2.3 GatewayFilterAdapter"></a>2.3 GatewayFilterAdapter</h2><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler.GatewayFilterAdapter</code> ，网关过滤器适配器。在 GatewayFilterChain 使用 GatewayFilter 过滤请求，所以通过 GatewayFilterAdapter 将 GlobalFilter 适配成 GatewayFilter 。GatewayFilterAdapter 代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayFilterAdapter</span> <span class="keyword">implements</span> <span class="title">GatewayFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GlobalFilter delegate;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayFilterAdapter</span><span class="params">(GlobalFilter delegate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.delegate = delegate;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.delegate.filter(exchange, chain);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>delegate</code> 属性，委托的 GlobalFilter 。</li><li><code>#filter(ServerWebExchange, GatewayFilterChain)</code> 方法，使用 <code>delegate</code> 过滤请求。</li></ul><hr><p>在 FilteringWebHandler 初始化时，将 GlobalFilter 委托成 GatewayFilterAdapter ，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilteringWebHandler</span> <span class="keyword">implements</span> <span class="title">WebHandler</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>:     <span class="comment">/**</span></div><div class="line"><span class="comment"> 4:      * 全局过滤器</span></div><div class="line"><span class="comment"> 5:      */</span></div><div class="line"> <span class="number">6</span>: <span class="keyword">private</span> <span class="keyword">final</span> List&lt;GatewayFilter&gt; globalFilters;</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>: <span class="function"><span class="keyword">public</span> <span class="title">FilteringWebHandler</span><span class="params">(List&lt;GlobalFilter&gt; globalFilters)</span> </span>&#123;</div><div class="line"> <span class="number">9</span>: <span class="keyword">this</span>.globalFilters = loadFilters(globalFilters);</div><div class="line"><span class="number">10</span>: &#125;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;GatewayFilter&gt; <span class="title">loadFilters</span><span class="params">(List&lt;GlobalFilter&gt; filters)</span> </span>&#123;</div><div class="line"><span class="number">13</span>: <span class="keyword">return</span> filters.stream()</div><div class="line"><span class="number">14</span>: .map(filter -&gt; &#123;</div><div class="line"><span class="number">15</span>: GatewayFilterAdapter gatewayFilter = <span class="keyword">new</span> GatewayFilterAdapter(filter);</div><div class="line"><span class="number">16</span>: <span class="keyword">if</span> (filter <span class="keyword">instanceof</span> Ordered) &#123;</div><div class="line"><span class="number">17</span>: <span class="keyword">int</span> order = ((Ordered) filter).getOrder();</div><div class="line"><span class="number">18</span>: <span class="keyword">return</span> <span class="keyword">new</span> OrderedGatewayFilter(gatewayFilter, order);</div><div class="line"><span class="number">19</span>: &#125;</div><div class="line"><span class="number">20</span>: <span class="keyword">return</span> gatewayFilter;</div><div class="line"><span class="number">21</span>: &#125;).collect(Collectors.toList());</div><div class="line"><span class="number">22</span>: &#125;</div><div class="line"><span class="number">23</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 16 至 19 行 ：当 GlobalFilter 子类实现了 <code>org.springframework.core.Ordered</code> 接口，在委托一层 OrderedGatewayFilter 。这样 <code>AnnotationAwareOrderComparator#sort(List)</code> 方法好排序。</li><li>第 20 行 ：当 GlobalFilter 子类<strong>没有</strong>实现了 <code>org.springframework.core.Ordered</code> 接口，在 <code>AnnotationAwareOrderComparator#sort(List)</code> 排序时，顺序值为 <code>Integer.MAX_VALUE</code> 。</li><li>目前 GlobalFilter 都实现了 <code>org.springframework.core.Ordered</code> 接口。</li></ul><h1 id="3-GlobalFilter"><a href="#3-GlobalFilter" class="headerlink" title="3. GlobalFilter"></a>3. GlobalFilter</h1><p><code>org.springframework.cloud.gateway.filter.GlobalFilter</code> ，全局过滤器<strong>接口</strong>，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GlobalFilter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Process the Web request and (optionally) delegate to the next</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> WebFilter&#125; through the given &#123;<span class="doctag">@link</span> GatewayFilterChain&#125;.</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> exchange the current server exchange</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> chain provides a way to delegate to the next filter</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request processing is complete</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>GlobalFilter 和 GatewayFilter 的 <code>#filter(ServerWebExchange, GatewayFilterChain)</code> <strong>方法签名一致</strong>。官方说，未来的版本将作出一些调整。</p><blockquote><p>FROM <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/docs/src/main/asciidoc/spring-cloud-gateway.adoc#path-route-predicate-factory#user-content-global-filters" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud Gateway》</a><br>This interface and usage are subject to change in future milestones</p></blockquote></li><li><p>GlobalFilter 会作用到<strong>所有的</strong> Route 上。</p></li></ul><p>GlobalFilter 实现类如下类图 ：</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_01/02.png" alt=""></p><ul><li><p>RoutingFilter</p><ul><li>NettyRoutingFilter</li><li>WebClientHttpRoutingFilter</li><li>WebsocketRoutingFilter</li><li>ForwardRoutingFilter</li></ul></li><li><p>成对的 Filter</p><ul><li>NettyRoutingFilter / NettyRoutingFilter</li><li>WebClientHttpRoutingFilter / WebClientWriteResponseFilter</li></ul></li></ul><p>梳理 GlobalFilter 的顺序如下 ：</p><table><thead><tr><th>GlobalFilter</th><th>顺序</th><th>文章</th></tr></thead><tbody><tr><td>NettyWriteResponseFilter</td><td>-1</td><td><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-netty-routing?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.7) 之 NettyRoutingFilter》</a></td></tr><tr><td>WebClientWriteResponseFilter</td><td>-1</td><td><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.8) 之 WebClientHttpRoutingFilter》</a></td></tr><tr><td>RouteToRequestUrlFilter</td><td>10000</td><td><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-route-to-request/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.3) 之 RouteToRequestUrlFilter》</a></td></tr><tr><td>LoadBalancerClientFilter</td><td>10100</td><td><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-load-balancer-client/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.4) 之 LoadBalancerClientFilter 负载均衡》</a></td></tr><tr><td>ForwardRoutingFilter</td><td><code>Integer.MAX_VALUE</code></td><td><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-forward-routing/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.5) 之 ForwardRoutingFilter》</a></td></tr><tr><td>NettyRoutingFilter</td><td><code>Integer.MAX_VALUE</code></td><td><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-netty-routing?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.7) 之 NettyRoutingFilter》</a></td></tr><tr><td>WebClientHttpRoutingFilter</td><td><code>Integer.MAX_VALUE</code></td><td><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-web-client-http-routing?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.8) 之 WebClientHttpRoutingFilter》</a></td></tr><tr><td>WebsocketRoutingFilter</td><td><code>Integer.MAX_VALUE</code></td><td><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-websocket-routing/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.6) 之 WebSocketRoutingFilter》</a></td></tr></tbody></table><p>TODO 【3030】 </p><h1 id="4-GatewayFilterChain"><a href="#4-GatewayFilterChain" class="headerlink" title="4. GatewayFilterChain"></a>4. GatewayFilterChain</h1><p><code>org.springframework.cloud.gateway.filter.GatewayFilterChain</code> ，网关过滤器链<strong>接口</strong>。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GatewayFilterChain</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Delegate to the next &#123;<span class="doctag">@code</span> WebFilter&#125; in the chain.</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> exchange the current server exchange</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request handling is complete</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>从接口方法可以看到，和 <a href="https://tomcat.apache.org/tomcat-8.0-doc/servletapi/javax/servlet/FilterChain.html" rel="external nofollow noopener noreferrer" target="_blank"><code>javax.servlet.FilterChain</code></a> 类似。</li></ul><hr><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler.GatewayFilterAdapter</code> ，网关过滤器<strong>链默认实现类</strong>。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultGatewayFilterChain</span> <span class="keyword">implements</span> <span class="title">GatewayFilterChain</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> index;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;GatewayFilter&gt; filters;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultGatewayFilterChain</span><span class="params">(List&lt;GatewayFilter&gt; filters)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.filters = filters;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.index &lt; filters.size()) &#123;</div><div class="line">GatewayFilter filter = filters.get(<span class="keyword">this</span>.index++);</div><div class="line"><span class="keyword">return</span> filter.filter(exchange, <span class="keyword">this</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> Mono.empty(); <span class="comment">// complete</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>啦啦啦，终于到过滤器了。开森！</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_03_01/03.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/&lt;/a&gt; 
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 处理器 (3.3) 之 FilteringWebHandler 创建过滤器链</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-filtering-web-handler/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/handler-filtering-web-handler/</id>
    <published>2020-02-24T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-filtering-web-handler/">http://www.iocoder.cn/Spring-Cloud-Gateway/handler-filtering-web-handler/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-filtering-web-handler/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-filtering-web-handler/">2. FilteringWebHandler</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-filtering-web-handler/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>FilteringWebHandler</strong>。</p><p>在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-handler-mapping/?self">《Spring-Cloud-Gateway 源码解析 —— 处理器 (3.2) 之 RoutePredicateHandlerMapping 路由匹配 》「2.1 SimpleHandlerAdapter」</a> 里，我们看到 <code>SimpleHandlerAdapter#handle(ServerWebExchange, Object)</code> 调用 <code>FilteringWebHandler#handle(ServerWebExchange)</code> 方法，处理请求。</p><p>FilteringWebHandler 通过创建请求对应的 Route 对应的 GatewayFilterChain 进行处理。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_20/01.jpeg" alt=""></p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-FilteringWebHandler"><a href="#2-FilteringWebHandler" class="headerlink" title="2. FilteringWebHandler"></a>2. FilteringWebHandler</h1><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler</code> ，<code>#handle(ServerWebExchange)</code> 代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilteringWebHandler</span> <span class="keyword">implements</span> <span class="title">WebHandler</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="comment">/**</span></div><div class="line"><span class="comment"> 4:  * 全局过滤器</span></div><div class="line"><span class="comment"> 5: */</span></div><div class="line"> <span class="number">6</span>: <span class="keyword">private</span> <span class="keyword">final</span> List&lt;GatewayFilter&gt; globalFilters;</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">9</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line"><span class="number">10</span>:     <span class="comment">// 获得 Route</span></div><div class="line"><span class="number">11</span>: Route route = exchange.getRequiredAttribute(GATEWAY_ROUTE_ATTR);</div><div class="line"><span class="number">12</span>: <span class="comment">// 获得 GatewayFilter</span></div><div class="line"><span class="number">13</span>: List&lt;GatewayFilter&gt; gatewayFilters = route.getFilters();</div><div class="line"><span class="number">14</span>: List&lt;GatewayFilter&gt; combined = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.globalFilters);</div><div class="line"><span class="number">15</span>: combined.addAll(gatewayFilters);</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: <span class="comment">// 排序</span></div><div class="line"><span class="number">18</span>: <span class="comment">//<span class="doctag">TODO:</span> needed or cached?</span></div><div class="line"><span class="number">19</span>: AnnotationAwareOrderComparator.sort(combined);</div><div class="line"><span class="number">20</span>: logger.debug(<span class="string">"Sorted gatewayFilterFactories: "</span>+ combined);</div><div class="line"><span class="number">21</span>: </div><div class="line"><span class="number">22</span>: <span class="comment">// 创建 DefaultGatewayFilterChain</span></div><div class="line"><span class="number">23</span>: <span class="keyword">return</span> <span class="keyword">new</span> DefaultGatewayFilterChain(combined).filter(exchange);</div><div class="line"><span class="number">24</span>: &#125;</div><div class="line"><span class="number">25</span>: &#125;</div></pre></td></tr></table></figure><ul><li>本方法涉及到的过滤器 GlobalFilter / GatewayFilter / GatewayFilterAdapter / OrderedGatewayFilter 类，我们在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.1) 之 GatewayFilter 一览》</a> 详细解析。</li><li>本方法涉及到的过滤器链 GatewayFilterChain / DefaultGatewayFilterChain 类，我们在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.1) 之 GatewayFilter 一览》</a> 详细解析。</li><li>第 11 行 ：从 <code>GATEWAY_ROUTE_ATTR</code> 获得 请求对应的 Route 。</li><li>第 13 至 15 行 ：获得 GatewayFilter 数组，包含 <code>route.filters</code> 和 <code>globalFilters</code> 。</li><li>第 19 行 ：排序获得的 GatewayFilter 数组。</li><li>第 23 行 ：使用获得的 GatewayFilter 数组创建 DefaultGatewayFilterChain ，<strong>过滤处理请求</strong>。</li></ul><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>哈哈哈，我水更我快乐。主要还是考虑文章尽量解耦，所以这篇内容偏水( 很水 )。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_25/01.jpeg" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/handler-filtering-web-handler/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/h
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 处理器 (3.2) 之 RoutePredicateHandlerMapping 路由匹配</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-handler-mapping/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-handler-mapping/</id>
    <published>2020-02-19T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-handler-mapping/">http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-handler-mapping/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-handler-mapping/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-handler-mapping/">2. DispatcherHandler</a><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-handler-mapping/">2.1 SimpleHandlerAdapter</a></li></ul></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-handler-mapping/">3. RoutePredicateHandlerMapping</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-handler-mapping/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>RoutePredicateHandlerMapping 路由匹配</strong>。</p><p>我们先一起来看看，一个请求是怎么被 Spring Cloud Gateway 处理的，如下图 ：</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_20/01.jpeg" alt=""></p><ol><li><code>org.springframework.web.reactive.DispatcherHandler</code> ：接收到请求，匹配 HandlerMapping ，此处会匹配到 RoutePredicateHandlerMapping 。</li><li><code>org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping</code> ：接收到请求，匹配 Route 。</li><li><code>org.springframework.cloud.gateway.handler.FilteringWebHandler</code> ：获得 Route 的 GatewayFilter 数组，创建 GatewayFilterChain 处理请求。</li></ol><p>第一、二步，在本文分享。第三步，在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-filtering-web-handler/?self">《Spring-Cloud-Gateway 源码解析 —— 处理器 (3.3) 之 FilteringWebHandler 创建过滤器链 》</a> 分享。</p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-DispatcherHandler"><a href="#2-DispatcherHandler" class="headerlink" title="2. DispatcherHandler"></a>2. DispatcherHandler</h1><p><code>org.springframework.web.reactive.DispatcherHandler</code> ，请求分发处理器，Spring WebFlux 的访问入口。可能大多数人对这个类都比较陌生，我们来看看他在 Spring MVC 的兄弟 <a href="http://jinnianshilongnian.iteye.com/blog/1602617" rel="external nofollow noopener noreferrer" target="_blank">DispatcherServlet</a> 是不是就有点熟悉的感觉。</p><p>下面来看看 <code>DispatcherHandler#handle(ServerWebExchange)</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherHandler</span> <span class="keyword">implements</span> <span class="title">WebHandler</span>, <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="meta">@Nullable</span></div><div class="line"> <span class="number">4</span>: <span class="keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings;</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="meta">@Nullable</span></div><div class="line"> <span class="number">7</span>: <span class="keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;</div><div class="line"> <span class="number">8</span>: </div><div class="line"> <span class="number">9</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">10</span>: <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line"><span class="number">11</span>: <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line"><span class="number">12</span>: ServerHttpRequest request = exchange.getRequest();</div><div class="line"><span class="number">13</span>: logger.debug(<span class="string">"Processing "</span> + request.getMethodValue() + <span class="string">" request for ["</span> + request.getURI() + <span class="string">"]"</span>);</div><div class="line"><span class="number">14</span>: &#125;</div><div class="line"><span class="number">15</span>: <span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">16</span>: <span class="keyword">return</span> Mono.error(HANDLER_NOT_FOUND_EXCEPTION);</div><div class="line"><span class="number">17</span>: &#125;</div><div class="line"><span class="number">18</span>: <span class="keyword">return</span> Flux.fromIterable(<span class="keyword">this</span>.handlerMappings)</div><div class="line"><span class="number">19</span>: .concatMap(mapping -&gt; mapping.getHandler(exchange))</div><div class="line"><span class="number">20</span>: .next()</div><div class="line"><span class="number">21</span>: .switchIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION))</div><div class="line"><span class="number">22</span>: .flatMap(handler -&gt; invokeHandler(exchange, handler))</div><div class="line"><span class="number">23</span>: .flatMap(result -&gt; handleResult(exchange, result));</div><div class="line"><span class="number">24</span>: &#125;</div><div class="line"><span class="number">25</span>: &#125;</div></pre></td></tr></table></figure><ul><li><p>第 18 至 20 行 ：<strong>顺序</strong>使用 <code>handlerMappings</code> 获得对应的 WebHandler 。</p><ul><li>使用 <code>#concatMap(Function)</code> 操作符的原因是考虑 <code>handlerMappings</code> 的顺序性，详见 <a href="http://blog.csdn.net/johnny901114/article/details/51533282" rel="external nofollow noopener noreferrer" target="_blank">《RxJava（四） concatMap操作符用法详解》</a> 。</li><li>使用官方 <code>spring-cloud-gateway-sample</code> 项目，此处打断点，<code>handlerMappings</code> 变量值如下图 ：<img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_20/02.png" alt=""></li><li>在【<strong>第 19 行</strong>】，调用 <code>HandlerMapping#getHandler(ServerWebExchange)</code> 获得 Handler 。在整理，RoutePredicateHandlerMapping 匹配请求对应的 Route ，并返回 FilteringWebHandler 。此时，<strong>FilteringWebHandler 还并未获得 Route 的 GatewayFilter ，创建 GatewayFilterChain 处理请求</strong>。和本文的第一张图有点出入，该图主要描述整个请求经历的流程。</li><li>第 21 行 ：如果匹配不到 WebHandler ，返回 <code>HANDLER_NOT_FOUND_EXCEPTION</code> 。</li><li><p>第 22 行 ：调用 <code>#handle()</code> 方法，执行 Handler 。代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">private</span> Mono&lt;HandlerResult&gt; <span class="title">invokeHandler</span><span class="params">(ServerWebExchange exchange, Object handler)</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: <span class="keyword">if</span> (<span class="keyword">this</span>.handlerAdapters != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">3</span>: <span class="keyword">for</span> (HandlerAdapter handlerAdapter : <span class="keyword">this</span>.handlerAdapters) &#123;</div><div class="line"> <span class="number">4</span>: <span class="keyword">if</span> (handlerAdapter.supports(handler)) &#123;</div><div class="line"> <span class="number">5</span>: <span class="keyword">return</span> handlerAdapter.handle(exchange, handler);</div><div class="line"> <span class="number">6</span>: &#125;</div><div class="line"> <span class="number">7</span>: &#125;</div><div class="line"> <span class="number">8</span>: &#125;</div><div class="line"> <span class="number">9</span>: <span class="keyword">return</span> Mono.error(<span class="keyword">new</span> IllegalStateException(<span class="string">"No HandlerAdapter: "</span> + handler));</div><div class="line"><span class="number">10</span>: &#125;</div></pre></td></tr></table></figure><ul><li>使用官方 <code>spring-cloud-gateway-sample</code> 项目，此处打断点，<code>handlerMappings</code> 变量值如下图 ：<img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_20/03.png" alt=""></li><li>第 2 至 8 行 ：<strong>顺序</strong>匹配 HandlerAdapter ，通过调用 <code>HandlerAdapter#handle(ServerWebExchange, Object)</code> 方法，从而执行 Handler 。在此处，我们会匹配到 SimpleHandlerAdapter 。</li><li>第 9 行 ：匹配不到 HandlerAdapter ，返回 IllegalStateException 。</li></ul></li><li><p>第 23 行 ：调用 <code>#handleResult()</code> 方法，处理结果。SimpleHandlerAdapter 返回的是 <code>Mono.empty()</code> ，所以不会触发该方法。<code>#handleResult()</code> 代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>: <span class="function"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title">handleResult</span><span class="params">(ServerWebExchange exchange, HandlerResult result)</span> </span>&#123;</div><div class="line"><span class="number">2</span>: <span class="keyword">return</span> getResultHandler(result).handleResult(exchange, result)</div><div class="line"><span class="number">3</span>: .onErrorResume(ex -&gt; result.applyExceptionHandler(ex).flatMap(exceptionResult -&gt;</div><div class="line"><span class="number">4</span>: getResultHandler(exceptionResult).handleResult(exchange, exceptionResult)));</div><div class="line"><span class="number">5</span>: &#125;</div></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-1-SimpleHandlerAdapter"><a href="#2-1-SimpleHandlerAdapter" class="headerlink" title="2.1 SimpleHandlerAdapter"></a>2.1 SimpleHandlerAdapter</h2><p><code>org.springframework.web.reactive.result.SimpleHandlerAdapter</code> ，基执行 WebHandler 的处理器适配器。</p><p><code>#supports(Object)</code> <strong>方法</strong>，代码如下 ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean supports(Object handler) &#123;</div><div class="line">return WebHandler.class.isAssignableFrom(handler.getClass());</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>支持 WebHandler 。</li></ul><hr><p><code>#handle(ServerWebExchange, Object)</code> <strong>方法</strong>，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">2</span>: <span class="function"><span class="keyword">public</span> Mono&lt;HandlerResult&gt; <span class="title">handle</span><span class="params">(ServerWebExchange exchange, Object handler)</span> </span>&#123;</div><div class="line"><span class="number">3</span>: WebHandler webHandler = (WebHandler) handler;</div><div class="line"><span class="number">4</span>: Mono&lt;Void&gt; mono = webHandler.handle(exchange);</div><div class="line"><span class="number">5</span>: <span class="keyword">return</span> mono.then(Mono.empty());</div><div class="line"><span class="number">6</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 3 至 4 行 ：调用 <code>WebHandler#handle(ServerWebExchange)</code> 方法，执行处理器。例如，<strong>WebHandler 为 FilteringWebHandler 时，获得 Route 的 GatewayFilter 数组，创建 GatewayFilterChain 处理请求</strong>。</li><li>第 5 行 ：在 WebHandler <strong>执行完后</strong> ( <code>#then(Mongo)</code> )，然后返回 <code>Mono.empty()</code> 。</li></ul><h1 id="3-RoutePredicateHandlerMapping"><a href="#3-RoutePredicateHandlerMapping" class="headerlink" title="3. RoutePredicateHandlerMapping"></a>3. RoutePredicateHandlerMapping</h1><p><code>org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping</code> ，匹配 Route ，并返回处理 Route 的 FilteringWebHandler 。</p><p>RoutePredicateHandlerMapping <strong>构造方法</strong>，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutePredicateHandlerMapping</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMapping</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> FilteringWebHandler webHandler;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> RouteLocator routeLocator;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">RoutePredicateHandlerMapping</span><span class="params">(FilteringWebHandler webHandler, RouteLocator routeLocator)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.webHandler = webHandler;</div><div class="line"><span class="keyword">this</span>.routeLocator = routeLocator;</div><div class="line"></div><div class="line">setOrder(<span class="number">1</span>); <span class="comment">// RequestMappingHandlerMapping 之后</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用 <code>#setOrder(1)</code> 的原因，Spring Cloud Gateway 的 GatewayWebfluxEndpoint 提供 HTTP API ，不需要经过网关，它通过 RequestMappingHandlerMapping 进行请求匹配处理。RequestMappingHandlerMapping 的 <code>order = 0</code> ，需要排在 RoutePredicateHandlerMapping 前面。所有，RoutePredicateHandlerMapping 设置 <code>order = 1</code> 。</li></ul><hr><p><code>#getHandlerInternal()</code> 方法，在 <code>DispatcherHandler#handle(ServerWebExchange)</code> 方法的【<strong>第 19 行</strong>】被调用，匹配 Route ，并返回处理 Route 的 FilteringWebHandler 。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="keyword">protected</span> Mono&lt;?&gt; getHandlerInternal(ServerWebExchange exchange) &#123;</div><div class="line"> <span class="number">3</span>:     <span class="comment">// 设置 GATEWAY_HANDLER_MAPPER_ATTR 为 RoutePredicateHandlerMapping</span></div><div class="line"> <span class="number">4</span>: exchange.getAttributes().put(GATEWAY_HANDLER_MAPPER_ATTR, getClass().getSimpleName());</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="keyword">return</span> lookupRoute(exchange) <span class="comment">// 匹配 Route</span></div><div class="line"> <span class="number">7</span>: <span class="comment">// .log("route-predicate-handler-mapping", Level.FINER) //name this</span></div><div class="line"> <span class="number">8</span>: .flatMap((Function&lt;Route, Mono&lt;?&gt;&gt;) r -&gt; &#123; <span class="comment">// 返回 FilteringWebHandler</span></div><div class="line"> <span class="number">9</span>: <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line"><span class="number">10</span>: logger.debug(<span class="string">"Mapping ["</span> + getExchangeDesc(exchange) + <span class="string">"] to "</span> + r);</div><div class="line"><span class="number">11</span>: &#125;</div><div class="line"><span class="number">12</span>: </div><div class="line"><span class="number">13</span>: <span class="comment">// 设置 GATEWAY_ROUTE_ATTR 为 匹配的 Route</span></div><div class="line"><span class="number">14</span>: exchange.getAttributes().put(GATEWAY_ROUTE_ATTR, r);</div><div class="line"><span class="number">15</span>: <span class="comment">// 返回</span></div><div class="line"><span class="number">16</span>: <span class="keyword">return</span> Mono.just(webHandler);</div><div class="line"><span class="number">17</span>: &#125;).switchIfEmpty(Mono.empty().then(Mono.fromRunnable(() -&gt; &#123; <span class="comment">// 匹配不到 Route</span></div><div class="line"><span class="number">18</span>: <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line"><span class="number">19</span>: logger.trace(<span class="string">"No RouteDefinition found for ["</span> + getExchangeDesc(exchange) + <span class="string">"]"</span>);</div><div class="line"><span class="number">20</span>: &#125;</div><div class="line"><span class="number">21</span>: &#125;)));</div><div class="line"><span class="number">22</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 4 行 ：设置 <code>GATEWAY_HANDLER_MAPPER_ATTR</code> 为 RoutePredicateHandlerMapping 。</li><li>第 6 行 ：调用 <code>#lookupRoute(ServerWebExchange)</code> 方法，匹配 Route 。</li><li>第 8 至 16 行 ：返回 Route 的处理器 FilteringWebHandler 。<ul><li>第 14 行 ：设置 <code>GATEWAY_ROUTE_ATTR</code> 为<strong>匹配</strong>的 Route 。</li><li>第 16 行 ：返回 FilteringWebHandler。</li></ul></li><li>第 17 至 21 行 ：<strong>匹配不到</strong> Route ，返回 <code>Mono.empty()</code> ，即不返回处理器。<strong>这样会不会有问题</strong>？不会，在 <code>DispatcherHandler#handle(ServerWebExchange)</code> 方法的【<strong>第 21 行</strong>】，我们可以看到，当没有合适的 Handler ，返回 <code>Mono.error(HANDLER_NOT_FOUND_EXCEPTION)</code> 。</li></ul><hr><p><code>#lookupRoute(ServerWebExchange)</code> 方法，<strong>顺序</strong>匹配 Route 。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">protected</span> Mono&lt;Route&gt; <span class="title">lookupRoute</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: <span class="keyword">return</span> <span class="keyword">this</span>.routeLocator.getRoutes()</div><div class="line"> <span class="number">3</span>: .filter(route -&gt; route.getPredicate().test(exchange))</div><div class="line"> <span class="number">4</span>: .next()</div><div class="line"> <span class="number">5</span>: <span class="comment">//<span class="doctag">TODO:</span> error handling</span></div><div class="line"> <span class="number">6</span>: .map(route -&gt; &#123;</div><div class="line"> <span class="number">7</span>: <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line"> <span class="number">8</span>: logger.debug(<span class="string">"RouteDefinition matched: "</span> + route.getId());</div><div class="line"> <span class="number">9</span>: &#125;</div><div class="line"><span class="number">10</span>: validateRoute(route, exchange);</div><div class="line"><span class="number">11</span>: <span class="keyword">return</span> route;</div><div class="line"><span class="number">12</span>: &#125;);</div><div class="line"><span class="number">13</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 2 至 4 行 ：调用 <code>RouteLocator#getRoutes()</code> 方法，获得全部 Route ，并调用 <code>Predicate#test(ServerWebExchange)</code> 方法，<strong>顺序</strong>匹配<strong>一个</strong> Route。</li><li>第 5 行 ：未来会增加匹配过程中发生异常的处理。目前，任何一个 <code>Predicate#test(ServerWebExchange)</code> 的方法调用发生异常时，都会导致匹配不到 Route 。<strong>一定要注意</strong>。</li><li>第 6 至 11 行 ：调用 <code>#validateRoute(Route, ServerWebExchange)</code> 方法，校验 Route 的有效性。目前该方法是个<strong>空方法</strong>，可以通过继承 RoutePredicateHandlerMapping 进行覆盖重写。</li></ul><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>一不小心简单写了下 WebFlux 的 DispatcherHandler 的源码解析，嘿嘿嘿。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_20/04.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-handler-mapping/&quot;&gt;http://www.iocoder.cn/Spring-Cloud
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 处理器 (3.1) 之 RoutePredicateFactory  路由谓语工厂</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">2. RoutePredicateFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">3. AfterRoutePredicateFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">4. BeforeRoutePredicateFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">5. BetweenRoutePredicateFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">6. CookieRoutePredicateFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">7. HeaderRoutePredicateFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">8. HostRoutePredicateFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">9. MethodRoutePredicateFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">10. PathRoutePredicateFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">11. QueryRoutePredicateFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">12. RemoteAddrRoutePredicateFactory</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>RoutePredicateFactory 路由谓语工厂</strong>。</p><p>RoutePredicateFactory 涉及到的类在 <code>org.springframework.cloud.gateway.handler.predicate</code> 包下，如下图 ：</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_15/01.png" alt=""></p><p>Spring Cloud Gateway 创建 Route 对象时，使用 RoutePredicateFactory 创建 Predicate 对象。Predicate 对象可以赋值给 <a href="https://github.com/YunaiV/spring-cloud-gateway/blob/6bb8d6f93c289fd3a84c802ada60dd2bb57e1fb7/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/route/Route.java#L51" rel="external nofollow noopener noreferrer" target="_blank"><code>Route.predicate</code></a> 属性，用于匹配<strong>请求</strong>对应的 Route 。</p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-RoutePredicateFactory"><a href="#2-RoutePredicateFactory" class="headerlink" title="2. RoutePredicateFactory"></a>2. RoutePredicateFactory</h1><p><code>org.springframework.cloud.gateway.handler.predicate.RoutePredicateFactory</code> ， 路由谓语工厂<strong>接口</strong>。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoutePredicateFactory</span> <span class="keyword">extends</span> <span class="title">ArgumentHints</span> </span>&#123;</div><div class="line"></div><div class="line">    String PATTERN_KEY = <span class="string">"pattern"</span>;</div><div class="line"></div><div class="line"><span class="function">Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Tuple args)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">default</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> NameUtils.normalizePredicateName(getClass());</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>#name()</code> <strong>默认</strong>方法，调用 <code>NameUtils#normalizePredicateName(Class)</code> 方法，获得 RoutePredicateFactory 的名字。该方法截取类名<strong>前半段</strong>，例如 QueryRoutePredicateFactory 的结果为 <code>Query</code> 。点击 <a href="https://github.com/YunaiV/spring-cloud-gateway/blob/6bb8d6f93c289fd3a84c802ada60dd2bb57e1fb7/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/support/NameUtils.java#L33" rel="external nofollow noopener noreferrer" target="_blank">链接</a> 查看该方法。</li><li><code>#apply()</code> <strong>接口</strong>方法，创建 Predicate 。</li><li>继承 <code>org.springframework.cloud.gateway.support.ArgumentHints</code> <strong>接口</strong> ，在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/?self">《Spring-Cloud-Gateway 源码解析 —— 路由（2.2）之 RouteDefinitionRouteLocator 路由配置》「2.4 获得 Tuple」</a> 有使用到它的代码。</li></ul><hr><p>RoutePredicateFactory <strong>实现类</strong>如下图 ：</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_15/02.png" alt=""></p><p>下面我们一个一个 RoutePredicateFactory 实现类理解。代码比较多，实际也比较简单。</p><p>另外，<code>org.springframework.cloud.gateway.handler.predicate.RoutePredicates</code> ，RoutePredicates <strong>工厂</strong>，其调用 RoutePredicateFactory 接口的<strong>实现类</strong>，创建各种 Predicate 。</p><h1 id="3-AfterRoutePredicateFactory"><a href="#3-AfterRoutePredicateFactory" class="headerlink" title="3. AfterRoutePredicateFactory"></a>3. AfterRoutePredicateFactory</h1><ul><li>Route 匹配 ：请求<strong>时间</strong>满足在配置时间<strong>之后</strong>。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">after_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span></div></pre></td></tr></table></figure></li><li><p>RoutePredicates 方法 ：<a href="https://github.com/YunaiV/spring-cloud-gateway/blob/6bb8d6f93c289fd3a84c802ada60dd2bb57e1fb7/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/handler/predicate/RoutePredicates.java#L40" rel="external nofollow noopener noreferrer" target="_blank">#after(ZonedDateTime)</a> 。</p></li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterRoutePredicateFactory</span> <span class="keyword">implements</span> <span class="title">RoutePredicateFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATETIME_KEY = <span class="string">"datetime"</span>;</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">6</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">7</span>: <span class="keyword">return</span> Collections.singletonList(DATETIME_KEY);</div><div class="line"> <span class="number">8</span>: &#125;</div><div class="line"> <span class="number">9</span>: </div><div class="line"><span class="number">10</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">11</span>: <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">12</span>: Object value = args.getValue(DATETIME_KEY);</div><div class="line"><span class="number">13</span>: <span class="keyword">final</span> ZonedDateTime dateTime = BetweenRoutePredicateFactory.getZonedDateTime(value);</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>: <span class="keyword">return</span> exchange -&gt; &#123;</div><div class="line"><span class="number">16</span>: <span class="keyword">final</span> ZonedDateTime now = ZonedDateTime.now();</div><div class="line"><span class="number">17</span>: <span class="keyword">return</span> now.isAfter(dateTime);</div><div class="line"><span class="number">18</span>: &#125;;</div><div class="line"><span class="number">19</span>: &#125;</div><div class="line"><span class="number">20</span>: </div><div class="line"><span class="number">21</span>: &#125;</div></pre></td></tr></table></figure><ul><li>Tulpe 参数 ：<code>datetime</code> 。</li><li>第 13 行 ：调用 <code>BetweenRoutePredicateFactory#getZonedDateTime(value)</code> 方法，解析配置的时间值，在 <a href="#">「5. BetweenRoutePredicateFactory」</a> 详细解析。</li></ul></li></ul><h1 id="4-BeforeRoutePredicateFactory"><a href="#4-BeforeRoutePredicateFactory" class="headerlink" title="4. BeforeRoutePredicateFactory"></a>4. BeforeRoutePredicateFactory</h1><ul><li>Route 匹配 ：请求<strong>时间</strong>满足在配置时间<strong>之前</strong>。</li><li>RoutePredicates 方法 ：<a href="https://github.com/YunaiV/spring-cloud-gateway/blob/6bb8d6f93c289fd3a84c802ada60dd2bb57e1fb7/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/handler/predicate/RoutePredicates.java#L44" rel="external nofollow noopener noreferrer" target="_blank">#before(ZonedDateTime)</a> 。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">before_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Before=2017-01-20T17:42:47.789-07:00[America/Denver]</span></div></pre></td></tr></table></figure></li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeRoutePredicateFactory</span> <span class="keyword">implements</span> <span class="title">RoutePredicateFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATETIME_KEY = <span class="string">"datetime"</span>;</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">6</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">7</span>: <span class="keyword">return</span> Collections.singletonList(DATETIME_KEY);</div><div class="line"> <span class="number">8</span>: &#125;</div><div class="line"> <span class="number">9</span>: </div><div class="line"><span class="number">10</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">11</span>: <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">12</span>: Object value = args.getValue(DATETIME_KEY);</div><div class="line"><span class="number">13</span>: <span class="keyword">final</span> ZonedDateTime dateTime = BetweenRoutePredicateFactory.getZonedDateTime(value);</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>: <span class="keyword">return</span> exchange -&gt; &#123;</div><div class="line"><span class="number">16</span>: <span class="keyword">final</span> ZonedDateTime now = ZonedDateTime.now();</div><div class="line"><span class="number">17</span>: <span class="keyword">return</span> now.isBefore(dateTime);</div><div class="line"><span class="number">18</span>: &#125;;</div><div class="line"><span class="number">19</span>: &#125;</div><div class="line"><span class="number">20</span>: </div><div class="line"><span class="number">21</span>: &#125;</div></pre></td></tr></table></figure><ul><li>Tulpe 参数 ：<code>datetime</code> 。</li><li>第 13 行 ：调用 <code>BetweenRoutePredicateFactory#getZonedDateTime(value)</code> 方法，解析配置的时间值，在 <a href="#">「5. BetweenRoutePredicateFactory」</a> 详细解析。</li></ul></li></ul><h1 id="5-BetweenRoutePredicateFactory"><a href="#5-BetweenRoutePredicateFactory" class="headerlink" title="5. BetweenRoutePredicateFactory"></a>5. BetweenRoutePredicateFactory</h1><ul><li>Route 匹配 ：请求<strong>时间</strong>满足在配置时间<strong>之间</strong>。</li><li>RoutePredicates 方法 ：<a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/handler/predicate/RoutePredicates.java#L48" rel="external nofollow noopener noreferrer" target="_blank"><code>#between(ZonedDateTime, ZonedDateTime)</code></a> 。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">between_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Betweeen=2017-01-20T17:42:47.789-07:00[America/Denver],</span> <span class="number">2017</span><span class="bullet">-01</span><span class="bullet">-21</span><span class="attr">T17:42:47.789-07:00[America/Denver]</span></div></pre></td></tr></table></figure></li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BetweenRoutePredicateFactory</span> <span class="keyword">implements</span> <span class="title">RoutePredicateFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATETIME1_KEY = <span class="string">"datetime1"</span>;</div><div class="line"> <span class="number">4</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATETIME2_KEY = <span class="string">"datetime2"</span>;</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">7</span>: <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"> <span class="number">8</span>: <span class="comment">//<span class="doctag">TODO:</span> is ZonedDateTime the right thing to use?</span></div><div class="line"> <span class="number">9</span>: <span class="keyword">final</span> ZonedDateTime dateTime1 = getZonedDateTime(args.getValue(DATETIME1_KEY));</div><div class="line"><span class="number">10</span>: <span class="keyword">final</span> ZonedDateTime dateTime2 = getZonedDateTime(args.getValue(DATETIME2_KEY));</div><div class="line"><span class="number">11</span>: Assert.isTrue(dateTime1.isBefore(dateTime2), args.getValue(DATETIME1_KEY) +</div><div class="line"><span class="number">12</span>: <span class="string">" must be before "</span> + args.getValue(DATETIME2_KEY));</div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>: <span class="keyword">return</span> exchange -&gt; &#123;</div><div class="line"><span class="number">15</span>: <span class="keyword">final</span> ZonedDateTime now = ZonedDateTime.now();</div><div class="line"><span class="number">16</span>: <span class="keyword">return</span> now.isAfter(dateTime1) &amp;&amp; now.isBefore(dateTime2);</div><div class="line"><span class="number">17</span>: &#125;;</div><div class="line"><span class="number">18</span>: &#125;</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title">getZonedDateTime</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line"><span class="number">21</span>: ZonedDateTime dateTime;</div><div class="line"><span class="number">22</span>: <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ZonedDateTime) &#123;</div><div class="line"><span class="number">23</span>: dateTime = ZonedDateTime.class.cast(value);</div><div class="line"><span class="number">24</span>: &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">25</span>: dateTime = parseZonedDateTime(value.toString());</div><div class="line"><span class="number">26</span>: &#125;</div><div class="line"><span class="number">27</span>: <span class="keyword">return</span> dateTime;</div><div class="line"><span class="number">28</span>: &#125;</div><div class="line"><span class="number">29</span>: </div><div class="line"><span class="number">30</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title">parseZonedDateTime</span><span class="params">(String dateString)</span> </span>&#123;</div><div class="line"><span class="number">31</span>: ZonedDateTime dateTime;</div><div class="line"><span class="number">32</span>: <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">33</span>: <span class="comment">// 数字</span></div><div class="line"><span class="number">34</span>: <span class="keyword">long</span> epoch = Long.parseLong(dateString);</div><div class="line"><span class="number">35</span>: dateTime = Instant.ofEpochMilli(epoch).atOffset(ZoneOffset.ofTotalSeconds(<span class="number">0</span>))</div><div class="line"><span class="number">36</span>: .toZonedDateTime();</div><div class="line"><span class="number">37</span>: &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line"><span class="number">38</span>: <span class="comment">// 字符串</span></div><div class="line"><span class="number">39</span>: <span class="comment">// try ZonedDateTime instead</span></div><div class="line"><span class="number">40</span>: dateTime = ZonedDateTime.parse(dateString);</div><div class="line"><span class="number">41</span>: &#125;</div><div class="line"><span class="number">42</span>: </div><div class="line"><span class="number">43</span>: <span class="keyword">return</span> dateTime;</div><div class="line"><span class="number">44</span>: &#125;</div><div class="line"><span class="number">45</span>: </div><div class="line"><span class="number">46</span>: &#125;</div></pre></td></tr></table></figure><ul><li>Tulpe 参数 ：<code>datetime1</code> / <code>datetime2</code> 。</li><li>第 20 至 44 行 ：解析配置的时间值 。<ul><li>第 22 至 23 行 ：当值类型为 <strong>ZonedDateTime</strong> 。主要使用 Java / Kotlin 配置 Route 时，例如 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/handler/predicate/RoutePredicates.java#L48" rel="external nofollow noopener noreferrer" target="_blank"><code>RoutePredicates#between(ZonedDateTime, ZonedDateTime)</code></a> 。 </li><li>第 33 至 36 行 ：当值类型为 <strong>Long</strong> 。例如配置文件 <code>1511795602765</code>。</li><li>当 38 至 41 行 ：当值类型为 <strong>String</strong> 。例如配置文件里 <code>2017-01-20T17:42:47.789-07:00[America/Denver]</code> 。</li></ul></li></ul></li></ul><h1 id="6-CookieRoutePredicateFactory"><a href="#6-CookieRoutePredicateFactory" class="headerlink" title="6. CookieRoutePredicateFactory"></a>6. CookieRoutePredicateFactory</h1><ul><li>Route 匹配 ：请求<strong>指定 Cookie</strong> 正则匹配<strong>指定值</strong>。</li><li>RoutePredicates 方法 ：<a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/handler/predicate/RoutePredicates.java#L48" rel="external nofollow noopener noreferrer" target="_blank"><code>#cookie(String， String)</code></a> 。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">cookie_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Cookie=chocolate,</span> <span class="string">ch.p</span></div></pre></td></tr></table></figure></li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieRoutePredicateFactory</span> <span class="keyword">implements</span> <span class="title">RoutePredicateFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_KEY = <span class="string">"name"</span>;</div><div class="line"> <span class="number">4</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEXP_KEY = <span class="string">"regexp"</span>;</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">7</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">8</span>: <span class="keyword">return</span> Arrays.asList(NAME_KEY, REGEXP_KEY);</div><div class="line"> <span class="number">9</span>: &#125;</div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">13</span>: String name = args.getString(NAME_KEY);</div><div class="line"><span class="number">14</span>: String regexp = args.getString(REGEXP_KEY);</div><div class="line"><span class="number">15</span>: </div><div class="line"><span class="number">16</span>: <span class="keyword">return</span> exchange -&gt; &#123;</div><div class="line"><span class="number">17</span>: List&lt;HttpCookie&gt; cookies = exchange.getRequest().getCookies().get(name);</div><div class="line"><span class="number">18</span>: <span class="keyword">for</span> (HttpCookie cookie : cookies) &#123;</div><div class="line"><span class="number">19</span>: <span class="comment">// 正则匹配</span></div><div class="line"><span class="number">20</span>: <span class="keyword">if</span> (cookie.getValue().matches(regexp)) &#123;</div><div class="line"><span class="number">21</span>: <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">22</span>: &#125;</div><div class="line"><span class="number">23</span>: &#125;</div><div class="line"><span class="number">24</span>: <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">25</span>: &#125;;</div><div class="line"><span class="number">26</span>: &#125;</div><div class="line"><span class="number">27</span>: &#125;</div></pre></td></tr></table></figure><ul><li>Tulpe 参数 ：<code>name</code> / <code>regexp</code> 。</li><li>第 20 行 ：指定 Cookie 正则匹配<strong>指定值</strong>。</li></ul></li></ul><h1 id="7-HeaderRoutePredicateFactory"><a href="#7-HeaderRoutePredicateFactory" class="headerlink" title="7. HeaderRoutePredicateFactory"></a>7. HeaderRoutePredicateFactory</h1><ul><li>Route 匹配 ：请求<strong>指定 Cookie</strong> 正则匹配<strong>指定值</strong>。</li><li>RoutePredicates 方法 ：<a href="https://github.com/YunaiV/spring-cloud-gateway/blob/6bb8d6f93c289fd3a84c802ada60dd2bb57e1fb7/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/handler/predicate/RoutePredicates.java#L58" rel="external nofollow noopener noreferrer" target="_blank"><code>#header(String， String)</code></a> 。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">header_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></div></pre></td></tr></table></figure></li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderRoutePredicateFactory</span> <span class="keyword">implements</span> <span class="title">RoutePredicateFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_KEY = <span class="string">"header"</span>;</div><div class="line"> <span class="number">4</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEXP_KEY = <span class="string">"regexp"</span>;</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">7</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">8</span>: <span class="keyword">return</span> Arrays.asList(HEADER_KEY, REGEXP_KEY);</div><div class="line"> <span class="number">9</span>: &#125;</div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">13</span>: String header = args.getString(HEADER_KEY);</div><div class="line"><span class="number">14</span>: String regexp = args.getString(REGEXP_KEY);</div><div class="line"><span class="number">15</span>: </div><div class="line"><span class="number">16</span>: <span class="keyword">return</span> exchange -&gt; &#123;</div><div class="line"><span class="number">17</span>: List&lt;String&gt; values = exchange.getRequest().getHeaders().get(header);</div><div class="line"><span class="number">18</span>: <span class="keyword">for</span> (String value : values) &#123;</div><div class="line"><span class="number">19</span>: <span class="comment">// 正则匹配</span></div><div class="line"><span class="number">20</span>: <span class="keyword">if</span> (value.matches(regexp)) &#123;</div><div class="line"><span class="number">21</span>: <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">22</span>: &#125;</div><div class="line"><span class="number">23</span>: &#125;</div><div class="line"><span class="number">24</span>: <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">25</span>: &#125;;</div><div class="line"><span class="number">26</span>: &#125;</div><div class="line"><span class="number">27</span>: &#125;</div></pre></td></tr></table></figure><ul><li>Tulpe 参数 ：<code>header</code> / <code>regexp</code> 。</li><li>第 20 行 ：指定 Header 正则匹配<strong>指定值</strong>。</li></ul></li></ul><h1 id="8-HostRoutePredicateFactory"><a href="#8-HostRoutePredicateFactory" class="headerlink" title="8. HostRoutePredicateFactory"></a>8. HostRoutePredicateFactory</h1><ul><li>Route 匹配 ：请求 <strong>Host</strong> 匹配<strong>指定值</strong>。</li><li>RoutePredicates 方法 ：<a href="https://github.com/YunaiV/spring-cloud-gateway/blob/6bb8d6f93c289fd3a84c802ada60dd2bb57e1fb7/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/handler/predicate/RoutePredicates.java#L63" rel="external nofollow noopener noreferrer" target="_blank"><code>#host(String)</code></a> 。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">host_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Host=**.somehost.org</span></div></pre></td></tr></table></figure></li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostRoutePredicateFactory</span> <span class="keyword">implements</span> <span class="title">RoutePredicateFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">private</span> PathMatcher pathMatcher = <span class="keyword">new</span> AntPathMatcher(<span class="string">"."</span>);</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPathMatcher</span><span class="params">(PathMatcher pathMatcher)</span> </span>&#123;</div><div class="line"> <span class="number">6</span>: <span class="keyword">this</span>.pathMatcher = pathMatcher;</div><div class="line"> <span class="number">7</span>: &#125;</div><div class="line"> <span class="number">8</span>: </div><div class="line"> <span class="number">9</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">10</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">11</span>: <span class="keyword">return</span> Collections.singletonList(PATTERN_KEY);</div><div class="line"><span class="number">12</span>: &#125;</div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">15</span>: <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">16</span>: String pattern = args.getString(PATTERN_KEY);</div><div class="line"><span class="number">17</span>: </div><div class="line"><span class="number">18</span>: <span class="keyword">return</span> exchange -&gt; &#123;</div><div class="line"><span class="number">19</span>: String host = exchange.getRequest().getHeaders().getFirst(<span class="string">"Host"</span>);</div><div class="line"><span class="number">20</span>: <span class="comment">// 匹配</span></div><div class="line"><span class="number">21</span>: <span class="keyword">return</span> <span class="keyword">this</span>.pathMatcher.match(pattern, host);</div><div class="line"><span class="number">22</span>: &#125;;</div><div class="line"><span class="number">23</span>: &#125;</div><div class="line"><span class="number">24</span>: &#125;</div></pre></td></tr></table></figure><ul><li>Tulpe 参数 ：<code>pattern</code> 。</li><li><code>pathMatcher</code> 属性，路径匹配器，默认使用 <code>org.springframework.util.AntPathMatcher</code> 。通过 <code>#setPathMatcher(PathMatcher)</code> 方法，可以重新设置。</li><li>第 21 行 ：请求<strong>路径</strong> 匹配<strong>指定值</strong>。</li></ul></li></ul><h1 id="9-MethodRoutePredicateFactory"><a href="#9-MethodRoutePredicateFactory" class="headerlink" title="9. MethodRoutePredicateFactory"></a>9. MethodRoutePredicateFactory</h1><ul><li>Route 匹配 ：请求 <strong>Method</strong> 匹配<strong>指定值</strong>。</li><li>RoutePredicates 方法 ：<a href="https://github.com/YunaiV/spring-cloud-gateway/blob/6bb8d6f93c289fd3a84c802ada60dd2bb57e1fb7/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/handler/predicate/RoutePredicates.java#L67" rel="external nofollow noopener noreferrer" target="_blank"><code>#method(String)</code></a> 。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">method_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Method=GET</span></div></pre></td></tr></table></figure></li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodRoutePredicateFactory</span> <span class="keyword">implements</span> <span class="title">RoutePredicateFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_KEY = <span class="string">"method"</span>;</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">6</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">7</span>: <span class="keyword">return</span> Arrays.asList(METHOD_KEY);</div><div class="line"> <span class="number">8</span>: &#125;</div><div class="line"> <span class="number">9</span>: </div><div class="line"><span class="number">10</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">11</span>: <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">12</span>: String method = args.getString(METHOD_KEY);</div><div class="line"><span class="number">13</span>: <span class="keyword">return</span> exchange -&gt; &#123;</div><div class="line"><span class="number">14</span>: HttpMethod requestMethod = exchange.getRequest().getMethod();</div><div class="line"><span class="number">15</span>: <span class="comment">// 正则匹配</span></div><div class="line"><span class="number">16</span>: <span class="keyword">return</span> requestMethod.matches(method);</div><div class="line"><span class="number">17</span>: &#125;;</div><div class="line"><span class="number">18</span>: &#125;</div><div class="line"><span class="number">19</span>: &#125;</div></pre></td></tr></table></figure><ul><li>Tulpe 参数 ：<code>method</code> 。</li><li>第 16 行 ：请求 <strong>Method</strong> 匹配<strong>指定值</strong>。</li></ul></li></ul><h1 id="10-PathRoutePredicateFactory"><a href="#10-PathRoutePredicateFactory" class="headerlink" title="10. PathRoutePredicateFactory"></a>10. PathRoutePredicateFactory</h1><ul><li>Route 匹配 ：请求 <strong>Path</strong> 匹配<strong>指定值</strong>。</li><li>RoutePredicates 方法 ：<a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/handler/predicate/RoutePredicates.java#L71" rel="external nofollow noopener noreferrer" target="_blank"><code>#path(String, String)</code></a> 。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">host_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Path=/foo/&#123;segment&#125;</span></div></pre></td></tr></table></figure></li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathRoutePredicateFactory</span> <span class="keyword">implements</span> <span class="title">RoutePredicateFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">private</span> PathPatternParser pathPatternParser = <span class="keyword">new</span> PathPatternParser();</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPathPatternParser</span><span class="params">(PathPatternParser pathPatternParser)</span> </span>&#123;</div><div class="line"> <span class="number">6</span>: <span class="keyword">this</span>.pathPatternParser = pathPatternParser;</div><div class="line"> <span class="number">7</span>: &#125;</div><div class="line"> <span class="number">8</span>: </div><div class="line"> <span class="number">9</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">10</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">11</span>: <span class="keyword">return</span> Collections.singletonList(PATTERN_KEY);</div><div class="line"><span class="number">12</span>: &#125;</div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">15</span>: <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">16</span>:     <span class="comment">// 解析 Path ，创建对应的 PathPattern</span></div><div class="line"><span class="number">17</span>: String unparsedPattern = args.getString(PATTERN_KEY);</div><div class="line"><span class="number">18</span>: PathPattern pattern;</div><div class="line"><span class="number">19</span>: <span class="keyword">synchronized</span> (<span class="keyword">this</span>.pathPatternParser) &#123;</div><div class="line"><span class="number">20</span>: pattern = <span class="keyword">this</span>.pathPatternParser.parse(unparsedPattern);</div><div class="line"><span class="number">21</span>: &#125;</div><div class="line"><span class="number">22</span>: </div><div class="line"><span class="number">23</span>: <span class="keyword">return</span> exchange -&gt; &#123;</div><div class="line"><span class="number">24</span>: PathContainer path = parsePath(exchange.getRequest().getURI().getPath());</div><div class="line"><span class="number">25</span>: </div><div class="line"><span class="number">26</span>: <span class="comment">// 匹配</span></div><div class="line"><span class="number">27</span>: <span class="keyword">boolean</span> match = pattern.matches(path);</div><div class="line"><span class="number">28</span>: traceMatch(<span class="string">"Pattern"</span>, pattern.getPatternString(), path, match);</div><div class="line"><span class="number">29</span>: <span class="keyword">if</span> (match) &#123;</div><div class="line"><span class="number">30</span>: <span class="comment">// 解析 路径参数，例如 path=/foo/123 &lt;=&gt; /foo/&#123;segment&#125;</span></div><div class="line"><span class="number">31</span>: PathMatchInfo uriTemplateVariables = pattern.matchAndExtract(path);</div><div class="line"><span class="number">32</span>: exchange.getAttributes().put(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables);</div><div class="line"><span class="number">33</span>: <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">34</span>: &#125;</div><div class="line"><span class="number">35</span>: <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">36</span>: <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">37</span>: &#125;</div><div class="line"><span class="number">38</span>: &#125;;</div><div class="line"><span class="number">39</span>: &#125;</div><div class="line"><span class="number">40</span>: &#125;</div></pre></td></tr></table></figure><ul><li>Tulpe 参数 ：<code>pattern</code> 。</li><li><code>pathPatternParser</code> 属性，路径模式解析器。</li><li>第 17 至 21 行 ：解析<strong>配置</strong>的 Path ，创建对应的 PathPattern 。考虑到解析过程中的<strong>线程安全</strong>，此处使用 <code>synchronized</code> 修饰符，详见 <a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/util/pattern/PathPatternParser.java#L99" rel="external nofollow noopener noreferrer" target="_blank"><code>PathPatternParser#parse(String)</code></a> 方法的注释。</li><li>第 24 至 27 行 ：解析<strong>请求</strong>的 Path ，匹配<strong>配置</strong>的 Path 。</li><li><p>第 30 至 32 行 ：解析<strong>路径参数</strong>，设置到 <code>ServerWebExchange.attributes</code> 属性中，提供给后续的 GatewayFilter 使用。举个例子，当配置的 Path 为 <code>/foo/{segment}</code> ，请求的 Path 为 <code>/foo/123</code> ，在此处打断点，结果如下图 ：<img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_15/03.png" alt=""></p><blockquote><p>FROM <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/docs/src/main/asciidoc/spring-cloud-gateway.adoc#path-route-predicate-factory" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud Gateway》</a><br>This predicate extracts the URI template variables (like <code>segment</code> defined in the example above) as a map of names and values and places it in the <code>ServerWebExchange.getAttributes()</code> with a key defined in <code>PathRoutePredicate.URL_PREDICATE_VARS_ATTR</code>. Those values are then available for use by <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/docs/src/main/asciidoc/spring-cloud-gateway.adoc#setpath-gatewayfilter-factory" rel="external nofollow noopener noreferrer" target="_blank">GatewayFilter Factories</a></p></blockquote></li></ul></li></ul><h1 id="11-QueryRoutePredicateFactory"><a href="#11-QueryRoutePredicateFactory" class="headerlink" title="11. QueryRoutePredicateFactory"></a>11. QueryRoutePredicateFactory</h1><ul><li>Route 匹配 ：请求 <strong>QueryParam</strong> 匹配<strong>指定值</strong>。</li><li>RoutePredicates 方法 ：<a href="https://github.com/YunaiV/spring-cloud-gateway/blob/6bb8d6f93c289fd3a84c802ada60dd2bb57e1fb7/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/handler/predicate/RoutePredicates.java#L75" rel="external nofollow noopener noreferrer" target="_blank"><code>#query(String, String)</code></a> 。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">query_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Query=baz</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Query=foo,</span> <span class="string">ba.</span></div></pre></td></tr></table></figure></li><li><p>代码 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryRoutePredicateFactory</span> <span class="keyword">implements</span> <span class="title">RoutePredicateFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PARAM_KEY = <span class="string">"param"</span>;</div><div class="line"> <span class="number">4</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEXP_KEY = <span class="string">"regexp"</span>;</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">7</span>: <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">argNames</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">8</span>: <span class="keyword">return</span> Arrays.asList(PARAM_KEY, REGEXP_KEY);</div><div class="line"> <span class="number">9</span>: &#125;</div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateArgs</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">13</span>: <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">14</span>: &#125;</div><div class="line"><span class="number">15</span>: </div><div class="line"><span class="number">16</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">17</span>: <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"><span class="number">18</span>: validateMin(<span class="number">1</span>, args);</div><div class="line"><span class="number">19</span>: String param = args.getString(PARAM_KEY);</div><div class="line"><span class="number">20</span>: </div><div class="line"><span class="number">21</span>: <span class="keyword">return</span> exchange -&gt; &#123;</div><div class="line"><span class="number">22</span>:     <span class="comment">// 包含 参数</span></div><div class="line"><span class="number">23</span>: <span class="keyword">if</span> (!args.hasFieldName(REGEXP_KEY)) &#123;</div><div class="line"><span class="number">24</span>: <span class="comment">// check existence of header</span></div><div class="line"><span class="number">25</span>: <span class="keyword">return</span> exchange.getRequest().getQueryParams().containsKey(param);</div><div class="line"><span class="number">26</span>: &#125;</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>: <span class="comment">// 正则匹配 参数</span></div><div class="line"><span class="number">29</span>: String regexp = args.getString(REGEXP_KEY);</div><div class="line"><span class="number">30</span>: List&lt;String&gt; values = exchange.getRequest().getQueryParams().get(param);</div><div class="line"><span class="number">31</span>: <span class="keyword">for</span> (String value : values) &#123;</div><div class="line"><span class="number">32</span>: <span class="keyword">if</span> (value.matches(regexp)) &#123;</div><div class="line"><span class="number">33</span>: <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">34</span>: &#125;</div><div class="line"><span class="number">35</span>: &#125;</div><div class="line"><span class="number">36</span>: <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">37</span>: &#125;;</div><div class="line"><span class="number">38</span>: &#125;</div><div class="line"><span class="number">39</span>: &#125;</div></pre></td></tr></table></figure><ul><li>Tulpe 参数 ：<code>param</code> ( 必填 ) / <code>regexp</code> ( 选填 ) 。</li><li>第 18 行 ：调用 <code>#validateMin(...)</code> 方法，校验参数数量至少为 <code>1</code> ，即 <code>param</code> 非空 。</li><li>第 22 至 26 行 ：当 <code>regexp</code> 为空时，校验 <code>param</code> 对应的 <code>QueryParam</code> 存在。</li><li>第 28 至 35 行 ：当 <code>regexp</code> 非空时，请求 <code>param</code> 对应的 <strong>QueryParam</strong> 正则匹配<strong>指定值</strong>。<ul><li>当 <code>QueryParams</code> 为空时，会报空指针 <strong>BUG</strong> 。</li></ul></li></ul></li></ul><h1 id="12-RemoteAddrRoutePredicateFactory"><a href="#12-RemoteAddrRoutePredicateFactory" class="headerlink" title="12. RemoteAddrRoutePredicateFactory"></a>12. RemoteAddrRoutePredicateFactory</h1><ul><li>Route 匹配 ：请求<strong>来源 IP</strong> 在<strong>指定范围内</strong>。</li><li>RoutePredicates 方法 ：<a href="https://github.com/YunaiV/spring-cloud-gateway/blob/6bb8d6f93c289fd3a84c802ada60dd2bb57e1fb7/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/handler/predicate/RoutePredicates.java#L80" rel="external nofollow noopener noreferrer" target="_blank"><code>#remoteAddr(String...)</code></a> 。</li><li><p>配置 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">remoteaddr_route</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">http://example.org</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">RemoteAddr=192.168.1.1/24</span></div></pre></td></tr></table></figure></li></ul><ul><li><p>代码 ：    </p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteAddrRoutePredicateFactory</span> <span class="keyword">implements</span> <span class="title">RoutePredicateFactory</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(RemoteAddrRoutePredicateFactory.class);</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">6</span>: <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Tuple args)</span> </span>&#123;</div><div class="line"> <span class="number">7</span>: validate(<span class="number">1</span>, args);</div><div class="line"> <span class="number">8</span>: </div><div class="line"> <span class="number">9</span>: <span class="comment">//</span></div><div class="line"><span class="number">10</span>: List&lt;SubnetUtils&gt; sources = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="number">11</span>: <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">12</span>: <span class="keyword">for</span> (Object arg : args.getValues()) &#123;</div><div class="line"><span class="number">13</span>: addSource(sources, (String) arg);</div><div class="line"><span class="number">14</span>: &#125;</div><div class="line"><span class="number">15</span>: &#125;</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: <span class="keyword">return</span> exchange -&gt; &#123;</div><div class="line"><span class="number">18</span>: InetSocketAddress remoteAddress = exchange.getRequest().getRemoteAddress();</div><div class="line"><span class="number">19</span>: <span class="keyword">if</span> (remoteAddress != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">20</span>: <span class="comment">// 来源 IP</span></div><div class="line"><span class="number">21</span>: String hostAddress = remoteAddress.getAddress().getHostAddress();</div><div class="line"><span class="number">22</span>: String host = exchange.getRequest().getURI().getHost();</div><div class="line"><span class="number">23</span>: <span class="keyword">if</span> (!hostAddress.equals(host)) &#123;</div><div class="line"><span class="number">24</span>: log.warn(<span class="string">"Remote addresses didn't match "</span> + hostAddress + <span class="string">" != "</span> + host);</div><div class="line"><span class="number">25</span>: &#125;</div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>: <span class="comment">//</span></div><div class="line"><span class="number">28</span>: <span class="keyword">for</span> (SubnetUtils source : sources) &#123;</div><div class="line"><span class="number">29</span>: <span class="keyword">if</span> (source.getInfo().isInRange(hostAddress)) &#123;</div><div class="line"><span class="number">30</span>: <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">31</span>: &#125;</div><div class="line"><span class="number">32</span>: &#125;</div><div class="line"><span class="number">33</span>: &#125;</div><div class="line"><span class="number">34</span>: </div><div class="line"><span class="number">35</span>: <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">36</span>: &#125;;</div><div class="line"><span class="number">37</span>: &#125;</div><div class="line"><span class="number">38</span>: </div><div class="line"><span class="number">39</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addSource</span><span class="params">(List&lt;SubnetUtils&gt; sources, String source)</span> </span>&#123;</div><div class="line"><span class="number">40</span>: <span class="keyword">boolean</span> inclusiveHostCount = <span class="keyword">false</span>;</div><div class="line"><span class="number">41</span>: <span class="keyword">if</span> (!source.contains(<span class="string">"/"</span>)) &#123; <span class="comment">// no netmask, add default</span></div><div class="line"><span class="number">42</span>: source = source + <span class="string">"/32"</span>;</div><div class="line"><span class="number">43</span>: &#125;</div><div class="line"><span class="number">44</span>: <span class="keyword">if</span> (source.endsWith(<span class="string">"/32"</span>)) &#123;</div><div class="line"><span class="number">45</span>: <span class="comment">//http://stackoverflow.com/questions/2942299/converting-cidr-address-to-subnet-mask-and-network-address#answer-6858429</span></div><div class="line"><span class="number">46</span>: inclusiveHostCount = <span class="keyword">true</span>;</div><div class="line"><span class="number">47</span>: &#125;</div><div class="line"><span class="number">48</span>: <span class="comment">//<span class="doctag">TODO:</span> howto support ipv6 as well?</span></div><div class="line"><span class="number">49</span>: SubnetUtils subnetUtils = <span class="keyword">new</span> SubnetUtils(source);</div><div class="line"><span class="number">50</span>: subnetUtils.setInclusiveHostCount(inclusiveHostCount);</div><div class="line"><span class="number">51</span>: sources.add(subnetUtils);</div><div class="line"><span class="number">52</span>: &#125;</div><div class="line"><span class="number">53</span>: &#125;</div></pre></td></tr></table></figure><ul><li>Tulpe 参数 ：字符串<strong>数组</strong>。</li><li>第 7 行 ：调用 <code>#validateMin(...)</code> 方法，校验参数数量至少为 <code>1</code> ，字符串数组<strong>非空</strong>。</li><li>第 10 至 15 行 ：使用 <strong>SubnetUtils</strong> 工具类，解析配置的值。</li><li>第 21 至 25 行 ：获得请求来源 IP 。</li><li>第 28 至 32 行 ：请求<strong>来源 IP</strong> 在<strong>指定范围内</strong>。</li></ul></li></ul><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>😈 代码好多，贴的手都抽了。嘿嘿，RemoteAddrRoutePredicateFactory 写的有点偷懒。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_15/04.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 路由（2.4）之 Kotlin 自定义 RouteLocator</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-kotlin/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-kotlin/</id>
    <published>2020-02-09T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-kotlin/">http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-kotlin/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-kotlin/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-kotlin/">2. RouteLocatorDsl</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-kotlin/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享<strong>如何使用 Kotlin 实现自定义 RouteLocator</strong>。</p><p>😈 由于笔者暂时不了解 Kotlin ，也比较<strong>懒</strong>，暂时不准备了解 Kotlin ，所以本文很大可能性是 <code>&quot;一本正经的胡说八道&quot;</code> 。</p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-RouteLocatorDsl"><a href="#2-RouteLocatorDsl" class="headerlink" title="2. RouteLocatorDsl"></a>2. RouteLocatorDsl</h1><p><code>org.springframework.cloud.gateway.route.RouteLocatorDsl</code> ，使用 Kotlin 实现自定义 RouteLocator 。我们先打开 <a href="https://github.com/YunaiV/spring-cloud-gateway/blob/6bb8d6f93c289fd3a84c802ada60dd2bb57e1fb7/spring-cloud-gateway-core/src/main/kotlin/org/springframework/cloud/gateway/route/GatewayDsl.kt" rel="external nofollow noopener noreferrer" target="_blank">GatewayDsl.kt</a> ，大体浏览一下。</p><p>下面我们来看一段<strong>示例</strong>程序，我们会把 <a href="https://github.com/YunaiV/spring-cloud-gateway/blob/6bb8d6f93c289fd3a84c802ada60dd2bb57e1fb7/spring-cloud-gateway-core/src/main/kotlin/org/springframework/cloud/gateway/route/GatewayDsl.kt" rel="external nofollow noopener noreferrer" target="_blank">GatewayDsl.kt</a> 的代码实现嵌入其中。代码如下 ：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.factory.GatewayFilters.addResponseHeader</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.handler.predicate.RoutePredicates.host</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.handler.predicate.RoutePredicates.path</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.gateway</div><div class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Bean</div><div class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration</div><div class="line"></div><div class="line">  <span class="number">1</span>: <span class="meta">@Configuration</span></div><div class="line">  <span class="number">2</span>: <span class="class"><span class="keyword">class</span> <span class="title">AdditionalRoutes</span> </span>&#123;</div><div class="line">  <span class="number">3</span>: </div><div class="line">  <span class="number">4</span>: <span class="meta">@Bean</span></div><div class="line">  <span class="number">5</span>: <span class="function"><span class="keyword">fun</span> <span class="title">additionalRouteLocator</span><span class="params">()</span></span>: RouteLocator = gateway &#123;</div><div class="line">  <span class="number">6</span>: route(id = <span class="string">"test-kotlin"</span>) &#123;</div><div class="line">  <span class="number">7</span>: uri(<span class="string">"http://httpbin.org:80"</span>) <span class="comment">// Route.Builder#uri(uri)</span></div><div class="line">  <span class="number">8</span>: predicate(host(<span class="string">"kotlin.abc.org"</span>) and path(<span class="string">"/image/png"</span>)) <span class="comment">// Route.Builder#predicate(predicate)</span></div><div class="line">  <span class="number">9</span>: add(addResponseHeader(<span class="string">"X-TestHeader"</span>, <span class="string">"foobar"</span>)) <span class="comment">// Route.Builder#add(webFilter)</span></div><div class="line"> <span class="number">10</span>: &#125;</div><div class="line"> <span class="number">11</span>: &#125;</div><div class="line"> <span class="number">12</span>: </div><div class="line"> <span class="number">13</span>: &#125;</div></pre></td></tr></table></figure><ul><li><p>调用 <code>#gateway(...)</code> 方法，创建<strong>自定义</strong>的 RouteLocator 。代码如下 ：</p>  <figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="comment">// GatewayDsl.kt</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">gateway</span><span class="params">(routeLocator: <span class="type">RouteLocatorDsl</span>.()</span></span> -&gt; <span class="built_in">Unit</span>) = RouteLocatorDsl().apply(routeLocator).build()</div></pre></td></tr></table></figure></li><li><p>第 6 至 10 行 ：调用 <code>RouteLocatorDsl#route(...)</code> 方法，配置<strong>一个</strong> Route 。代码如下 ：</p>  <figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="comment">// GatewayDsl.kt</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">val</span> routes = mutableListOf&lt;Route&gt;()</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * DSL to add a route to the [RouteLocator]</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@see</span> [Route.Builder]</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">route</span><span class="params">(id: <span class="type">String</span>? = <span class="literal">null</span>, order: <span class="type">Int</span> = <span class="number">0</span>, uri: <span class="type">String</span>? = <span class="literal">null</span>, init: <span class="type">Route</span>.<span class="type">Builder</span>.()</span></span> -&gt; <span class="built_in">Unit</span>) &#123;</div><div class="line">    <span class="keyword">val</span> builder = Route.builder()</div><div class="line">    <span class="keyword">if</span> (uri != <span class="literal">null</span>) &#123;</div><div class="line">        builder.uri(uri)</div><div class="line">    &#125;</div><div class="line">    routes += builder.id(id).order(order).apply(init).build()</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>第 7 行 ：调用 <code>Route.Builder#uri(uri)</code> 方法，设置 <code>uri</code> 。</p></li><li><p>第 8 行 ：调用 <code>Route.Builder#predicate(predicate)</code> 方法，设置 <code>predicates</code> 。</p><ul><li>使用 RoutePredicates 创建<strong>每个</strong> Route 的 Predicate 。</li><li><p><code>and</code> / <code>or</code> 操作符，代码如下 ：</p>  <figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="comment">// GatewayDsl.kt</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * A helper to return a composed [Predicate] that tests against this [Predicate] AND the [other] predicate</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Predicate<span class="type">&lt;T&gt;</span>.<span class="title">and</span><span class="params">(other: <span class="type">Predicate</span>&lt;<span class="type">T</span>&gt;)</span></span> = <span class="keyword">this</span>.and(other)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * A helper to return a composed [Predicate] that tests against this [Predicate] OR the [other] predicate</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Predicate<span class="type">&lt;T&gt;</span>.<span class="title">or</span><span class="params">(other: <span class="type">Predicate</span>&lt;<span class="type">T</span>&gt;)</span></span> = <span class="keyword">this</span>.or(other)</div></pre></td></tr></table></figure><ul><li>x</li></ul></li></ul></li><li><p>第 9 行 ：调用 <code>Route.Builder#add(webFilter)</code> 方法，添加 <code>filters</code> 。</p><ul><li>使用 GatewayFilters 创建<strong>每个</strong> Route 的 GatewayFilter 。</li></ul></li></ul><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>😈 “<strong>一本正经</strong>“ 的写完了，反正我是不管了。哈哈哈哈。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_10/01.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-kotlin/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gatew
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 路由（2.3）之 Java 自定义 RouteLocator</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-java/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-java/</id>
    <published>2020-02-04T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-java/">http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-java/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-java/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-java/">2. Routes</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-java/">3. RoutePredicates</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-java/">4. GatewayFilters</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-java/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享<strong>如何使用 Java 实现自定义 RouteLocator</strong>。</p><p><em>ps ：为什么这里强调 Java 呢？可以使用 Kotlin 实现自定义 RouteLocator ，在下一篇文章我们会详细分享</em>。</p><p>首先我们来看一段<strong>示例</strong>程序，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.gateway.filter.factory.GatewayFilters.addResponseHeader;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.gateway.handler.predicate.RoutePredicates.host;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.gateway.handler.predicate.RoutePredicates.path;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.tuple.TupleBuilder.tuple;</div><div class="line"></div><div class="line">  <span class="number">1</span>: <span class="meta">@Bean</span></div><div class="line">  <span class="number">2</span>: <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(ThrottleGatewayFilterFactory throttle)</span> </span>&#123;</div><div class="line">  <span class="number">3</span>: <span class="comment">//@formatter:off</span></div><div class="line">  <span class="number">4</span>: <span class="keyword">return</span> Routes.locator()</div><div class="line">  <span class="number">5</span>:            <span class="comment">// Route</span></div><div class="line">  <span class="number">6</span>: .route(<span class="string">"test"</span>)</div><div class="line">  <span class="number">7</span>: .predicate(host(<span class="string">"**.abc.org"</span>).and(path(<span class="string">"/image/png"</span>)))</div><div class="line">  <span class="number">8</span>: .addResponseHeader(<span class="string">"X-TestHeader"</span>, <span class="string">"foobar"</span>)</div><div class="line">  <span class="number">9</span>: .uri(<span class="string">"http://httpbin.org:80"</span>)</div><div class="line"> <span class="number">10</span>:            <span class="comment">// Route</span></div><div class="line"> <span class="number">11</span>: .route(<span class="string">"test2"</span>)</div><div class="line"> <span class="number">12</span>: .predicate(path(<span class="string">"/image/webp"</span>))</div><div class="line"> <span class="number">13</span>: .add(addResponseHeader(<span class="string">"X-AnotherHeader"</span>, <span class="string">"baz"</span>))</div><div class="line"> <span class="number">14</span>: .uri(<span class="string">"http://httpbin.org:80"</span>)</div><div class="line"> <span class="number">15</span>:            <span class="comment">// Route</span></div><div class="line"> <span class="number">16</span>: .route(<span class="string">"test3"</span>)</div><div class="line"> <span class="number">17</span>: .order(-<span class="number">1</span>)</div><div class="line"> <span class="number">18</span>: .predicate(host(<span class="string">"**.throttle.org"</span>).and(path(<span class="string">"/get"</span>)))</div><div class="line"> <span class="number">19</span>: .add(throttle.apply(tuple().of(<span class="string">"capacity"</span>, <span class="number">1</span>,</div><div class="line"> <span class="number">20</span>: <span class="string">"refillTokens"</span>, <span class="number">1</span>,</div><div class="line"> <span class="number">21</span>: <span class="string">"refillPeriod"</span>, <span class="number">10</span>,</div><div class="line"> <span class="number">22</span>: <span class="string">"refillUnit"</span>, <span class="string">"SECONDS"</span>)))</div><div class="line"> <span class="number">23</span>: .uri(<span class="string">"http://httpbin.org:80"</span>)</div><div class="line"> <span class="number">24</span>: .build();</div><div class="line"> <span class="number">25</span>: <span class="comment">////@formatter:on</span></div><div class="line"> <span class="number">26</span>: &#125;</div></pre></td></tr></table></figure><ul><li>使用 Routes 创建了<strong>三个</strong> Route 。</li><li>使用 RoutePredicates 创建<strong>每个</strong> Route 的 Predicate 。</li><li>使用 GatewayFilters 创建<strong>每个</strong> Route 的 GatewayFilter 。</li></ul><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-Routes"><a href="#2-Routes" class="headerlink" title="2. Routes"></a>2. Routes</h1><p><code>rg.springframework.cloud.gateway.route.Routes</code> ，Java 自定义 RouteLocator <strong>Builder</strong> 。</p><p>Routes 内置多个 Builder 类，用于创建 Route 相关的各个元素 ：</p><table><thead><tr><th>Routes 内置 Builder 类</th><th>组件</th></tr></thead><tbody><tr><td>LocatorBuilder</td><td>RouteLocator</td></tr><tr><td>RouteSpec</td><td>Route</td></tr><tr><td>PredicateSpec</td><td>Predicate</td></tr><tr><td>GatewayFilterSpec</td><td>GatewayFilter</td></tr></tbody></table><p>使用时，首先调用 <code>Routes#locator()</code> 方法，创建一个 LocatorBuilder 。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocatorBuilder <span class="title">locator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LocatorBuilder();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>LocatorBuilder ，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocatorBuilder</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">private</span> List&lt;Route&gt; routes = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>: <span class="function"><span class="keyword">public</span> PredicateSpec <span class="title">route</span><span class="params">(String id)</span> </span>&#123;</div><div class="line"> <span class="number">6</span>: <span class="keyword">return</span> <span class="keyword">new</span> RouteSpec(<span class="keyword">this</span>).id(id);</div><div class="line"> <span class="number">7</span>: &#125;</div><div class="line"> <span class="number">8</span>: </div><div class="line"> <span class="number">9</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Route route)</span> </span>&#123;</div><div class="line"><span class="number">10</span>: <span class="keyword">this</span>.routes.add(route);</div><div class="line"><span class="number">11</span>: &#125;</div><div class="line"><span class="number">12</span>: </div><div class="line"><span class="number">13</span>: <span class="function">LocatorBuilder <span class="title">uri</span><span class="params">(Route.Builder builder, String uri)</span> </span>&#123;</div><div class="line"><span class="number">14</span>: Route route = builder.uri(uri).build();</div><div class="line"><span class="number">15</span>: routes.add(route);</div><div class="line"><span class="number">16</span>: <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line"><span class="number">17</span>: &#125;</div><div class="line"><span class="number">18</span>: </div><div class="line"><span class="number">19</span>: <span class="function">LocatorBuilder <span class="title">uri</span><span class="params">(Route.Builder builder, URI uri)</span> </span>&#123;</div><div class="line"><span class="number">20</span>: Route route = builder.uri(uri).build();</div><div class="line"><span class="number">21</span>: routes.add(route);</div><div class="line"><span class="number">22</span>: <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line"><span class="number">23</span>: &#125;</div><div class="line"><span class="number">24</span>: </div><div class="line"><span class="number">25</span>: <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">26</span>: <span class="keyword">return</span> () -&gt; Flux.fromIterable(<span class="keyword">this</span>.routes);</div><div class="line"><span class="number">27</span>: &#125;</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>: &#125;</div></pre></td></tr></table></figure><ul><li><code>routes</code> 属性，LocatorBuilder 已创建好的 Route 数组。</li><li><code>#add()</code> 方法，添加已创建好的 Route 。</li><li><code>#uri()</code> 方法，使用 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/route/Route.java#L67" rel="external nofollow noopener noreferrer" target="_blank">Route.Builder</a> 方法，创建 Route 并添加。 </li><li><p><code>#route()</code> 方法，<strong>不同于上面两个方法</strong>，首先创建 RouteSpec 对象，后调用 <code>RouteSpec#id(...)</code> 方法，创建 PredicateSpec 对象。<strong>为什么是这样的呢</strong>？Routes 里<strong>创建</strong> Route 是<strong>有序</strong>的<strong>链式</strong>过程，如下如 ：</p><p>  <img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_05/01.png" alt=""></p><ul><li>绿线 ：创建<strong>一个</strong> <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/route/Route.java#L67" rel="external nofollow noopener noreferrer" target="_blank">Route.Builder</a> 。</li><li>红线 ：调用 <code>LocatorBuilder#uri(uri)</code> 方法，创建 Route 并添加。后面，可以继续【<strong>绿线</strong>】，创建下一个 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/route/Route.java#L67" rel="external nofollow noopener noreferrer" target="_blank">Route.Builder</a> 。</li></ul></li><li><code>#build()</code> 方法，创建<strong>自定义</strong> RouteLocator 类。</li></ul><hr><p>RouteSpec / PredicateSpec / GatewayFilterSpec 实现上就是常见的 Builder 类，点击链接直接查看代码 ：</p><ul><li><a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/route/Routes.java#L72" rel="external nofollow noopener noreferrer" target="_blank">RouteSpec</a></li><li><a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/route/Routes.java#L91" rel="external nofollow noopener noreferrer" target="_blank">PredicateSpec</a></li><li><a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/route/Routes.java#L132" rel="external nofollow noopener noreferrer" target="_blank">GatewayFilterSpec</a></li></ul><h1 id="3-RoutePredicates"><a href="#3-RoutePredicates" class="headerlink" title="3. RoutePredicates"></a>3. RoutePredicates</h1><p><code>org.springframework.cloud.gateway.handler.predicate.RoutePredicates</code> ，RoutePredicates <strong>工厂</strong>，其调用 RoutePredicateFactory 接口的<strong>实现类</strong>，创建各种 Predicate 。代码比较易懂，点击 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/handler/predicate/RoutePredicates.java#L38" rel="external nofollow noopener noreferrer" target="_blank">链接</a> 查看实现。</p><h1 id="4-GatewayFilters"><a href="#4-GatewayFilters" class="headerlink" title="4. GatewayFilters"></a>4. GatewayFilters</h1><p><code>org.springframework.cloud.gateway.filter.factory.GatewayFilters</code> ，GatewayFilter <strong>工厂</strong>，其调用 GatewayFilterFactory 接口的<strong>实现类</strong>，创建各种 GatewayFilter 。代码比较易懂，点击 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/9ffb0f18678460fda9b25c572c12f9054a62ca52/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/factory/GatewayFilters.java" rel="external nofollow noopener noreferrer" target="_blank">链接</a> 查看实现。</p><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>原先还在纠结 Routes 怎么解释合适，画了个图，满意。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_05/02.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-custom-java/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 路由（2.2）之 RouteDefinitionRouteLocator 路由配置</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/</id>
    <published>2020-01-31T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/">http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/">2. RouteDefinitionRouteLocator</a><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/">2.1 构造方法</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/">2.2 获得 Route</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/">2.3 转换 Route</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/">2.4 获得 Tuple</a></li></ul></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>RouteDefinitionRouteLocator 的源码实现</strong>。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_01/01.jpeg" alt=""></p><ul><li><strong>蓝色</strong>部分 ：RouteDefinitionRouteLocator 。</li></ul><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-RouteDefinitionRouteLocator"><a href="#2-RouteDefinitionRouteLocator" class="headerlink" title="2. RouteDefinitionRouteLocator"></a>2. RouteDefinitionRouteLocator</h1><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator</code> ，基于 <strong>RouteDefinitionLocator</strong> 的 RouteLocator <strong>实现类</strong>。</p><p>RouteDefinitionRouteLocator 从 RouteDefinitionLocator 获取 RouteDefinition ，转换成 Route 。如下图 ：</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_01/02.png" alt=""></p><h2 id="2-1-构造方法"><a href="#2-1-构造方法" class="headerlink" title="2.1 构造方法"></a>2.1 构造方法</h2><p>RouteDefinitionRouteLocator 构造方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteDefinitionRouteLocator</span> <span class="keyword">implements</span> <span class="title">RouteLocator</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: <span class="keyword">protected</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>: <span class="keyword">private</span> <span class="keyword">final</span> RouteDefinitionLocator routeDefinitionLocator;</div><div class="line"> <span class="number">5</span>: <span class="comment">/**</span></div><div class="line"><span class="comment"> 6:  * RoutePredicateFactory 映射</span></div><div class="line"><span class="comment"> 7:  * key ：&#123;<span class="doctag">@link</span> RoutePredicateFactory#name()&#125;</span></div><div class="line"><span class="comment"> 8:  */</span></div><div class="line"> <span class="number">9</span>: <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, RoutePredicateFactory&gt; predicates = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line"><span class="number">10</span>: <span class="comment">/**</span></div><div class="line"><span class="comment">11:  * GatewayFilterFactory 映射</span></div><div class="line"><span class="comment">12:  * key ：&#123;<span class="doctag">@link</span> GatewayFilterFactory#name()&#125;</span></div><div class="line"><span class="comment">13:  */</span></div><div class="line"><span class="number">14</span>: <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, GatewayFilterFactory&gt; gatewayFilterFactories = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"><span class="number">15</span>: <span class="keyword">private</span> <span class="keyword">final</span> GatewayProperties gatewayProperties;</div><div class="line"><span class="number">16</span>: <span class="keyword">private</span> <span class="keyword">final</span> SpelExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</div><div class="line"><span class="number">17</span>: <span class="keyword">private</span> BeanFactory beanFactory;</div><div class="line"><span class="number">18</span>: </div><div class="line"><span class="number">19</span>: <span class="function"><span class="keyword">public</span> <span class="title">RouteDefinitionRouteLocator</span><span class="params">(RouteDefinitionLocator routeDefinitionLocator,</span></span></div><div class="line"><span class="function"><span class="params"><span class="number">20</span>:    List&lt;RoutePredicateFactory&gt; predicates,</span></span></div><div class="line"><span class="function"><span class="params"><span class="number">21</span>:    List&lt;GatewayFilterFactory&gt; gatewayFilterFactories,</span></span></div><div class="line"><span class="function"><span class="params"><span class="number">22</span>:    GatewayProperties gatewayProperties)</span> </span>&#123;</div><div class="line"><span class="number">23</span>: <span class="comment">// 设置 RouteDefinitionLocator</span></div><div class="line"><span class="number">24</span>: <span class="keyword">this</span>.routeDefinitionLocator = routeDefinitionLocator;</div><div class="line"><span class="number">25</span>: <span class="comment">// 初始化 RoutePredicateFactory</span></div><div class="line"><span class="number">26</span>: initFactories(predicates);</div><div class="line"><span class="number">27</span>: <span class="comment">// 初始化 RoutePredicateFactory</span></div><div class="line"><span class="number">28</span>: gatewayFilterFactories.forEach(factory -&gt; <span class="keyword">this</span>.gatewayFilterFactories.put(factory.name(), factory));</div><div class="line"><span class="number">29</span>: <span class="comment">// 设置 GatewayProperties</span></div><div class="line"><span class="number">30</span>: <span class="keyword">this</span>.gatewayProperties = gatewayProperties;</div><div class="line"><span class="number">31</span>: &#125;</div><div class="line"><span class="number">32</span>: </div><div class="line"><span class="number">33</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">34</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line"><span class="number">35</span>: <span class="keyword">this</span>.beanFactory = beanFactory;</div><div class="line"><span class="number">36</span>: &#125;</div><div class="line"><span class="number">37</span>:&#125;</div></pre></td></tr></table></figure><ul><li><code>routeDefinitionLocator</code> 属性，提供 RouteDefinition 的 RouteDefinitionLocator 。</li><li><code>predicates</code> 属性，RoutePredicateFactory Bean 对象<strong>映射</strong>。<ul><li><code>key</code> 为 <code>{@link RoutePredicateFactory#name()}</code> 。</li><li>通过它，将 <code>RouteDefinition.predicates</code> 转换成 <code>Route.predicates</code> 。</li><li>第 26 行 ：调用 <code>#initFactories()</code> 方法，初始化映射。逻辑比较简单，点击 <a href="https://github.com/YunaiV/spring-cloud-gateway/blob/6bb8d6f93c289fd3a84c802ada60dd2bb57e1fb7/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/route/RouteDefinitionRouteLocator.java#L90" rel="external nofollow noopener noreferrer" target="_blank">链接</a> 查看代码。</li></ul></li><li><code>gatewayFilterFactories</code> 属性，RoutePredicateFactory Bean 对象<strong>映射</strong>。<ul><li><code>key</code> 为 <code>{@link GatewayFilterFactory#name()}</code> 。</li><li>通过它，将 <code>RouteDefinition.filters</code> 转换成 <code>Route.filters</code> 。</li><li>第 28 行 ：初始化映射。</li></ul></li><li><code>gatewayProperties</code> 属性，使用 <code>GatewayProperties.defaultFilters</code> <strong>默认过滤器定义数组</strong>，添加到每个 Route 。下文会看到相关代码的实现。</li><li><code>parser</code> 属性，Spring EL 表达式解析器。在 <a href="#">「2.4 获得 Tuple」</a> 会看到它的使用。</li><li><code>beanFactory</code> 属性，Bean 工厂。</li></ul><h2 id="2-2-获得-Route"><a href="#2-2-获得-Route" class="headerlink" title="2.2 获得 Route"></a>2.2 获得 Route</h2><p><code>#getRoutes()</code> 方法，获得 Route 数组。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> Flux&lt;Route&gt; <span class="title">getRoutes</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: <span class="keyword">return</span> <span class="keyword">this</span>.routeDefinitionLocator.getRouteDefinitions()</div><div class="line"> <span class="number">4</span>: .map(<span class="keyword">this</span>::convertToRoute) <span class="comment">// RouteDefinition =&gt; Route</span></div><div class="line"> <span class="number">5</span>: <span class="comment">//<span class="doctag">TODO:</span> error handling</span></div><div class="line"> <span class="number">6</span>: .map(route -&gt; &#123; <span class="comment">// 打印日志</span></div><div class="line"> <span class="number">7</span>: <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line"> <span class="number">8</span>: logger.debug(<span class="string">"RouteDefinition matched: "</span> + route.getId());</div><div class="line"> <span class="number">9</span>: &#125;</div><div class="line"><span class="number">10</span>: <span class="keyword">return</span> route;</div><div class="line"><span class="number">11</span>: &#125;);</div><div class="line"><span class="number">12</span>: </div><div class="line"><span class="number">13</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 3 行 ： 调用 <code>RouteDefinitionLocator#getRouteDefinitions()</code> 方法，获得 RouteDefinitions 数组。</li><li>第 4 行 ：调用 <code>#convertToRoute()</code> 方法，将每个 RouteDefinition <strong>转换</strong>成  Route 。该方法在 <a href="#">「2.3 转换 Route」</a> 详细解析。</li><li>第 7 至 11 行 ：打印<strong>输出</strong>每个 Route 。</li></ul><h2 id="2-3-转换-Route"><a href="#2-3-转换-Route" class="headerlink" title="2.3 转换 Route"></a>2.3 转换 Route</h2><p><code>#convertToRoute()</code> 方法，将每个 RouteDefinition <strong>转换</strong>成  Route 。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">private</span> Route <span class="title">convertToRoute</span><span class="params">(RouteDefinition routeDefinition)</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="comment">// 合并 Predicate</span></div><div class="line"> <span class="number">3</span>: Predicate&lt;ServerWebExchange&gt; predicate = combinePredicates(routeDefinition);</div><div class="line"> <span class="number">4</span>: <span class="comment">// 获得 GatewayFilter</span></div><div class="line"> <span class="number">5</span>: List&lt;GatewayFilter&gt; gatewayFilters = getFilters(routeDefinition);</div><div class="line"> <span class="number">6</span>: <span class="comment">// 构建 Route</span></div><div class="line"> <span class="number">7</span>: <span class="keyword">return</span> Route.builder(routeDefinition)</div><div class="line"> <span class="number">8</span>: .predicate(predicate)</div><div class="line"> <span class="number">9</span>: .gatewayFilters(gatewayFilters)</div><div class="line"><span class="number">10</span>: .build();</div><div class="line"><span class="number">11</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 3 行 ：调用 <code>#combinePredicates()</code> 方法，将 <code>RouteDefinition.predicates</code> <strong>数组</strong>合并成<strong>一个</strong> <code>java.util.function.Predicate</code> ，这样 RoutePredicateHandlerMapping 为请求<strong>匹配</strong> Route ，只要调用<strong>一次</strong> <code>Predicate#test(ServerWebExchange)</code> 方法即可。</li><li>第 5 行 ：调用 <code>#getFilters()</code> 方法，获得 GatewayFilter <strong>数组</strong>。</li><li>第 7 至 10 行 ：构建 Route 。</li></ul><hr><p><code>#combinePredicates()</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">private</span> Predicate&lt;ServerWebExchange&gt; <span class="title">combinePredicates</span><span class="params">(RouteDefinition routeDefinition)</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="comment">// 寻找 Predicate</span></div><div class="line"> <span class="number">3</span>: List&lt;PredicateDefinition&gt; predicates = routeDefinition.getPredicates();</div><div class="line"> <span class="number">4</span>: Predicate&lt;ServerWebExchange&gt; predicate = lookup(routeDefinition, predicates.get(<span class="number">0</span>));</div><div class="line"> <span class="number">5</span>: <span class="comment">// 拼接 Predicate</span></div><div class="line"> <span class="number">6</span>: <span class="keyword">for</span> (PredicateDefinition andPredicate : predicates.subList(<span class="number">1</span>, predicates.size())) &#123;</div><div class="line"> <span class="number">7</span>: Predicate&lt;ServerWebExchange&gt; found = lookup(routeDefinition, andPredicate);</div><div class="line"> <span class="number">8</span>: predicate = predicate.and(found);</div><div class="line"> <span class="number">9</span>: &#125;</div><div class="line"><span class="number">10</span>: <span class="comment">// 返回 Predicate</span></div><div class="line"><span class="number">11</span>: <span class="keyword">return</span> predicate;</div><div class="line"><span class="number">12</span>: &#125;</div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>: <span class="function"><span class="keyword">private</span> Predicate&lt;ServerWebExchange&gt; <span class="title">lookup</span><span class="params">(RouteDefinition routeDefinition, PredicateDefinition predicate)</span> </span>&#123;</div><div class="line"><span class="number">15</span>:     <span class="comment">// 获得 RoutePredicateFactory</span></div><div class="line"><span class="number">16</span>: RoutePredicateFactory found = <span class="keyword">this</span>.predicates.get(predicate.getName());</div><div class="line"><span class="number">17</span>: <span class="keyword">if</span> (found == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">18</span>: <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to find RoutePredicateFactory with name "</span> + predicate.getName());</div><div class="line"><span class="number">19</span>: &#125;</div><div class="line"><span class="number">20</span>: <span class="comment">// 获得 Tuple</span></div><div class="line"><span class="number">21</span>: Map&lt;String, String&gt; args = predicate.getArgs();</div><div class="line"><span class="number">22</span>: <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line"><span class="number">23</span>: logger.debug(<span class="string">"RouteDefinition "</span> + routeDefinition.getId() + <span class="string">" applying "</span></div><div class="line"><span class="number">24</span>: + args + <span class="string">" to "</span> + predicate.getName());</div><div class="line"><span class="number">25</span>: &#125;</div><div class="line"><span class="number">26</span>: Tuple tuple = getTuple(found, args, <span class="keyword">this</span>.parser, <span class="keyword">this</span>.beanFactory);</div><div class="line"><span class="number">27</span>: <span class="comment">// 获得 Predicate</span></div><div class="line"><span class="number">28</span>: <span class="keyword">return</span> found.apply(tuple);</div><div class="line"><span class="number">29</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 2 至 9 行 ：通过调用 <code>#lookup()</code> 方法，查找 PredicateDefinition 对应的 Predicate 。为什么拆成<strong>两部分</strong>？第一部分找到 <code>java.util.function.Predicate</code> ，第二部分通过 <code>Predicate#and(Predicate)</code> 方法不断拼接。</li><li>第 11 行 ：返回 Predicate 。</li><li>—————————- 分割线 ————————–</li><li>第 14 至 29 行 ：<code>#lookup()</code> 方法。<ul><li>第 16 至 19 行 ：获得 RoutePredicateFactory Bean 对象。</li><li>第 21 至 26 行 ：调用 <code>#getTuple()</code> 方法，获得 Tuple 。该方法比较复杂，在 <a href="#">「2.4 获得 Tuple」</a> 详细解析。</li><li>第 28 行 ：调用 <code>RoutePredicateFactory#apply(Tuple)</code> 方法，创建 Predicate 。在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/?self">《Spring-Cloud-Gateway 源码解析 —— 处理器 (3.1) 之 RoutePredicateFactory  路由谓语工厂 》</a> 详细解析。</li></ul></li></ul><hr><p><code>#getFilters()</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">private</span> List&lt;GatewayFilter&gt; <span class="title">getFilters</span><span class="params">(RouteDefinition routeDefinition)</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: List&lt;GatewayFilter&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"> <span class="number">3</span>: <span class="comment">// 添加 默认过滤器</span></div><div class="line"> <span class="number">4</span>: <span class="comment">//<span class="doctag">TODO:</span> support option to apply defaults after route specific filters?</span></div><div class="line"> <span class="number">5</span>: <span class="keyword">if</span> (!<span class="keyword">this</span>.gatewayProperties.getDefaultFilters().isEmpty()) &#123;</div><div class="line"> <span class="number">6</span>: filters.addAll(loadGatewayFilters(<span class="string">"defaultFilters"</span>,</div><div class="line"> <span class="number">7</span>: <span class="keyword">this</span>.gatewayProperties.getDefaultFilters()));</div><div class="line"> <span class="number">8</span>: &#125;</div><div class="line"> <span class="number">9</span>: <span class="comment">// 添加 配置的过滤器</span></div><div class="line"><span class="number">10</span>: <span class="keyword">if</span> (!routeDefinition.getFilters().isEmpty()) &#123;</div><div class="line"><span class="number">11</span>: filters.addAll(loadGatewayFilters(routeDefinition.getId(), routeDefinition.getFilters()));</div><div class="line"><span class="number">12</span>: &#125;</div><div class="line"><span class="number">13</span>: <span class="comment">// 排序</span></div><div class="line"><span class="number">14</span>: AnnotationAwareOrderComparator.sort(filters);</div><div class="line"><span class="number">15</span>: <span class="keyword">return</span> filters;</div><div class="line"><span class="number">16</span>: &#125;</div><div class="line"><span class="number">17</span>: </div><div class="line"><span class="number">18</span>: <span class="function"><span class="keyword">private</span> List&lt;GatewayFilter&gt; <span class="title">loadGatewayFilters</span><span class="params">(String id, List&lt;FilterDefinition&gt; filterDefinitions)</span> </span>&#123;</div><div class="line"><span class="number">19</span>: List&lt;GatewayFilter&gt; filters = filterDefinitions.stream()</div><div class="line"><span class="number">20</span>: .map(definition -&gt; &#123; <span class="comment">// FilterDefinition =&gt; GatewayFilter</span></div><div class="line"><span class="number">21</span>:     <span class="comment">// 获得 GatewayFilterFactory</span></div><div class="line"><span class="number">22</span>: GatewayFilterFactory filter = <span class="keyword">this</span>.gatewayFilterFactories.get(definition.getName());</div><div class="line"><span class="number">23</span>: <span class="keyword">if</span> (filter == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">24</span>: <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to find GatewayFilterFactory with name "</span> + definition.getName());</div><div class="line"><span class="number">25</span>: &#125;</div><div class="line"><span class="number">26</span>: <span class="comment">// 获得 Tuple</span></div><div class="line"><span class="number">27</span>: Map&lt;String, String&gt; args = definition.getArgs();</div><div class="line"><span class="number">28</span>: <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line"><span class="number">29</span>: logger.debug(<span class="string">"RouteDefinition "</span> + id + <span class="string">" applying filter "</span> + args + <span class="string">" to "</span> + definition.getName());</div><div class="line"><span class="number">30</span>: &#125;</div><div class="line"><span class="number">31</span>: Tuple tuple = getTuple(filter, args, <span class="keyword">this</span>.parser, <span class="keyword">this</span>.beanFactory);</div><div class="line"><span class="number">32</span>: <span class="comment">// 获得 GatewayFilter</span></div><div class="line"><span class="number">33</span>: <span class="keyword">return</span> filter.apply(tuple);</div><div class="line"><span class="number">34</span>: &#125;)</div><div class="line"><span class="number">35</span>: .collect(Collectors.toList()); <span class="comment">// 转成 List</span></div><div class="line"><span class="number">36</span>:    <span class="comment">// GatewayFilter =&gt; OrderedGatewayFilter</span></div><div class="line"><span class="number">37</span>: ArrayList&lt;GatewayFilter&gt; ordered = <span class="keyword">new</span> ArrayList&lt;&gt;(filters.size());</div><div class="line"><span class="number">38</span>: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; filters.size(); i++) &#123;</div><div class="line"><span class="number">39</span>: ordered.add(<span class="keyword">new</span> OrderedGatewayFilter(filters.get(i), i+<span class="number">1</span>));</div><div class="line"><span class="number">40</span>: &#125;</div><div class="line"><span class="number">41</span>: <span class="comment">// 返回 GatewayFilter 数组</span></div><div class="line"><span class="number">42</span>: <span class="keyword">return</span> ordered;</div><div class="line"><span class="number">43</span>: &#125;</div></pre></td></tr></table></figure><ul><li>第 4 至 8 行 ：调用 <code>#loadGatewayFilters()</code> 方法，使用 <code>GatewayProperties.defaultFilters</code> <strong>默认</strong>的过滤器配置，将 FilterDefinition 转换成 GatewayFilter 。</li><li>第 10 至 12 行 ：调用 <code>#loadGatewayFilters()</code> 方法，使用 <code>RouteDefinition.filters</code> <strong>配置</strong>的过滤器配置，将 FilterDefinition 转换成 GatewayFilter 。</li><li>—————————- 分割线 ————————–</li><li>第 18 至 43 行 ：<code>#loadGatewayFilters()</code> 方法。<ul><li>第 20 至 34 行 ：将 FilterDefinition 转换成 GatewayFilter 。<ul><li>第 21 至 25 行 ：获得 GatewayFilterFactory Bean 对象。</li><li>第 27 至 31 行 ：调用 <code>#getTuple()</code> 方法，获得 Tuple 。该方法比较复杂，在 <a href="#">「2.4 获得 Tuple」</a> 详细解析。</li><li>第 33 行 ：创建 GatewayFilter 。</li></ul></li><li>第 35 行 ：获得 GatewayFilter 数组。</li></ul></li><li>第 37 至 40 行 ：将 GatewayFilter 数组<strong>转换成</strong> OrderedGatewayFilter 数组。在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-intro/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.1) 之 GatewayFilter 一览》</a> 详细解析。</li><li>第 42 行 ：返回 GatewayFilter <strong>数组</strong>。</li></ul><h2 id="2-4-获得-Tuple"><a href="#2-4-获得-Tuple" class="headerlink" title="2.4 获得 Tuple"></a>2.4 获得 Tuple</h2><p>在看 <code>#getTuple()</code> 方法的代码实现之前，我们先了解下 Tuple 。</p><p>Tuple ，<strong>定义</strong>如下 ：</p><blockquote><p>FROM <a href="https://unmi.cc/simple-java-tuple-datatype/" rel="external nofollow noopener noreferrer" target="_blank">《简单实现 Java 的 Tuple 元组数据类型》</a><br>元组类型，即 Tuple 常在脚本语言中出现，例如 Scala 的 (“Unmi”, “fantasia@sina.com”, “blahbla”)<br>元组可认为是象数组一样的容器，它的目的是让你方便构造和引用，例如 Pair 可认为是一个只能存两个元素的元组，像是个 Map<br>真正的元组应该是可以任意多个元素的容器，绕来绕去，它还是数组，或列表，所以我们实现上还是要借助于数组或是列表。</p></blockquote><p>截止目前，Java 并未内置 Tuple 的实现。Spring 提供了 <code>spring-tuple</code> <strong>类库</strong>，提供了 Tuple 的支持。使用<strong>示例</strong>如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 1 对</span></div><div class="line">Tuple tuple = tuple().of(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</div><div class="line"><span class="comment">// 2 对</span></div><div class="line">Tuple tuple2 = tuple().of(<span class="string">"up"</span>, <span class="number">1</span>, <span class="string">"down"</span>, <span class="number">2</span>);</div><div class="line"><span class="comment">// 3 对</span></div><div class="line">Tuple tuple3 = tuple().of(<span class="string">"up"</span>, <span class="number">1</span>, <span class="string">"down"</span>, <span class="number">2</span>, <span class="string">"charm"</span>, <span class="number">3</span> );</div><div class="line"><span class="comment">// 4 对</span></div><div class="line">Tuple tuple4 = tuple().of(<span class="string">"up"</span>, <span class="number">1</span>, <span class="string">"down"</span>, <span class="number">2</span>, <span class="string">"charm"</span>, <span class="number">3</span>, <span class="string">"strange"</span>, <span class="number">4</span>);</div><div class="line"><span class="comment">// 6 对 ( 适用于超过 4 对 )</span></div><div class="line">Tuple tuple6 = tuple().put(<span class="string">"up"</span>, <span class="number">1</span>)</div><div class="line">                      .put(<span class="string">"down"</span>, <span class="number">2</span>)</div><div class="line">              .put(<span class="string">"charm"</span>, <span class="number">3</span>)</div><div class="line">              .put(<span class="string">"strange"</span>, <span class="number">4</span>)</div><div class="line">              .put(<span class="string">"bottom"</span>, <span class="number">5</span>)</div><div class="line">              .put(<span class="string">"top"</span>, <span class="number">6</span>)</div><div class="line">              .build();</div></pre></td></tr></table></figure><ul><li>更多 <code>spring-tuple</code> 的文档，请见 <a href="https://docs.spring.io/spring-xd/docs/0.1.x-SNAPSHOT/reference/html/_tuples.html" rel="external nofollow noopener noreferrer" target="_blank">《Spring Docs —— Tuples》</a> 。</li></ul><hr><p>那么<strong>为什么</strong> <code>RoutePredicateFactory#apply(Tuple)</code> / <code>GatewayFilterFactory#apply(Tuple)</code> 需要使用 Tuple 呢 ？RoutePredicateFactory / GatewayFilterFactory <strong>子类实现类</strong>需要成对的参数不同，例如 ：</p><ul><li><a href="https://github.com/YunaiV/spring-cloud-gateway/blob/382a4cd98fbb8ac53a83a5559bacb0f885838074/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/factory/SetStatusGatewayFilterFactory.java#L40" rel="external nofollow noopener noreferrer" target="_blank"><code>org.springframework.cloud.gateway.filter.factory.SetStatusGatewayFilterFactory</code></a> ，使用 <code>status</code> <strong>一对</strong>参数。</li><li><a href="https://github.com/YunaiV/spring-cloud-gateway/blob/382a4cd98fbb8ac53a83a5559bacb0f885838074/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/factory/SetResponseHeaderGatewayFilterFactory.java#L33" rel="external nofollow noopener noreferrer" target="_blank"><code>org.springframework.cloud.gateway.filter.factory.SetResponseHeaderGatewayFilterFactory</code></a> ，使用 <code>name</code> / <code>value</code> <strong>两对</strong>参数。</li></ul><hr><p>OK ，我们开始看看 <code>#getTuple()</code> 方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">/* for testing */</span> <span class="function"><span class="keyword">static</span> Tuple <span class="title">getTuple</span><span class="params">(ArgumentHints hasArguments, Map&lt;String, String&gt; args, SpelExpressionParser parser, BeanFactory beanFactory)</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: TupleBuilder builder = TupleBuilder.tuple();</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>: <span class="comment">// 参数为空</span></div><div class="line"> <span class="number">5</span>: List&lt;String&gt; argNames = hasArguments.argNames();</div><div class="line"> <span class="number">6</span>: <span class="keyword">if</span> (!argNames.isEmpty()) &#123;</div><div class="line"> <span class="number">7</span>: <span class="comment">// ensure size is the same for key replacement later</span></div><div class="line"> <span class="number">8</span>: <span class="keyword">if</span> (hasArguments.validateArgs() &amp;&amp; args.size() != argNames.size()) &#123;</div><div class="line"> <span class="number">9</span>: <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Wrong number of arguments. Expected "</span> + argNames</div><div class="line"><span class="number">10</span>: + <span class="string">" "</span> + argNames + <span class="string">". Found "</span> + args.size() + <span class="string">" "</span> + args + <span class="string">"'"</span>);</div><div class="line"><span class="number">11</span>: &#125;</div><div class="line"><span class="number">12</span>: &#125;</div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>: <span class="comment">// 创建 Tuple</span></div><div class="line"><span class="number">15</span>: <span class="keyword">int</span> entryIdx = <span class="number">0</span>;</div><div class="line"><span class="number">16</span>: <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : args.entrySet()) &#123;</div><div class="line"><span class="number">17</span>:     <span class="comment">// 获得参数 KEY</span></div><div class="line"><span class="number">18</span>: String key = entry.getKey();</div><div class="line"><span class="number">19</span>: <span class="comment">// RoutePredicateFactory has name hints and this has a fake key name</span></div><div class="line"><span class="number">20</span>: <span class="comment">// replace with the matching key hint</span></div><div class="line"><span class="number">21</span>: <span class="keyword">if</span> (key.startsWith(NameUtils.GENERATED_NAME_PREFIX) &amp;&amp; !argNames.isEmpty()</div><div class="line"><span class="number">22</span>: &amp;&amp; entryIdx &lt; args.size()) &#123;</div><div class="line"><span class="number">23</span>: key = argNames.get(entryIdx);</div><div class="line"><span class="number">24</span>: &#125;</div><div class="line"><span class="number">25</span>: <span class="comment">// 获得参数 VALUE</span></div><div class="line"><span class="number">26</span>: Object value;</div><div class="line"><span class="number">27</span>: String rawValue = entry.getValue();</div><div class="line"><span class="number">28</span>: <span class="keyword">if</span> (rawValue != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">29</span>: rawValue = rawValue.trim();</div><div class="line"><span class="number">30</span>: &#125;</div><div class="line"><span class="number">31</span>: <span class="keyword">if</span> (rawValue != <span class="keyword">null</span> &amp;&amp; rawValue.startsWith(<span class="string">"#&#123;"</span>) &amp;&amp; entry.getValue().endsWith(<span class="string">"&#125;"</span>)) &#123;</div><div class="line"><span class="number">32</span>: <span class="comment">// assume it's spel</span></div><div class="line"><span class="number">33</span>: StandardEvaluationContext context = <span class="keyword">new</span> StandardEvaluationContext();</div><div class="line"><span class="number">34</span>: context.setBeanResolver(<span class="keyword">new</span> BeanFactoryResolver(beanFactory));</div><div class="line"><span class="number">35</span>: Expression expression = parser.parseExpression(entry.getValue(), <span class="keyword">new</span> TemplateParserContext());</div><div class="line"><span class="number">36</span>: value = expression.getValue(context);</div><div class="line"><span class="number">37</span>: &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">38</span>: value = entry.getValue();</div><div class="line"><span class="number">39</span>: &#125;</div><div class="line"><span class="number">40</span>: <span class="comment">// 添加 KEY / VALUE</span></div><div class="line"><span class="number">41</span>: builder.put(key, value);</div><div class="line"><span class="number">42</span>: entryIdx++;</div><div class="line"><span class="number">43</span>: &#125;</div><div class="line"><span class="number">44</span>: Tuple tuple = builder.build();</div><div class="line"><span class="number">45</span>: </div><div class="line"><span class="number">46</span>: <span class="comment">// 校验参数</span></div><div class="line"><span class="number">47</span>: <span class="keyword">if</span> (hasArguments.validateArgs()) &#123;</div><div class="line"><span class="number">48</span>: <span class="keyword">for</span> (String name : argNames) &#123;</div><div class="line"><span class="number">49</span>: <span class="keyword">if</span> (!tuple.hasFieldName(name)) &#123;</div><div class="line"><span class="number">50</span>: <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Missing argument '"</span> + name + <span class="string">"'. Given "</span> + tuple);</div><div class="line"><span class="number">51</span>: &#125;</div><div class="line"><span class="number">52</span>: &#125;</div><div class="line"><span class="number">53</span>: &#125;</div><div class="line"><span class="number">54</span>: <span class="keyword">return</span> tuple;</div><div class="line"><span class="number">55</span>: &#125;</div></pre></td></tr></table></figure><ul><li><code>hasArguments</code> <strong>参数</strong>，点击 <a href="https://github.com/YunaiV/spring-cloud-gateway/blob/382a4cd98fbb8ac53a83a5559bacb0f885838074/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/support/ArgumentHints.java" rel="external nofollow noopener noreferrer" target="_blank"><code>org.springframework.cloud.gateway.support.ArgumentHints</code></a> 查看代码实现。RoutePredicateFactory / GatewayFilterFactory 实现 ArgumentHints <strong>接口</strong>。</li><li>第 5 至 12 行 ：<strong>校验</strong>参数是否正确( 需要参数<strong>非空</strong> )。</li><li><p>第 15 至 44 行 ：创建 Tuple 。</p><ul><li>第 18 至 24 行 ：获得<strong>一对</strong>参数 KEY 。</li><li>第 26 至 39 行 ：获得<strong>一对</strong>参数 VALUE 。</li><li><p>第 41 行 ：添加<strong>一对</strong>参数 KEY / VALUE 。我们在此处打断点，看看此时各变量的值，路由配置如下 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">websocket_test</span></div><div class="line"><span class="attr">        uri:</span> <span class="attr">ws://localhost:9000</span></div><div class="line"><span class="attr">        order:</span> <span class="number">9000</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Path=/echo</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Query=foo,</span> <span class="string">ba.</span></div></pre></td></tr></table></figure><ul><li>PATH <ul><li><code>/echo</code> <img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_01/03.png" alt=""></li></ul></li><li>Query <ul><li><code>foo</code> <img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_01/04.png" alt=""></li><li><code>ba.</code> <img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_01/05.png" alt=""></li></ul></li></ul></li><li><p>第 44 行 ：创建 Tuple 。</p></li></ul></li><li>第 47 至 53 行 ：<strong>校验</strong>参数是否正确( 需要参数<strong>都存在</strong> )。</li><li>第 54 行 ：返回 Tuple 。</li></ul><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>恩恩，干了一些的文章。这个周末还是木有完成计划写的文章。继续加油！</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_02_01/06.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-route-definition/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 路由（2.1）之 RouteLocator 一览</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-intro/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-intro/</id>
    <published>2020-01-27T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-intro/">http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-intro/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-intro/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-intro/">2. Route</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-intro/">3. RouteLocator</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-intro/">4. CompositeRouteLocator</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-intro/">5. CachingRouteLocator</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-intro/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要对 <strong>路由定位器 RouteLocator 做整体的认识</strong>。</p><p>在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-intro/?self">《Spring-Cloud-Gateway 源码解析 —— 路由（1.1）之 RouteDefinitionLocator 一览》</a> 中，我们对 RouteLocator 对了简单的介绍 ：</p><ul><li><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_01_10/01.png" alt=""></li><li>RouteLocator 可以直接<strong>自定义</strong>路由( <code>org.springframework.cloud.gateway.route.Route</code> ) ，也可以通过 RouteDefinitionRouteLocator 获取 RouteDefinition ，并转换成 Route 。 </li><li>RoutePredicateHandlerMapping 使用 RouteLocator 获得 Route 信息。</li></ul><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-Route"><a href="#2-Route" class="headerlink" title="2. Route"></a>2. Route</h1><p><code>org.springframework.cloud.gateway.route.Route</code> ，路由。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Route</span> <span class="keyword">implements</span> <span class="title">Ordered</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 路由编号</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 路由向的 URI</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> URI uri;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 顺序</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> order;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 谓语数组</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Predicate&lt;ServerWebExchange&gt; predicate;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 过滤器数组</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;GatewayFilter&gt; gatewayFilters;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>id</code> 属性，ID 编号，<strong>唯一</strong>。</li><li><code>predicates</code> 属性，谓语数组。<strong>请求</strong>通过 <code>predicates</code> 判断是否<strong>匹配</strong>。</li><li><code>filters</code> 属性，过滤器数组。</li><li><code>uri</code> 属性，路由向的 URI 。</li><li><code>order</code> 属性，顺序。当请求匹配到多个路由时，使用顺序<strong>小</strong>的。</li><li><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_01_10/03.png" alt=""></li></ul><hr><p>Route 内置 Builder 类，点击 <a href="https://github.com/YunaiV/spring-cloud-gateway/blob/382a4cd98fbb8ac53a83a5559bacb0f885838074/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/route/Route.java#L67" rel="external nofollow noopener noreferrer" target="_blank">链接</a> 查看。</p><hr><p>Route 提供 <code>routeDefinition</code> RouteDefinition 创建对象，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">(RouteDefinition routeDefinition)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> Builder()</div><div class="line">.id(routeDefinition.getId())</div><div class="line">.uri(routeDefinition.getUri())</div><div class="line">.order(routeDefinition.getOrder());</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>predicate</code> / <code>gatewayFilters</code> 属性，需要调用 Builder 相关方法进行设置。</li></ul><h1 id="3-RouteLocator"><a href="#3-RouteLocator" class="headerlink" title="3. RouteLocator"></a>3. RouteLocator</h1><p><code>org.springframework.cloud.gateway.route.RouteLocator</code> ，路由定位器<strong>接口</strong>，定义获得路由数组的方法。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RouteLocator</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function">Flux&lt;Route&gt; <span class="title">getRoutes</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>对 Reactor Flux 暂时不熟悉的同学，可以阅读完本文 Google 进行学习。随着 Spring 5 对响应式编程的推广，厉害如你一定要去掌握。</li></ul><p>在上文中，我们也看到了 RouteLocator 的多个实现类，类图如下 ：</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_01_28/01.png" alt=""></p><ul><li>本文只解析 CompositeRouteLocator / CachingRouteLocator 的源码实现。其他的实现类会在后面文章详细解析。</li><li>自定义的 RouteLocator ，通过<strong>内部类</strong>实现，类图暂时不好体现。</li></ul><h1 id="4-CompositeRouteLocator"><a href="#4-CompositeRouteLocator" class="headerlink" title="4. CompositeRouteLocator"></a>4. CompositeRouteLocator</h1><p><code>org.springframework.cloud.gateway.route.CompositeRouteLocator</code> ，组合<strong>多种</strong> RouteLocator 的实现类，为 RoutePredicateHandlerMapping 提供<strong>统一</strong>入口访问路由。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeRouteLocator</span> <span class="keyword">implements</span> <span class="title">RouteLocator</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Flux&lt;RouteLocator&gt; delegates;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CompositeRouteLocator</span><span class="params">(Flux&lt;RouteLocator&gt; delegates)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.delegates = delegates;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Flux&lt;Route&gt; <span class="title">getRoutes</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.delegates.flatMap(RouteLocator::getRoutes);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>#getRoutes()</code> 方法，提供<strong>统一</strong>方法，将组合的 <code>delegates</code> 的路由<strong>全部</strong>返回。</li></ul><h1 id="5-CachingRouteLocator"><a href="#5-CachingRouteLocator" class="headerlink" title="5. CachingRouteLocator"></a>5. CachingRouteLocator</h1><p><code>org.springframework.cloud.gateway.route.CachingRouteLocator</code> ，<strong>缓存</strong>路由的 RouteLocator 实现类。RoutePredicateHandlerMapping 调用 CachingRouteLocator 的 <code>RouteLocator#getRoutes()</code> 方法，获取路由。</p><p>CachingRouteLocator 代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingRouteLocator</span> <span class="keyword">implements</span> <span class="title">RouteLocator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RouteLocator delegate;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 路由缓存</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;List&lt;Route&gt;&gt; cachedRoutes = <span class="keyword">new</span> AtomicReference&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CachingRouteLocator</span><span class="params">(RouteLocator delegate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.delegate = delegate;</div><div class="line">        <span class="keyword">this</span>.cachedRoutes.compareAndSet(<span class="keyword">null</span>, collectRoutes());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;Route&gt; <span class="title">getRoutes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Flux.fromIterable(<span class="keyword">this</span>.cachedRoutes.get());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Sets the new routes</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> old routes</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;Route&gt; <span class="title">refresh</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Flux.fromIterable(<span class="keyword">this</span>.cachedRoutes.getAndUpdate(</div><div class="line">routes -&gt; CachingRouteLocator.<span class="keyword">this</span>.collectRoutes()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;Route&gt; <span class="title">collectRoutes</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Route&gt; routes = <span class="keyword">this</span>.delegate.getRoutes().collectList().block();</div><div class="line">        <span class="comment">// 排序</span></div><div class="line">        AnnotationAwareOrderComparator.sort(routes);</div><div class="line">        <span class="keyword">return</span> routes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@EventListener</span>(RefreshRoutesEvent.class)</div><div class="line">    <span class="comment">/* for testing */</span> <span class="function"><span class="keyword">void</span> <span class="title">handleRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">        refresh();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>cachedRoutes</code> 属性，路由<strong>缓存</strong>。</li><li>CachingRouteLocator <strong>构造</strong>方法，调用 <code>#collectRoutes()</code> 方法获得路由，并缓存到 <code>cachedRoutes</code> 属性。</li><li><code>#collectRoutes()</code> 方法，从 <code>delegate</code> 获取路由数组。</li><li><code>#getRoutes()</code> 方法，返回路由<strong>缓存</strong>。</li><li><code>#refresh()</code> 方法，刷新<strong>缓存</strong> <code>cachedRoutes</code> 属性。</li><li><code>#handleRefresh()</code> 方法，监听 <a href="https://github.com/YunaiV/spring-cloud-gateway/blob/382a4cd98fbb8ac53a83a5559bacb0f885838074/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/route/RefreshRoutesEvent.java" rel="external nofollow noopener noreferrer" target="_blank"><code>org.springframework.context.ApplicationEvent.RefreshRoutesEvent</code></a> 事件，刷新<strong>缓存</strong>。</li></ul><hr><p>GatewayWebfluxEndpoint 有<strong>一个</strong> HTTP API 调用了 ApplicationEventPublisher ，发布 RefreshRoutesEvent 事件。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;management.context-path:/application&#125;/gateway"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayWebfluxEndpoint</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// ... 省略其他代码</span></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 应用事件发布器</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</div><div class="line"></div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/refresh"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">refresh</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</div><div class="line">        <span class="keyword">return</span> Mono.empty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>POST &quot;/refresh</code> ，发布 RefreshRoutesEvent 事件。CachingRouteLocator 监听到该事件，刷新缓存。</li></ul><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>又是比较干爽( 水更 )的一篇文章。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_01_28/02.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-intro/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gateway/route-locat
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 路由（1.4）之 DiscoveryClientRouteDefinitionLocator 注册中心</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-discover-client/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-discover-client/</id>
    <published>2020-01-24T16:00:00.000Z</published>
    <updated>2017-12-01T14:02:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-discover-client/">http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-discover-client/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-discover-client/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-discover-client/">2. 环境搭建</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-discover-client/">3. DiscoveryClientRouteDefinitionLocator</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-discover-client/">4. 高能</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-discover-client/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要对 <strong>DiscoveryClientRouteDefinitionLocator 的源码实现</strong>。</p><p>DiscoveryClientRouteDefinitionLocator 通过调用 <code>org.springframework.cloud.client.discovery.DiscoveryClient</code> 获取注册在注册中心的服务列表，生成对应的 RouteDefinition 数组。</p><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h1><p>在解析源码之前，我们先以 Eureka 为注册中心，讲解下如何配置 DiscoveryClientRouteDefinitionLocator 。</p><p>第一步，以 <code>spring-cloud-gateway-sample</code> 项目为基础，在 <code>pom.xml</code> 文件添加依赖库。</p><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.M1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>注意，需要排除 <code>spring-boot-starter-web</code> 的依赖，避免和 Spring Cloud Gateway 依赖的 <code>spring-boot-starter-webflux</code> 冲突。</li></ul><p>第二步，在 <code>application.yml</code> 添加 Eureka 相关配置 。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">      name:</span> <span class="string">juejin-gateway</span></div><div class="line"></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    leaseRenewalIntervalInSeconds:</span> <span class="number">10</span></div><div class="line"><span class="attr">    leaseExpirationDurationInSeconds:</span> <span class="number">30</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka.didispace.com/eureka/</span></div></pre></td></tr></table></figure><ul><li>如果你<strong>“懒”</strong>的启动 Eureka ，推荐使用 <a href="http://eureka.didispace.com/" rel="external nofollow noopener noreferrer" target="_blank">《程序猿DD - 公益 - EUREKA SERVER》</a> 。感谢 <strong>1024</strong> 。</li></ul><p>第三步，在 <code>org.springframework.cloud.gateway.sample.GatewaySampleApplication</code> <strong>类</strong>里，添加 RouteDefinitionLocator Bean 配置。</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// &#123;@link DiscoveryClientRouteDefinitionLocator&#125;</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewaySampleApplication</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// ... 省略其他代码</span></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RouteDefinitionLocator <span class="title">discoveryClientRouteDefinitionLocator</span><span class="params">(DiscoveryClient discoveryClient)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DiscoveryClientRouteDefinitionLocator(discoveryClient);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第四步，启动一个注册在 Eureka 的应用服务。机智如你，这里我就不啰嗦落。</p><p>第五步，在 DiscoveryClientRouteDefinitionLocator 的 <code>#getRouteDefinitions()</code> 方法打<strong>断点</strong>，调试启动 <code>spring-cloud-gateway-sample</code> 。小功告成。撒花~</p><h1 id="3-DiscoveryClientRouteDefinitionLocator"><a href="#3-DiscoveryClientRouteDefinitionLocator" class="headerlink" title="3. DiscoveryClientRouteDefinitionLocator"></a>3. DiscoveryClientRouteDefinitionLocator</h1><p><code>org.springframework.cloud.gateway.discovery.DiscoveryClientRouteDefinitionLocator</code> ，通过调用 DiscoveryClient 获取注册在注册中心的服务列表，生成对应的 RouteDefinition 数组。</p><p>代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscoveryClientRouteDefinitionLocator</span> <span class="keyword">implements</span> <span class="title">RouteDefinitionLocator</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">private</span> <span class="keyword">final</span> DiscoveryClient discoveryClient;</div><div class="line"> <span class="number">4</span>: <span class="keyword">private</span> <span class="keyword">final</span> String routeIdPrefix;</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>: <span class="function"><span class="keyword">public</span> <span class="title">DiscoveryClientRouteDefinitionLocator</span><span class="params">(DiscoveryClient discoveryClient)</span> </span>&#123;</div><div class="line"> <span class="number">7</span>: <span class="keyword">this</span>.discoveryClient = discoveryClient;</div><div class="line"> <span class="number">8</span>: <span class="keyword">this</span>.routeIdPrefix = <span class="keyword">this</span>.discoveryClient.getClass().getSimpleName() + <span class="string">"_"</span>;</div><div class="line"> <span class="number">9</span>: &#125;</div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> Flux&lt;RouteDefinition&gt; <span class="title">getRouteDefinitions</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">13</span>: <span class="keyword">return</span> Flux.fromIterable(discoveryClient.getServices())</div><div class="line"><span class="number">14</span>: .map(serviceId -&gt; &#123;</div><div class="line"><span class="number">15</span>: RouteDefinition routeDefinition = <span class="keyword">new</span> RouteDefinition();</div><div class="line"><span class="number">16</span>: <span class="comment">// 设置 ID</span></div><div class="line"><span class="number">17</span>: routeDefinition.setId(<span class="keyword">this</span>.routeIdPrefix + serviceId);</div><div class="line"><span class="number">18</span>: <span class="comment">// 设置 URI</span></div><div class="line"><span class="number">19</span>: routeDefinition.setUri(URI.create(<span class="string">"lb://"</span> + serviceId));</div><div class="line"><span class="number">20</span>: </div><div class="line"><span class="number">21</span>: <span class="comment">// add a predicate that matches the url at /serviceId</span></div><div class="line"><span class="number">22</span>: <span class="comment">/*PredicateDefinition barePredicate = new PredicateDefinition();</span></div><div class="line"><span class="comment">23: barePredicate.setName(normalizePredicateName(PathRoutePredicateFactory.class));</span></div><div class="line"><span class="comment">24: barePredicate.addArg(PATTERN_KEY, "/" + serviceId);</span></div><div class="line"><span class="comment">25: routeDefinition.getPredicates().add(barePredicate);*/</span></div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>: <span class="comment">// 添加 Path 匹配断言</span></div><div class="line"><span class="number">28</span>: <span class="comment">// add a predicate that matches the url at /serviceId/**</span></div><div class="line"><span class="number">29</span>: PredicateDefinition subPredicate = <span class="keyword">new</span> PredicateDefinition();</div><div class="line"><span class="number">30</span>: subPredicate.setName(normalizePredicateName(PathRoutePredicateFactory.class));</div><div class="line"><span class="number">31</span>: subPredicate.addArg(PATTERN_KEY, <span class="string">"/"</span> + serviceId + <span class="string">"/**"</span>);</div><div class="line"><span class="number">32</span>: routeDefinition.getPredicates().add(subPredicate);</div><div class="line"><span class="number">33</span>: </div><div class="line"><span class="number">34</span>: <span class="comment">//<span class="doctag">TODO:</span> support for other default predicates</span></div><div class="line"><span class="number">35</span>: </div><div class="line"><span class="number">36</span>: <span class="comment">// 添加 Path 重写过滤器</span></div><div class="line"><span class="number">37</span>: <span class="comment">// add a filter that removes /serviceId by default</span></div><div class="line"><span class="number">38</span>: FilterDefinition filter = <span class="keyword">new</span> FilterDefinition();</div><div class="line"><span class="number">39</span>: filter.setName(normalizeFilterName(RewritePathGatewayFilterFactory.class));</div><div class="line"><span class="number">40</span>: String regex = <span class="string">"/"</span> + serviceId + <span class="string">"/(?&lt;remaining&gt;.*)"</span>;</div><div class="line"><span class="number">41</span>: String replacement = <span class="string">"/$&#123;remaining&#125;"</span>;</div><div class="line"><span class="number">42</span>: filter.addArg(REGEXP_KEY, regex);</div><div class="line"><span class="number">43</span>: filter.addArg(REPLACEMENT_KEY, replacement);</div><div class="line"><span class="number">44</span>: routeDefinition.getFilters().add(filter);</div><div class="line"><span class="number">45</span>: </div><div class="line"><span class="number">46</span>: <span class="comment">//<span class="doctag">TODO:</span> support for default filters</span></div><div class="line"><span class="number">47</span>: </div><div class="line"><span class="number">48</span>: <span class="keyword">return</span> routeDefinition;</div><div class="line"><span class="number">49</span>: &#125;);</div><div class="line"><span class="number">50</span>: &#125;</div><div class="line"><span class="number">51</span>: &#125;</div></pre></td></tr></table></figure><ul><li><code>discoveryClient</code> 属性，注册发现客户端，用于向注册中心发起请求。</li><li><code>routeIdPrefix</code> 属性，路由配置编号前缀，以 DiscoveryClient 类名 + <code>_</code> 。</li><li>第 13 行 ：调用 <code>discoveryClient</code> 获取注册在注册中心的服务列表。</li><li>第 14 行 ：遍历服务列表，生成对应的 RouteDefinition 数组。</li><li>第 16 行 ：设置 <code>RouteDefinition.id</code> 。</li><li>第 18 行 ：设置 <code>RouteDefinition.uri</code> ，格式为 <code>lb://${serviceId}</code> 。在 LoadBalancerClientFilter 会根据 <code>lb://</code> 前缀过滤处理，负载均衡，选择最终调用的服务地址，在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-load-balancer-client/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.4) 之 LoadBalancerClientFilter 负载均衡》</a> 详细解析。</li><li>第 27 至 32 行 ：使用 PathRoutePredicateFactory 创建 Path 匹配断言。<ul><li>例如服务的 <code>serviceId = spring.application.name = juejin-sample</code> ，通过<strong>网关</strong> <code>http://${gateway}/${serviceId}/some_api</code> 访问<strong>服务</strong> <code>http://some_api</code> 。</li><li>PathRoutePredicateFactory 在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/handler-route-predicate-factory/?self">《Spring-Cloud-Gateway 源码解析 —— 处理器 (3.1) 之 RoutePredicateFactory  路由谓语工厂》「10. PathRoutePredicateFactory」</a> 有详细解析。</li></ul></li><li>第 36 至 44 行 ：使用 RewritePathGatewayFilterFactory 创建重写网关过滤器，用于移除请求路径里的 <code>/${serviceId}</code> 。如果不移除，最终请求不到服务。RewritePathGatewayFilterFactory 在 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/filter-factory/?self">《Spring-Cloud-Gateway 源码解析 —— 过滤器 (4.2) 之 GatewayFilterFactory 过滤器工厂》「4.1 RewritePathGatewayFilterFactory」</a> 有详细解析。</li><li>第 48 行 ：返回路由定义 RouteDefinition 。举个 RouteDefinition 例子 ：<img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_01_25/01.png" alt=""></li></ul><h1 id="4-高能"><a href="#4-高能" class="headerlink" title="4. 高能"></a>4. 高能</h1><p>本小节建议阅读完 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-locator-intro/?self">《Spring-Cloud-Gateway 源码解析 —— 路由（2.1）之 RouteLocator 一览》</a> 再理解。</p><p>RoutePredicateHandlerMapping 使用 CachingRouteLocator 来获取 Route 信息。在 Spring Cloud Gateway 启动后，如果有新加入的服务，则需要刷新 CachingRouteLocator <strong>缓存</strong>。</p><p>这里有一点需要<strong>注意</strong>下 ：新加入的服务，指的是新的 <code>serviceId</code> ，而不是原有服务新增的实例。</p><p>个人建议，写一个定时任务，间隔调用 DiscoveryClient 获取服务列表，若发现<strong>变化</strong>，刷新 CachingRouteLocator <strong>缓存</strong>。</p><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>😈 满足。主要因为 <a href="#">「4. 高能」</a> 这小节，原来还是非常担心服务列表的缓存与刷新问题，如果不解决，网关基本属于不可用的状态。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_01_25/02.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-discover-client/&quot;&gt;http://www.iocoder.cn/Spring-Clou
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 路由（1.3）之 RouteDefinitionRepository 存储器</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-repository/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-repository/</id>
    <published>2020-01-19T16:00:00.000Z</published>
    <updated>2017-12-01T14:01:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-repository/">http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-repository/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-repository/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-repository/">2. RouteDefinitionWriter</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-repository/">3. RouteDefinitionRepository</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-repository/">4. InMemoryRouteDefinitionRepository</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-repository/">5. GatewayWebfluxEndpoint</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-repository/">6. 自定义 RouteDefinitionRepository</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-repository/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要对 <strong>RouteDefinitionRepository 的源码实现</strong>。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_01_20/01.jpeg" alt=""></p><ul><li><strong>蓝色</strong>部分 ：RouteDefinitionRepository 。</li></ul><p>本文涉及到的类图如下 ：</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_01_20/02.png" alt=""></p><ul><li>下面我们来逐个类进行解析。</li></ul><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-RouteDefinitionWriter"><a href="#2-RouteDefinitionWriter" class="headerlink" title="2. RouteDefinitionWriter"></a>2. RouteDefinitionWriter</h1><p><code>org.springframework.cloud.gateway.route.RouteDefinitionWriter</code> ，路由配置写入<strong>接口</strong>。该接口定义了<strong>保存</strong>与<strong>删除</strong>两个方法，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RouteDefinitionWriter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 保存路由配置</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> route 路由配置</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> Mono&lt;Void&gt;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">Mono&lt;Void&gt; <span class="title">save</span><span class="params">(Mono&lt;RouteDefinition&gt; route)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 删除路由配置</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> routeId 路由编号</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> Mono&lt;Void&gt;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">Mono&lt;Void&gt; <span class="title">delete</span><span class="params">(Mono&lt;String&gt; routeId)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>该接口有什么用呢？我们继续往下看。</li></ul><h1 id="3-RouteDefinitionRepository"><a href="#3-RouteDefinitionRepository" class="headerlink" title="3. RouteDefinitionRepository"></a>3. RouteDefinitionRepository</h1><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRepository</code> ，存储器 RouteDefinitionLocator <strong>接口</strong>，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RouteDefinitionRepository</span> <span class="keyword">extends</span> <span class="title">RouteDefinitionLocator</span>, <span class="title">RouteDefinitionWriter</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>继承 RouteDefinitionLocator <strong>接口</strong>。</li><li>继承 RouteDefinitionWriter <strong>接口</strong>。</li></ul><p>通过实现该接口，实现从<strong>存储器</strong>( 例如，内存 / Redis / MySQL 等 )读取、保存、删除路由配置。</p><p>目前 Spring Cloud Gateway 实现了<strong>基于内存为存储器</strong>的 InMemoryRouteDefinitionRepository 。</p><h1 id="4-InMemoryRouteDefinitionRepository"><a href="#4-InMemoryRouteDefinitionRepository" class="headerlink" title="4. InMemoryRouteDefinitionRepository"></a>4. InMemoryRouteDefinitionRepository</h1><p><code>org.springframework.cloud.gateway.route.InMemoryRouteDefinitionRepository</code> ，<strong>基于内存为存储器</strong>的 RouteDefinitionLocator ，代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InMemoryRouteDefinitionRepository</span> <span class="keyword">implements</span> <span class="title">RouteDefinitionRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 路由配置映射</span></div><div class="line"><span class="comment">     * key ：路由编号 &#123;<span class="doctag">@link</span> RouteDefinition#id&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, RouteDefinition&gt; routes = synchronizedMap(<span class="keyword">new</span> LinkedHashMap&lt;String, RouteDefinition&gt;());</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">save</span><span class="params">(Mono&lt;RouteDefinition&gt; route)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> route.flatMap( r -&gt; &#123;</div><div class="line">            routes.put(r.getId(), r);</div><div class="line">            <span class="keyword">return</span> Mono.empty();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">delete</span><span class="params">(Mono&lt;String&gt; routeId)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> routeId.flatMap(id -&gt; &#123;</div><div class="line">            <span class="keyword">if</span> (routes.containsKey(id)) &#123;</div><div class="line">                routes.remove(id);</div><div class="line">                <span class="keyword">return</span> Mono.empty();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> Mono.error(<span class="keyword">new</span> NotFoundException(<span class="string">"RouteDefinition not found: "</span>+routeId));</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;RouteDefinition&gt; <span class="title">getRouteDefinitions</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Flux.fromIterable(routes.values());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>代码比较易懂，瞅瞅就好。</li><li><code>InMemoryRouteDefinitionRepository#getRouteDefinitions()</code> 方法的调用，我们已经在 CompositeRouteDefinitionLocator 看到。</li><li><code>InMemoryRouteDefinitionRepository#save()</code> / <code>InMemoryRouteDefinitionRepository#delete()</code> 方法，下面在 GatewayWebfluxEndpoint 可以看到。</li></ul><h1 id="5-GatewayWebfluxEndpoint"><a href="#5-GatewayWebfluxEndpoint" class="headerlink" title="5. GatewayWebfluxEndpoint"></a>5. GatewayWebfluxEndpoint</h1><p><code>org.springframework.cloud.gateway.actuate.GatewayWebfluxEndpoint</code> ，提供<strong>管理</strong>网关的 HTTP API 。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;management.context-path:/application&#125;/gateway"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayWebfluxEndpoint</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 存储器 RouteDefinitionLocator 对象</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> RouteDefinitionWriter routeDefinitionWriter;</div><div class="line"></div><div class="line">    <span class="comment">// ... 省略代码</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>从注解 <code>@RestController</code> 我们可以得知，GatewayWebfluxEndpoint 是一个 <strong>Controller</strong> 。</li></ul><p>GatewayWebfluxEndpoint 有<strong>两个</strong> HTTP API 调用了 RouteDefinitionWriter 的<strong>两个</strong>方法。</p><ul><li><p><code>POST &quot;/routes/{id}&quot;</code> ，保存路由配置，代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@PostMapping</span>(<span class="string">"/routes/&#123;id&#125;"</span>)</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Void&gt;&gt; save(<span class="meta">@PathVariable</span> String id, <span class="meta">@RequestBody</span> Mono&lt;RouteDefinition&gt; route) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.routeDefinitionWriter.save(route.map(r -&gt;  &#123; <span class="comment">// 设置 ID</span></div><div class="line">r.setId(id);</div><div class="line">log.debug(<span class="string">"Saving route: "</span> + route);</div><div class="line"><span class="keyword">return</span> r;</div><div class="line">&#125;)).then(Mono.defer(() -&gt; <span class="comment">// status ：201 ，创建成功。参见 HTTP 规范 ：https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201</span></div><div class="line">Mono.just(ResponseEntity.created(URI.create(<span class="string">"/routes/"</span>+id)).build())</div><div class="line">));</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>例如，HTTP 请求如下 ：</p><blockquote><p>http POST :8080/application/gateway/routes/apiaddreqhead uri=<a href="http://httpbin.org:80" rel="external nofollow noopener noreferrer" target="_blank">http://httpbin.org:80</a> predicates:=’[“Host=**.apiaddrequestheader.org”, “Path=/headers”]’ filters:=’[“AddRequestHeader=X-Request-ApiFoo, ApiBar”]’    </p></blockquote></li></ul></li><li><p><code>DELETE &quot;/routes/{id}&quot;</code> ，删除路由配置，代码如下 ：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/routes/&#123;id&#125;"</span>)</div><div class="line"><span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Object&gt;&gt; delete(<span class="meta">@PathVariable</span> String id) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.routeDefinitionWriter.delete(Mono.just(id))</div><div class="line">.then(Mono.defer(() -&gt; Mono.just(ResponseEntity.ok().build()))) <span class="comment">// 删除成功</span></div><div class="line">.onErrorResume(t -&gt; t <span class="keyword">instanceof</span> NotFoundException, t -&gt; Mono.just(ResponseEntity.notFound().build())); <span class="comment">// 删除失败</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="6-自定义-RouteDefinitionRepository"><a href="#6-自定义-RouteDefinitionRepository" class="headerlink" title="6. 自定义 RouteDefinitionRepository"></a>6. 自定义 RouteDefinitionRepository</h1><p>使用 InMemoryRouteDefinitionRepository 来维护 RouteDefinition 信息，在网关实例重启或者崩溃后，RouteDefinition 就会丢失。此时我们可以实现 RouteDefinitionRepository <strong>接口</strong>，以实现例如 MySQLRouteDefinitionRepository 。</p><p>通过类似 MySQL 等<strong>持久化</strong>、<strong>可共享</strong>的存储器，也可以带来 Spring Cloud Gateway 实例<strong>集群</strong>获得一致的、相同的 RouteDefinition 信息。</p><p>另外，我们看到 RouteDefinitionRepository 初始化的代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// GatewayAutoConfiguration.java</span></div><div class="line"><span class="meta">@Bean</span> <span class="comment">// 4.2</span></div><div class="line"><span class="meta">@ConditionalOnMissingBean</span>(RouteDefinitionRepository.class)</div><div class="line"><span class="function"><span class="keyword">public</span> InMemoryRouteDefinitionRepository <span class="title">inMemoryRouteDefinitionRepository</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> InMemoryRouteDefinitionRepository();</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>注解 <code>@ConditionalOnMissingBean(RouteDefinitionRepository.class)</code> ，当<strong>不存在</strong> RouteDefinitionRepository 的 Bean 对象时，初始化 InMemoryRouteDefinitionRepository 。也就是说，我们可以初始化自定义的 RouteDefinitionRepository 以<strong>“注入”</strong> 。</li></ul><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>比较干爽( 水更 )的一篇文章。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_01_20/03.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-repository/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gat
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Gateway 源码解析 —— 路由（1.2）之 PropertiesRouteDefinitionLocator 配置文件</title>
    <link href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-properties/"/>
    <id>http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-properties/</id>
    <published>2020-01-14T16:00:00.000Z</published>
    <updated>2017-12-01T14:01:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原创出处 <a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-properties/">http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-properties/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p><p><strong>本文主要基于 Spring-Cloud-Gateway 2.0.x M4</strong>  </p><ul><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-properties/">1. 概述</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-properties/">2. PropertiesRouteDefinitionLocator</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-properties/">3. GatewayProperties</a></li><li><a href="http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-properties/">666. 彩蛋</a></li></ul><hr><p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p><blockquote><p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：  </p><ol><li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li><li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li><li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li><li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li><li><strong>认真的</strong>源码交流微信群。</li></ol></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要对 <strong>PropertiesRouteDefinitionLocator 的源码实现</strong>。</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_01_15/01.jpeg" alt=""></p><ul><li><strong>蓝色</strong>部分 ：PropertiesRouteDefinitionLocator 。</li></ul><hr><p><strong>推荐 Spring Cloud 书籍</strong>：</p><ul><li>请支持正版。下载盗版，<strong>等于主动编写低级 BUG</strong> 。</li><li>程序猿DD —— <a href="https://union-click.jd.com/jdc?d=505Twi" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud微服务实战》</a></li><li>周立 —— <a href="https://union-click.jd.com/jdc?d=k3sAaK" rel="external nofollow noopener noreferrer" target="_blank">《Spring Cloud与Docker微服务架构实战》</a></li><li>两书齐买，京东包邮。</li></ul><h1 id="2-PropertiesRouteDefinitionLocator"><a href="#2-PropertiesRouteDefinitionLocator" class="headerlink" title="2. PropertiesRouteDefinitionLocator"></a>2. PropertiesRouteDefinitionLocator</h1><p><code>org.springframework.cloud.gateway.config.PropertiesRouteDefinitionLocator</code> ，从<strong>配置文件</strong>( 例如，YML / Properties 等 ) 读取路由配置。代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesRouteDefinitionLocator</span> <span class="keyword">implements</span> <span class="title">RouteDefinitionLocator</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> GatewayProperties properties;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">PropertiesRouteDefinitionLocator</span><span class="params">(GatewayProperties properties)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.properties = properties;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Flux&lt;RouteDefinition&gt; <span class="title">getRouteDefinitions</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> Flux.fromIterable(<span class="keyword">this</span>.properties.getRoutes());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>#getRouteDefinitions()</code> 方法，从 <strong>GatewayProperties</strong> 获取路由配置数组。</li></ul><h1 id="3-GatewayProperties"><a href="#3-GatewayProperties" class="headerlink" title="3. GatewayProperties"></a>3. GatewayProperties</h1><p><code>org.springframework.cloud.gateway.config.GatewayProperties</code> ，从配置文件<strong>读取</strong> ：</p><ul><li>路由配置</li><li><strong>默认</strong>过滤器配置。当 RouteDefinition =&gt; Route 时，会将过滤器配置添加到<strong>每个</strong> Route 。</li></ul><p>GatewayProperties 代码如下 ：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.cloud.gateway"</span>)</div><div class="line"><span class="meta">@Validated</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayProperties</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * List of Routes</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@NotNull</span></div><div class="line"><span class="meta">@Valid</span></div><div class="line"><span class="keyword">private</span> List&lt;RouteDefinition&gt; routes = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * List of filter definitions that are applied to every route.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">private</span> List&lt;FilterDefinition&gt; defaultFilters = loadDefaults();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> ArrayList&lt;FilterDefinition&gt; <span class="title">loadDefaults</span><span class="params">()</span> </span>&#123;</div><div class="line">ArrayList&lt;FilterDefinition&gt; defaults = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">FilterDefinition definition = <span class="keyword">new</span> FilterDefinition();</div><div class="line">definition.setName(normalizeFilterName(RemoveNonProxyHeadersGatewayFilterFactory.class));</div><div class="line">defaults.add(definition);</div><div class="line"><span class="keyword">return</span> defaults;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p><code>routes</code> 属性，路由配置。通过 <code>spring.cloud.gateway.routes</code> 配置。以 YAML 配置文件举例子 ： </p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="bullet">      -</span> <span class="string">host_example_to_httpbin=$&#123;test.uri&#125;,</span> <span class="string">Host=**.example.org</span></div><div class="line"></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">host_foo_path_headers_to_httpbin</span></div><div class="line"><span class="attr">        uri:</span> <span class="string">$&#123;test.uri&#125;</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Host=**.foo.org</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Path=/headers</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Method=GET</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Query=foo,</span> <span class="string">ba.</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Query=baz</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Cookie=chocolate,</span> <span class="string">ch.p</span></div><div class="line"><span class="bullet">        -</span> <span class="string">After=1900-01-20T17:42:47.789-07:00[America/Denver]</span></div><div class="line"><span class="attr">        filters:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">AddResponseHeader=X-Response-Foo,</span> <span class="string">Bar</span></div><div class="line"></div><div class="line">      <span class="comment"># =====================================</span></div><div class="line"><span class="attr">      - id:</span> <span class="string">add_request_header_test</span></div><div class="line"><span class="attr">        uri:</span> <span class="string">$&#123;test.uri&#125;</span></div><div class="line"><span class="attr">        predicates:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Host=**.addrequestheader.org</span></div><div class="line"><span class="bullet">        -</span> <span class="string">Path=/headers</span></div><div class="line"><span class="attr">        filters:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">AddRequestHeader=X-Request-Foo,</span> <span class="string">Bar</span></div></pre></td></tr></table></figure><ul><li>更多例子，点击 <a href="https://github.com/YunaiV/spring-cloud-gateway/blob/382a4cd98fbb8ac53a83a5559bacb0f885838074/spring-cloud-gateway-core/src/test/resources/application.yml#L15" rel="external nofollow noopener noreferrer" target="_blank">application.yml</a> 查看。</li></ul></li><li><p><code>defaultFilters</code> 属性，<strong>默认</strong>过滤器配置。通过 <code>spring.cloud.gateway.default-filters</code> 配置。以 YAML 配置文件举例子 ：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      default-filters:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">AddResponseHeader=X-Response-Default-Foo,</span> <span class="string">Default-Bar</span></div><div class="line"><span class="bullet">      -</span> <span class="string">PrefixPath=/httpbin</span></div></pre></td></tr></table></figure><ul><li>更多例子，点击 <a href="https://github.com/YunaiV/spring-cloud-gateway/blob/382a4cd98fbb8ac53a83a5559bacb0f885838074/spring-cloud-gateway-core/src/test/resources/application.yml#L10" rel="external nofollow noopener noreferrer" target="_blank">application.yml</a> 查看。</li></ul></li></ul><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>TODO 【3017】 与 Spring Cloud Config 结合</p><p><img src="http://www.iocoder.cn/images/Spring-Cloud-Gateway/2020_01_15/02.png" alt=""></p><p>胖友，分享一波朋友圈可好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 原创出处 &lt;a href=&quot;http://www.iocoder.cn/Spring-Cloud-Gateway/route-definition-locator-properties/&quot;&gt;http://www.iocoder.cn/Spring-Cloud-Gat
      
    
    </summary>
    
      <category term="Spring-Cloud-Gateway" scheme="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/"/>
    
    
  </entry>
  
</feed>
