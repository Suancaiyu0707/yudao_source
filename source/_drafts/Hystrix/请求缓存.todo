# 5. 缓存

HystrixRequestCache ，Hystrix 请求缓存。代码如下：

```Java
public class HystrixRequestCache {

    // the String key must be: HystrixRequestCache.prefix + concurrencyStrategy + cacheKey
    private final static ConcurrentHashMap<RequestCacheKey, HystrixRequestCache> caches = new ConcurrentHashMap<RequestCacheKey, HystrixRequestCache>();
    
    private final RequestCacheKey rcKey;
    private final HystrixConcurrencyStrategy concurrencyStrategy;
    
    private static final HystrixRequestVariableHolder<ConcurrentHashMap<ValueCacheKey, HystrixCachedObservable<?>>> requestVariableForCache = new HystrixRequestVariableHolder<ConcurrentHashMap<ValueCacheKey, HystrixCachedObservable<?>>>(new HystrixRequestVariableLifecycle<ConcurrentHashMap<ValueCacheKey, HystrixCachedObservable<?>>>() {

        @Override
        public ConcurrentHashMap<ValueCacheKey, HystrixCachedObservable<?>> initialValue() {
            return new ConcurrentHashMap<ValueCacheKey, HystrixCachedObservable<?>>();
        }

        @Override
        public void shutdown(ConcurrentHashMap<ValueCacheKey, HystrixCachedObservable<?>> value) {
            // nothing to shutdown
        }

    });
    
    // ... 省略其他属性与方法
}
```

* `rcKey` 属性，请求缓存 KEY ，点击 [链接](https://github.com/Netflix/Hystrix/blob/1f64fced24289ea435f1e2d5a47a068bf7b79729/hystrix-core/src/main/java/com/netflix/hystrix/HystrixRequestCache.java#L221) 查看 RequestCacheKey 代码。RequestCacheKey 由三部分组成 ：
    * `type` ：类型，分成 Collapser 、Command 两种。
    * `key` ：键。
        * 当类型为 Command 时，使用 `com.netflix.hystrix.HystrixCommandKey` 。
        * 当类型为 Collapser 时，使用 `com.netflix.hystrix.HystrixCollapserKey` 。
   * `concurrencyStrategy` 属性，并发策略。
* `concurrencyStrategy` 属性，并发策略。

* `caches` **静态**属性。HystrixRequestCache 同时也是 HystrixRequestCache 的**管理器**。
* `requestVariableForCache` **静态**属性。一个看似很复杂的变量，我们进行下拆解：
    * `HystrixRequestVariableHolder(HystrixRequestVariableLifecycle)` 构造方法，点击 [链接](https://github.com/Netflix/Hystrix/blob/1f64fced24289ea435f1e2d5a47a068bf7b79729/hystrix-core/src/main/java/com/netflix/hystrix/strategy/concurrency/HystrixRequestVariableHolder.java#L43) 查看，传递参数 HystrixRequestVariableLifecycle 。
        * HystrixRequestVariableLifecycle ：定义 HystrixRequestVariable 的**创建**( `#initialValue()` )和**关闭(`#shutdown(...)`)**的接口方法，点击 [链接](https://github.com/Netflix/Hystrix/blob/1f64fced24289ea435f1e2d5a47a068bf7b79729/hystrix-core/src/main/java/com/netflix/hystrix/strategy/concurrency/HystrixRequestVariableLifecycle.java#L23) 查看。
   * HystrixRequestVariableHolder 可以理解成一个 **Key** 为 HystrixConcurrencyStrategy ，**Value** 为 ConcurrentHashMap 的一个 **Map** 。所以，`requestVariableForCache` 可以看成一个**两层的 Map** 。为什么可以这么理解？HystrixRequestVariableHolder 提供 `#get(HystrixConcurrencyStrategy)` 的方法，点击 [链接](https://github.com/Netflix/Hystrix/blob/1f64fced24289ea435f1e2d5a47a068bf7b79729/hystrix-core/src/main/java/com/netflix/hystrix/strategy/concurrency/HystrixRequestVariableHolder.java#L48) 查看该方法。在 [「获得 HystrixCachedObservable 」](#) 也会详细解析。

## 5.1 获得 HystrixRequestCache

当命令创建时，调用 `HystrixRequestCache#getInstance(...)` 方法，获得 HystrixRequestCache 。代码如下 ：

```Java
abstract class AbstractCommand<R> implements HystrixInvokableInfo<R>, HystrixObservable<R> {

    protected final HystrixCommandKey commandKey;

    protected final HystrixConcurrencyStrategy concurrencyStrategy;
    
    protected final HystrixRequestCache requestCache;
    
    protected AbstractCommand(HystrixCommandGroupKey group, HystrixCommandKey key, HystrixThreadPoolKey threadPoolKey, HystrixCircuitBreaker circuitBreaker, HystrixThreadPool threadPool,
            HystrixCommandProperties.Setter commandPropertiesDefaults, HystrixThreadPoolProperties.Setter threadPoolPropertiesDefaults,
            HystrixCommandMetrics metrics, TryableSemaphore fallbackSemaphore, TryableSemaphore executionSemaphore,
            HystrixPropertiesStrategy propertiesStrategy, HystrixCommandExecutionHook executionHook) {
    
        // ... 省略无关代码
        this.commandKey = initCommandKey(key, getClass());
        
        this.requestCache = HystrixRequestCache.getInstance(this.commandKey, this.concurrencyStrategy);
    }

}
```

* `commandKey` 属性，命令 KEY ，默认值为类名，可设置自定义生成方式。点击 [链接](https://github.com/Netflix/Hystrix/blob/1f64fced24289ea435f1e2d5a47a068bf7b79729/hystrix-core/src/main/java/com/netflix/hystrix/AbstractCommand.java#L194) 查看 `#initCommandKey(...)` 实现代码。
* `concurrencyStrategy` 属性，并发策略。
* `HystrixRequestCache#getInstance(...)` 方法，代码如下：

    ```Java
    // HystrixCommandKey
    public static HystrixRequestCache getInstance(HystrixCommandKey key, HystrixConcurrencyStrategy concurrencyStrategy) {
        return getInstance(new RequestCacheKey(key, concurrencyStrategy), concurrencyStrategy);
    }
    
    // HystrixCollapserKey
    public static HystrixRequestCache getInstance(HystrixCollapserKey key, HystrixConcurrencyStrategy concurrencyStrategy) {
        return getInstance(new RequestCacheKey(key, concurrencyStrategy), concurrencyStrategy);
    }
    
    private static HystrixRequestCache getInstance(RequestCacheKey rcKey, HystrixConcurrencyStrategy concurrencyStrategy) {
        HystrixRequestCache c = caches.get(rcKey);
        if (c == null) { // 不存在
            // 创建 HystrixRequestCache
             HystrixRequestCache newRequestCache = new HystrixRequestCache(rcKey, concurrencyStrategy);
             // 添加 HystrixRequestCache
             HystrixRequestCache existing = caches.putIfAbsent(rcKey, newRequestCache);
             if (existing == null) { // 添加成功
                 // we won so use the new one
                 c = newRequestCache;
             } else { // 添加失败
                 // we lost so use the existing
                 c = existing;
             }
         }
         return c;
    }
    ```
    * 获得 HystrixRequestCache 。若不存在，根据 RequestCacheKey 和 HystrixConcurrencyStrategy 创建 HystrixRequestCache ，**考虑并发的情况下**，添加到 `caches` 。

## 5.2 获得 HystrixCachedObservable

调用 `HystrixRequestCache#get(...)` 方法，获得 HystrixCachedObservable 。代码如下 ：

```Java

```